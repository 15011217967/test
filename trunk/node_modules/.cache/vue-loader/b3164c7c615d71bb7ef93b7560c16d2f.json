{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\components\\tagMatching.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\components\\tagMatching.vue","mtime":1572415123946},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nlet allTags = [];\r\nlet flag = true;\r\nlet tagFlag=false,groupFlag=false,tagIds=[];\r\nexport default {\r\n  name: \"tag-group-list\",\r\n  data() {\r\n    return {\r\n      wholeGroups: [], //全部分组\r\n      //全部标签分组\r\n      allTagGroups: [],\r\n      //新\r\n      defaultProps: {\r\n        children: \"collocationTagItems\",\r\n        label: \"name\"\r\n      },\r\n      selectTags: [], //已选标签\r\n      filterText: '',\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n    this.getAllGroupData();\r\n  },\r\n  watch: {\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n    selectTags(val){\r\n      //console.log(val);\r\n      //productId tagId tagName\r\n      if(val.length >0){\r\n        let tags= this.$common.deepCopy(val);\r\n        let arr=[];\r\n        for (let i = 0; i < tags.length; i++) {\r\n          arr.push({tagId:tags[i].tagId,tagName:tags[i].tagName,})\r\n        }\r\n        this.$emit('input',arr);\r\n        tags = null;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.wholeGroups=[];\r\n      this.allTagGroups=[];\r\n      this.selectTags=[];\r\n      this.filterText='';\r\n      flag=true;\r\n      allTags=[];\r\n      tagFlag=false;\r\n      groupFlag=false;\r\n      tagIds=[];\r\n    },\r\n    //获取全部分组\r\n    getAllGroupData() {\r\n      this.request(this.api.collocation.collocationTagGroup_list, {\r\n        subset: true,\r\n        valid: true\r\n      }).then(res => {\r\n        //  console.log(res);\r\n        let _data = res.data;\r\n        let tagList = [];\r\n        for (let i = 0; i < _data.length; i++) {\r\n          // _data[i]._id = _data[i].id;\r\n          let items = _data[i].collocationTagItems;\r\n          for (let k = 0; k < items.length; k++) {\r\n            items[k].name = items[k].tagName;\r\n            // items[k]._id = items[k].tagId;\r\n            tagList.push(items[k]);\r\n          }\r\n        }\r\n        //console.log(_data);\r\n        //拿到全部的 数组及标签 进行set 处理\r\n        this.allTagGroups = _data; //全部\r\n        //存储下全部的标签 只有标签 会有重复 但无关紧要\r\n        allTags = this.$common.deepCopy(tagList);\r\n        //处理回显\r\n        groupFlag=true;\r\n        this.handleEcho();\r\n      });\r\n    },\r\n    //回显数据 从父组件获取  先这么写 后期优化  抬走下一位\r\n    propInit(_ids){\r\n      if(_ids.length > 0){\r\n        tagFlag=true;\r\n        tagIds=_ids;\r\n        this.handleEcho();\r\n      }\r\n    },\r\n    handleEcho(){\r\n      if(tagFlag && groupFlag){\r\n        this.setCheckedKeys(tagIds)\r\n        //已经懵逼了 再写个方法处理向右边放入数据\r\n        this.setSelectTags(tagIds);\r\n      }\r\n    },\r\n    //节点选中状态发生变化时的回调\r\n    handleCheckChange(data, checked, indeterminate) {\r\n      console.log(data, checked, indeterminate);\r\n      flag = checked;\r\n      let _ids = [];\r\n      if (!checked) {\r\n        if (!!data.tagId) {\r\n        console.log(1);\r\n          //拿到已选的数据中的值\r\n          let tags = this.selectTags;\r\n          for (let i = 0; i < tags.length; i++) {\r\n            if (tags[i].tagId != data.tagId) {\r\n              _ids.push(tags[i].id);\r\n            }\r\n          }\r\n         // this.$refs.tree.setCheckedKeys(_ids);\r\n        }\r\n      }\r\n    },\r\n    //节点发生改变触发回调 当复选框被点击的时候触发\r\n    handleCheck(data, obj) {\r\n      // console.log(data);\r\n      console.log(obj);\r\n      if (obj.checkedKeys.length > 0) {\r\n        this.handleKeyGetTagData(obj.checkedKeys);\r\n      } else {\r\n        this.selectTags = [];\r\n      }\r\n    },\r\n    //处理Key 找到属性\r\n    handleKeyGetTagData(keys) {\r\n        //此时获取的Key 是ztree 的id\r\n        // console.log(allTags);\r\n        let tags = allTags,\r\n          tagsLen = tags.length;\r\n        let selectTags = [];\r\n        let hash = {};\r\n        for (let i = 0; i < keys.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (keys[i] == tags[k].id && !!tags[k].tagId) {\r\n              selectTags.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        const newArr = selectTags.reduceRight((item, next) => {\r\n          hash[next.tagId] ? \"\" : (hash[next.tagId] = true && item.push(next));\r\n          return item;\r\n        }, []);\r\n        this.selectTags = this.$common.deepCopy(newArr);\r\n        //console.log(this.selectTags);\r\n        //让其他ztree有当前标签的被选中\r\n        //TODO 加个状态 如果事件调用顺序变了 会出现问题\r\n      if (flag) {\r\n        this.setCheckedKeys(newArr);\r\n      }\r\n    },\r\n    //根据TagId 选中 全部Ztree中 已有的标签\r\n    setCheckedKeys(tagsList) {\r\n      let listId = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n      for (let i = 0; i < tagsList.length; i++) {\r\n        for (let k = 0; k < tagsLen; k++) {\r\n          if (tagsList[i].tagId == tags[k].tagId) {\r\n            listId.push(tags[k].id);\r\n          }\r\n        }\r\n      }\r\n      this.$refs.tree.setCheckedKeys(listId);\r\n    },\r\n    //修改回显时处理右边的数据\r\n    setSelectTags(tagsList){\r\n      let list = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n        for (let i = 0; i < tagsList.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (tagsList[i].tagId == tags[k].tagId) {\r\n              list.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        this.selectTags=list;\r\n    },\r\n    //处理过滤函数\r\n    filterNode(value, data) {\r\n        if (!value) return true;\r\n        return data.name.indexOf(value) !== -1;\r\n    },\r\n  }\r\n};\r\n",{"version":3,"sources":["tagMatching.vue"],"names":[],"mappingsfile":"tagMatching.vue","sourceRoot":"src/views/product/components","sourcesContent":["<!--\r\n * @Description: In User Settings Edit\r\n * @Author: your name\r\n * @Date: 2019-07-06 14:36:41\r\n * @LastEditTime: 2019-08-13 19:03:52\r\n * @LastEditors: Please set LastEditors\r\n -->\r\n<template>\r\n  <ul class=\"tag-wrap\">\r\n    <!-- 分组 -->\r\n    <li>\r\n      <div class=\"check-tab\">\r\n        <span class=\"label\">搜索标签：</span>\r\n        <el-input\r\n        class=\"input-w-2\"\r\n        placeholder=\"请输入标签名称\"\r\n        v-model=\"filterText\">\r\n        </el-input>&nbsp;\r\n        <!-- <el-button type=\"primary\" @click=\"setCheckedKeys\" plain size=\"small\">添加标签</el-button> -->\r\n      </div>\r\n      <div class=\"ztree-wrap\">\r\n        <el-tree\r\n          :data=\"allTagGroups\"\r\n          show-checkbox\r\n          node-key=\"id\"\r\n          ref=\"tree\"\r\n          highlight-current\r\n          :props=\"defaultProps\"\r\n          :filter-node-method=\"filterNode\"\r\n          @check-change=\"handleCheckChange\"\r\n          @check=\"handleCheck\"\r\n        ></el-tree>\r\n      </div>\r\n    </li>\r\n    <!-- 录入标签 -->\r\n    <li>\r\n      <div class=\"select-tabs\">\r\n        <h6 class=\"label\">已选标签：</h6>\r\n        <ul class=\"clearfix\">\r\n          <li v-for=\"(item,index) in selectTags\" :key=\"index\">{{item.tagName}}</li>\r\n        </ul>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nlet allTags = [];\r\nlet flag = true;\r\nlet tagFlag=false,groupFlag=false,tagIds=[];\r\nexport default {\r\n  name: \"tag-group-list\",\r\n  data() {\r\n    return {\r\n      wholeGroups: [], //全部分组\r\n      //全部标签分组\r\n      allTagGroups: [],\r\n      //新\r\n      defaultProps: {\r\n        children: \"collocationTagItems\",\r\n        label: \"name\"\r\n      },\r\n      selectTags: [], //已选标签\r\n      filterText: '',\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n    this.getAllGroupData();\r\n  },\r\n  watch: {\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n    selectTags(val){\r\n      //console.log(val);\r\n      //productId tagId tagName\r\n      if(val.length >0){\r\n        let tags= this.$common.deepCopy(val);\r\n        let arr=[];\r\n        for (let i = 0; i < tags.length; i++) {\r\n          arr.push({tagId:tags[i].tagId,tagName:tags[i].tagName,})\r\n        }\r\n        this.$emit('input',arr);\r\n        tags = null;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.wholeGroups=[];\r\n      this.allTagGroups=[];\r\n      this.selectTags=[];\r\n      this.filterText='';\r\n      flag=true;\r\n      allTags=[];\r\n      tagFlag=false;\r\n      groupFlag=false;\r\n      tagIds=[];\r\n    },\r\n    //获取全部分组\r\n    getAllGroupData() {\r\n      this.request(this.api.collocation.collocationTagGroup_list, {\r\n        subset: true,\r\n        valid: true\r\n      }).then(res => {\r\n        //  console.log(res);\r\n        let _data = res.data;\r\n        let tagList = [];\r\n        for (let i = 0; i < _data.length; i++) {\r\n          // _data[i]._id = _data[i].id;\r\n          let items = _data[i].collocationTagItems;\r\n          for (let k = 0; k < items.length; k++) {\r\n            items[k].name = items[k].tagName;\r\n            // items[k]._id = items[k].tagId;\r\n            tagList.push(items[k]);\r\n          }\r\n        }\r\n        //console.log(_data);\r\n        //拿到全部的 数组及标签 进行set 处理\r\n        this.allTagGroups = _data; //全部\r\n        //存储下全部的标签 只有标签 会有重复 但无关紧要\r\n        allTags = this.$common.deepCopy(tagList);\r\n        //处理回显\r\n        groupFlag=true;\r\n        this.handleEcho();\r\n      });\r\n    },\r\n    //回显数据 从父组件获取  先这么写 后期优化  抬走下一位\r\n    propInit(_ids){\r\n      if(_ids.length > 0){\r\n        tagFlag=true;\r\n        tagIds=_ids;\r\n        this.handleEcho();\r\n      }\r\n    },\r\n    handleEcho(){\r\n      if(tagFlag && groupFlag){\r\n        this.setCheckedKeys(tagIds)\r\n        //已经懵逼了 再写个方法处理向右边放入数据\r\n        this.setSelectTags(tagIds);\r\n      }\r\n    },\r\n    //节点选中状态发生变化时的回调\r\n    handleCheckChange(data, checked, indeterminate) {\r\n      console.log(data, checked, indeterminate);\r\n      flag = checked;\r\n      let _ids = [];\r\n      if (!checked) {\r\n        if (!!data.tagId) {\r\n        console.log(1);\r\n          //拿到已选的数据中的值\r\n          let tags = this.selectTags;\r\n          for (let i = 0; i < tags.length; i++) {\r\n            if (tags[i].tagId != data.tagId) {\r\n              _ids.push(tags[i].id);\r\n            }\r\n          }\r\n         // this.$refs.tree.setCheckedKeys(_ids);\r\n        }\r\n      }\r\n    },\r\n    //节点发生改变触发回调 当复选框被点击的时候触发\r\n    handleCheck(data, obj) {\r\n      // console.log(data);\r\n      console.log(obj);\r\n      if (obj.checkedKeys.length > 0) {\r\n        this.handleKeyGetTagData(obj.checkedKeys);\r\n      } else {\r\n        this.selectTags = [];\r\n      }\r\n    },\r\n    //处理Key 找到属性\r\n    handleKeyGetTagData(keys) {\r\n        //此时获取的Key 是ztree 的id\r\n        // console.log(allTags);\r\n        let tags = allTags,\r\n          tagsLen = tags.length;\r\n        let selectTags = [];\r\n        let hash = {};\r\n        for (let i = 0; i < keys.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (keys[i] == tags[k].id && !!tags[k].tagId) {\r\n              selectTags.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        const newArr = selectTags.reduceRight((item, next) => {\r\n          hash[next.tagId] ? \"\" : (hash[next.tagId] = true && item.push(next));\r\n          return item;\r\n        }, []);\r\n        this.selectTags = this.$common.deepCopy(newArr);\r\n        //console.log(this.selectTags);\r\n        //让其他ztree有当前标签的被选中\r\n        //TODO 加个状态 如果事件调用顺序变了 会出现问题\r\n      if (flag) {\r\n        this.setCheckedKeys(newArr);\r\n      }\r\n    },\r\n    //根据TagId 选中 全部Ztree中 已有的标签\r\n    setCheckedKeys(tagsList) {\r\n      let listId = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n      for (let i = 0; i < tagsList.length; i++) {\r\n        for (let k = 0; k < tagsLen; k++) {\r\n          if (tagsList[i].tagId == tags[k].tagId) {\r\n            listId.push(tags[k].id);\r\n          }\r\n        }\r\n      }\r\n      this.$refs.tree.setCheckedKeys(listId);\r\n    },\r\n    //修改回显时处理右边的数据\r\n    setSelectTags(tagsList){\r\n      let list = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n        for (let i = 0; i < tagsList.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (tagsList[i].tagId == tags[k].tagId) {\r\n              list.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        this.selectTags=list;\r\n    },\r\n    //处理过滤函数\r\n    filterNode(value, data) {\r\n        if (!value) return true;\r\n        return data.name.indexOf(value) !== -1;\r\n    },\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.tag-wrap {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  > li {\r\n    min-width: 200px;\r\n    background-color: #fafafa;\r\n    padding: 20px;\r\n  }\r\n  > li:nth-child(1) {\r\n    flex: 1;\r\n  }\r\n  > li:nth-child(2) {\r\n    width: 300px;\r\n    margin-left: 20px;\r\n  }\r\n}\r\n.ztree-wrap {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n}\r\n.whole-wrap {\r\n  padding: 15px 0 0;\r\n}\r\n.all-wrap {\r\n  padding: 10px 0 0;\r\n}\r\n.common-wrap {\r\n  border-bottom: 1px dashed #aaa;\r\n}\r\n.check-tabs {\r\n  display: flex;\r\n  .label {\r\n    display: inline-block;\r\n    width: 80px;\r\n    line-height: 24px;\r\n    text-align: right;\r\n  }\r\n  ul {\r\n    flex: 1;\r\n    li {\r\n      float: left;\r\n      height: 24px;\r\n      line-height: 24px;\r\n      padding: 0 10px;\r\n      margin: 0 8px 15px;\r\n      cursor: pointer;\r\n      font-size: 12px;\r\n    }\r\n    li.active {\r\n      background-color: rgba(25, 158, 216, 1);\r\n      color: #fff;\r\n      box-shadow: 0 0 5px rgba(34, 144, 232, 1);\r\n    }\r\n  }\r\n}\r\n.select-tabs {\r\n  display: flex;\r\n  .label {\r\n    display: inline-block;\r\n    width: 80px;\r\n    line-height: 24px;\r\n    text-align: right;\r\n  }\r\n  ul {\r\n    flex: 1;\r\n    li {\r\n      float: left;\r\n      height: 24px;\r\n      line-height: 24px;\r\n      margin: 0 3px 8px;\r\n      font-size: 14px;\r\n    }\r\n  }\r\n}\r\n.page-more {\r\n  border-top: 1px solid #e6e8ed;\r\n  margin-top: 10px;\r\n  div.btn {\r\n    width: 120px;\r\n    border: 1px solid #e6e8ed;\r\n    border-top: 1px solid #fff;\r\n    margin: -1px auto 0;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    line-height: 30px;\r\n  }\r\n}\r\n.mt-1 {\r\n  margin-top: 2px;\r\n}\r\n</style>\r\n"]}]}