{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\goods\\lib\\dragTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\goods\\lib\\dragTreeTable.vue","mtime":1578650543571},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport row from './row'\nimport column from './column'\nimport space from './space';\nimport func from './func';\n\ndocument.body.ondrop = function (event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport default {\n  name: \"dragTreeTable\",\n  components: {\n      row,\n      column,\n      space\n  },\n  computed: {\n    bodyStyle(){\n      return {\n        overflow: (this.fixed !== undefined && this.fixed !== false) ? 'auto': 'hidden',\n      }\n    }\n  },\n  props: {\n    isdraggable: {\n      type: Boolean,\n      default: true\n    },\n    data: Object,\n    onDrag: Function,\n    fixed: String | Boolean,\n    height: String | Number,\n    border: String,\n    onlySameLevelCanDrag: String,\n    hightRowChange: String,\n    resize: String,\n    beforeDragOver: Function\n  },\n  data() {\n    return {\n      dragX: 0,\n      dragY: 0,\n      dragId: '',\n      targetId: '',\n      whereInsert: '',\n      isDraing: false,\n      custom_field: {\n        id: 'id',\n        parent_id: 'parent_id',\n        order: 'order',\n        lists: 'lists',\n        open: 'open',\n        checked: 'checked',\n        highlight: 'highlight'\n      },\n      onCheckChange: null,\n      isContainChildren: false,\n      mouse: {\n        status: 0,\n        startX: 0,\n        curColWidth: 0,\n        curIndex: 0\n      }\n    }\n  },\n  methods: {\n    draging(e) {\n      this.isDraing = true;\n      if (e.pageX == this.dragX && e.pageY == this.dragY) return\n      this.dragX = e.pageX;\n      this.dragY = e.clientY;\n      this.filter(e.pageX, e.clientY)\n      if (e.clientY < 100) {\n        window.scrollTo(0, scrollY - 6)\n      } else if (e.clientY > (document.body.clientHeight - 160)) {\n        window.scrollTo(0, scrollY + 6)\n      }\n    },\n    drop(event) {\n      func.clearHoverStatus()\n      this.resetTreeData()\n      this.isDraing = false;\n      if (this.targetId !== undefined) {\n        if (this.hightRowChange !== undefined) {\n          this.$nextTick(()=> {\n            var rowEle = document.querySelector(\"[tree-id='\"+window.dragId+\"']\");\n            rowEle.style.backgroundColor = 'rgba(64,158,255,0.5)';\n            setTimeout(() => {\n              rowEle.style.backgroundColor = 'rgba(64,158,255,0)';\n            }, 2000);\n          })\n        }\n      }\n    },\n    // 查找匹配的行，处理拖拽样式\n    filter(x,y) {\n\n      var rows = document.querySelectorAll('.tree-row')\n      this.targetId = undefined;\n      const dragRect = window.dragParentNode.getBoundingClientRect();\n      const dragW = dragRect.left + window.dragParentNode.clientWidth;\n      const dragH = dragRect.top + window.dragParentNode.clientHeight;\n      if (x >= dragRect.left && x <= dragW && y >= dragRect.top && y <= dragH) {\n        // 当前正在拖拽原始块不允许插入\n        return\n      }\n      let hoverBlock = undefined;\n      let targetId = undefined;\n      let whereInsert = '';\n\n      for(let i=0; i < rows.length; i++) {\n        const row = rows[i];\n        const rect = row.getBoundingClientRect();\n        const rx = rect.left;\n        const ry = rect.top;\n        const rw = row.clientWidth;\n        const rh = row.clientHeight;\n        if (x > rx && x < (rx + rw) && y > ry && y < (ry + rh)) {\n          const diffY = y - ry\n          const pId = row.getAttribute('tree-p-id');\n          // 不允许改变层级结构，只能改变上下顺序逻辑\n          if ( this.onlySameLevelCanDrag !== undefined && pId !== window.dragPId) {\n            return;\n          }\n          targetId = row.getAttribute('tree-id');\n          hoverBlock = row.children[row.children.length - 1]\n          var rowHeight = row.offsetHeight\n          if (diffY/rowHeight > 3/4) {\n            whereInsert = 'bottom'\n          } else if (diffY/rowHeight > 1/4) {\n            // if ( this.onlySameLevelCanDrag !== undefined) {\n            if (1) {\n              // 不允许改变层级结构，只能改变上下顺序逻辑\n              return;\n            }\n            whereInsert = 'center'\n          } else {\n            whereInsert = 'top'\n          }\n          break;\n        }\n      }\n      if (targetId === undefined) {\n        // 匹配不到清空上一个状态\n        func.clearHoverStatus();\n        let whereInsert = '';\n        return;\n      }\n\n      let canDrag = true;\n      if (this.beforeDragOver) {\n        const curRow = this.getItemById(this.data.lists, window.dragId);\n        const targetRow = this.getItemById(this.data.lists, targetId);\n        canDrag = this.beforeDragOver(curRow, targetRow, whereInsert);\n      }\n      if (canDrag == false) return;\n      hoverBlock.style.display = 'block'\n      var rowHeight = row.offsetHeight\n      if (whereInsert == 'bottom') {\n        if (hoverBlock.children[2].style.opacity !== '0.5') {\n          func.clearHoverStatus()\n          hoverBlock.children[2].style.opacity = 0.5\n        }\n      } else if (whereInsert == 'center') {\n        if (hoverBlock.children[1].style.opacity !== '0.5') {\n          func.clearHoverStatus()\n          hoverBlock.children[1].style.opacity = 0.5\n        }\n      } else {\n        if (hoverBlock.children[0].style.opacity !== '0.5') {\n          func.clearHoverStatus()\n          hoverBlock.children[0].style.opacity = 0.5\n        }\n      }\n\n\n      this.targetId = targetId;\n      this.whereInsert = whereInsert;\n    },\n    resetTreeData() {\n      // return;\n      if (this.targetId === undefined) return\n      const listKey = this.custom_field.lists\n      const parentIdKey = this.custom_field.parent_id\n      const idKey = this.custom_field.id\n      const newList = [];\n      const curList = this.data.lists;\n      const _this = this;\n      let curDragItem = null;\n      let taggetItem = null;\n      function pushData(curList, needPushList) {\n        for( let i = 0; i < curList.length; i++) {\n          const item = curList[i]\n          var obj = func.deepClone(item);\n          obj[listKey] = []\n          if (_this.targetId == item[idKey]) {\n            curDragItem = _this.getItemById(_this.data.lists, window.dragId);\n            taggetItem =  _this.getItemById(_this.data.lists, _this.targetId);\n            if (_this.whereInsert === 'top') {\n              curDragItem[parentIdKey] = item[parentIdKey]\n              needPushList.push(curDragItem)\n              needPushList.push(obj)\n            } else if (_this.whereInsert === 'center'){\n              curDragItem[parentIdKey] = item[idKey];\n              obj.open = true;\n              obj[listKey].push(curDragItem)\n              needPushList.push(obj)\n\n            } else {\n              curDragItem[parentIdKey] = item[parentIdKey]\n              needPushList.push(obj)\n              needPushList.push(curDragItem)\n            }\n          } else {\n            if (window.dragId != item[idKey]){\n              needPushList.push(obj)\n            }\n          }\n          if (item[listKey] && item[listKey].length) {\n            pushData(item[listKey], obj[listKey])\n          }\n        }\n      }\n      pushData(curList, newList)\n      this.resetOrder(newList)\n      if(curDragItem.parentName != taggetItem.parentName) return;\n      var sortVO = [];\n      newList.forEach((item, index) => {\n        sortVO.push({\n          id:item.id,\n          sort:index + 1\n        })\n      });\n      // 排列顺序\n      this.request(\n        this.api.scb.categories_sort,\n        {\n          sortVO\n        },\n        true\n      ).then(res => {\n        this.warn('操作成功！');\n        // 操作dom\n        this.onDrag(newList, curDragItem, taggetItem, _this.whereInsert);\n      });\n    },\n    /**\n     * 提示\n     * @param { String } message 提示文案\n     * @param { String } type 提示类型\n     */\n    warn(message, type) {\n      this.$message({\n        message: message,\n        type: type || \"success\"\n      });\n    },\n    // 重置所有数据的顺序order\n    resetOrder(list) {\n      const listKey = this.custom_field.lists;\n      for (var i = 0; i< list.length; i++) {\n          list[i][this.custom_field.order] = i;\n          if (list[i][listKey] && list[i][listKey].length) {\n              this.resetOrder(list[i][listKey])\n          }\n      }\n    },\n    // 根据id获取当前行\n    getItemById(lists, id) {\n      var curItem = null\n      const listKey = this.custom_field.lists\n      const idKey = this.custom_field.id\n      function getchild(curList) {\n        for( let i = 0; i < curList.length; i++) {\n          var item = curList[i]\n          if (item[idKey] == id) {\n            curItem = JSON.parse(JSON.stringify(item))\n            break\n          } else if (item[listKey] && item[listKey].length) {\n            getchild(item[listKey])\n          }\n        }\n      }\n      getchild(lists)\n      return curItem;\n    },\n    // 对外暴漏\n    DelById(id) {\n      const listKey = this.custom_field.lists\n      const orderKey = this.custom_field.order\n      const idKey = this.custom_field.id\n      const newList = [];\n      const curList = this.data.lists;\n      function pushData(curList, needPushList) {\n        let order = 0;\n        for( let i = 0; i < curList.length; i++) {\n          const item = curList[i];\n          if (item[idKey] != id) {\n            var obj = func.deepClone(item);\n            obj[orderKey] = order;\n            obj[listKey] = [];\n            needPushList.push(obj);\n            order++;\n            if (item[listKey] && item[listKey].length) {\n              pushData(item[listKey], obj[listKey])\n            }\n          }\n        }\n      }\n      pushData(curList, newList)\n      return newList;\n    },\n    // 递归设置属性,只允许设置组件内置属性\n    deepSetAttr(key, val, list, ids) {\n      const listKey = this.custom_field.lists;\n      for (var i = 0; i< list.length; i++) {\n          if (ids !== undefined) {\n            if (ids.includes(list[i][this.custom_field['id']])) {\n              list[i][this.custom_field[key]] = val;\n            }\n          } else {\n            list[i][this.custom_field[key]] = val;\n          }\n          if (list[i][listKey] && list[i][listKey].length) {\n              this.deepSetAttr(key, val, list[i][listKey], ids)\n          }\n      }\n    },\n    ZipAll(id, deep=true) {\n      let list = func.deepClone(this.data.lists);\n      this.deepSetAttr('open', false, list);\n      this.data.lists = list;\n    },\n    OpenAll(id, deep=true) {\n      let list = func.deepClone(this.data.lists);\n      this.deepSetAttr('open', true, list);\n      this.data.lists = list;\n    },\n    GetLevelById(id) {\n      var row = this.$refs.table.querySelector('[tree-id=\"'+id+'\"]');\n      var level = row.getAttribute('data-level') * 1;\n      return level\n    },\n    HighlightRow(id, isHighlight=true, deep=false) {\n      let list = func.deepClone(this.data.lists);\n      let ids = [id];\n      if (deep == true){\n        ids = ids.concat(this.GetChildIds(id, true));\n      }\n      this.deepSetAttr('highlight', isHighlight, list, ids);\n      this.data.lists = list\n    },\n    GetChildIds(id, deep=true) {\n      let ids = []\n      const _this = this;\n      function getChilds(list, id) {\n        const listKey = _this.custom_field.lists;\n        for (var i = 0; i< list.length; i++) {\n          let currentPid = '';\n          let pid = list[i][_this.custom_field['parent_id']];\n          if (id == pid) {\n            currentPid = list[i][_this.custom_field['id']]\n            ids.push(currentPid)\n          } else {\n            currentPid = id\n          }\n          if (deep == true || id == currentPid) {\n            if (list[i][listKey] && list[i][listKey].length) {\n              getChilds(list[i][listKey], currentPid)\n            }\n          }\n        }\n      }\n      getChilds(this.data.lists, id);\n      return ids\n    },\n    // 全选按钮事件\n    onCheckAll(evt, func) {\n      this.setAllCheckData(this.data.lists, !!evt.target.checked);\n      const checkedList = this.getCheckedList(this.data.lists)\n      func && func(checkedList)\n    },\n    // 单个CheckBox勾选触发\n    onSingleCheckChange() {\n      const checkedList = this.getCheckedList(this.data.lists)\n      this.onCheckChange && this.onCheckChange(checkedList)\n    },\n    // 根据flag批量处理数据\n    setAllCheckData (curList, flag) {\n      const listKey = this.custom_field.lists;\n      for( let i = 0; i < curList.length; i++) {\n        var item = curList[i];\n        this.$set(item, 'checked', flag);\n        if (item[listKey] && item[listKey].length) {\n          this.setAllCheckData(item[listKey], flag);\n        }\n      }\n    },\n    // 获取所有选中的行\n    getCheckedList(lists) {\n      const listKey = this.custom_field.lists;\n      var checkedList = [];\n      const deepList = func.deepClone(lists)\n      function getchild(curList) {\n        for( let i = 0; i < curList.length; i++) {\n          var item = curList[i]\n          if (item.checked && item.isShowCheckbox != false) {\n            checkedList.push(item)\n          }\n          if (item[listKey] && item[listKey].length) {\n            getchild(item[listKey])\n          }\n        }\n      }\n      getchild(deepList)\n      return checkedList;\n    },\n    mousedown(curIndex, e){\n      const startX = e.target.getBoundingClientRect().x;\n      const curColWidth = e.target.parentElement.offsetWidth;\n      this.mouse = {\n        status: 1,\n        startX,\n        curIndex,\n        curColWidth\n      }\n    }\n  },\n  mounted() {\n    if(this.data.custom_field) {\n      this.custom_field = Object.assign({}, this.custom_field, this.data.custom_field)\n    }\n    setTimeout(() => {\n      this.data.columns.map((item) => {\n        if(item.type == 'checkbox') {\n          this.onCheckChange = item.onChange;\n          this.isContainChildren = item.isContainChildren;\n        }\n      })\n    }, 100);\n    window.addEventListener('mouseup', e => {\n      if (this.mouse.status) {\n        const curX = e.clientX;\n        var line = document.querySelector('.drag-line');\n        line.style.left = '-10000px';\n        this.mouse.status = 0;\n        const curWidth = this.mouse.curColWidth;\n        const subWidth = curX - this.mouse.startX;\n        const lastWidth = curWidth + subWidth;\n        const cols = document.querySelectorAll('.colIndex' + this.mouse.curIndex);\n        for (let index = 0; index < cols.length; index++) {\n          const element = cols[index];\n          element.style.width = lastWidth + 'px';\n        }\n        // 更新数据源\n        this.data.columns[this.mouse.curIndex].width = lastWidth;\n      }\n    });\n    window.addEventListener('mousemove', e => {\n      if (this.mouse.status) {\n        const endX = e.clientX;\n        const tableLeft = document.querySelector('.drag-tree-table').getBoundingClientRect().left;\n        var line = document.querySelector('.drag-line');\n        line.style.left = endX - tableLeft + 'px';\n      }\n    });\n  }\n}\n",{"version":3,"sources":["dragTreeTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dragTreeTable.vue","sourceRoot":"src/views/scb/goods/lib","sourcesContent":["<template>\n    <div class=\"drag-tree-table\" ref=\"table\" v-bind:class=\"{border:border !== undefined}\">\n        <div class=\"drag-tree-table-header\">\n          <column\n            v-for=\"(item, index) in data.columns\"\n            :width=\"item.width\"\n            :flex=\"item.flex\"\n            :border=\"border === undefined ? resize : border\"\n            v-bind:class=\"['align-' + item.titleAlign, 'colIndex' + index]\"\n            :key=\"index\" >\n            <input\n              v-if=\"item.type == 'checkbox'\"\n              class=\"checkbox\"\n              type=\"checkbox\"\n              @click=\"onCheckAll($event, item.onChange)\">\n            <span v-else v-html=\"item.title\">\n            </span>\n            <div class=\"resize-line\" @mousedown=\"mousedown(index, $event)\" v-show=\"resize!== undefined\">\n\n            </div>\n          </column>\n        </div>\n        <div class=\"drag-tree-table-body\"\n          v-bind:style=\"bodyStyle\"\n          @dragover=\"draging\"\n          @dragend=\"drop\"\n          :class=\"isDraing ? 'is-draging' : '' \">\n          <row depth=\"0\" :columns=\"data.columns\" :isdraggable=\"isdraggable\"\n            :model=\"item\"\n            v-for=\"(item, index) in data.lists\"\n            :custom_field=\"custom_field\"\n            :onCheck=\"onSingleCheckChange\"\n            :border=\"border === undefined ? resize : border\"\n            :isContainChildren=\"isContainChildren\"\n            :key=\"index\">\n        </row>\n        </div>\n        <div class=\"drag-line\">\n        </div>\n    </div>\n</template>\n\n<script>\n  import row from './row'\n  import column from './column'\n  import space from './space';\n  import func from './func';\n\n  document.body.ondrop = function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  export default {\n    name: \"dragTreeTable\",\n    components: {\n        row,\n        column,\n        space\n    },\n    computed: {\n      bodyStyle(){\n        return {\n          overflow: (this.fixed !== undefined && this.fixed !== false) ? 'auto': 'hidden',\n        }\n      }\n    },\n    props: {\n      isdraggable: {\n        type: Boolean,\n        default: true\n      },\n      data: Object,\n      onDrag: Function,\n      fixed: String | Boolean,\n      height: String | Number,\n      border: String,\n      onlySameLevelCanDrag: String,\n      hightRowChange: String,\n      resize: String,\n      beforeDragOver: Function\n    },\n    data() {\n      return {\n        dragX: 0,\n        dragY: 0,\n        dragId: '',\n        targetId: '',\n        whereInsert: '',\n        isDraing: false,\n        custom_field: {\n          id: 'id',\n          parent_id: 'parent_id',\n          order: 'order',\n          lists: 'lists',\n          open: 'open',\n          checked: 'checked',\n          highlight: 'highlight'\n        },\n        onCheckChange: null,\n        isContainChildren: false,\n        mouse: {\n          status: 0,\n          startX: 0,\n          curColWidth: 0,\n          curIndex: 0\n        }\n      }\n    },\n    methods: {\n      draging(e) {\n        this.isDraing = true;\n        if (e.pageX == this.dragX && e.pageY == this.dragY) return\n        this.dragX = e.pageX;\n        this.dragY = e.clientY;\n        this.filter(e.pageX, e.clientY)\n        if (e.clientY < 100) {\n          window.scrollTo(0, scrollY - 6)\n        } else if (e.clientY > (document.body.clientHeight - 160)) {\n          window.scrollTo(0, scrollY + 6)\n        }\n      },\n      drop(event) {\n        func.clearHoverStatus()\n        this.resetTreeData()\n        this.isDraing = false;\n        if (this.targetId !== undefined) {\n          if (this.hightRowChange !== undefined) {\n            this.$nextTick(()=> {\n              var rowEle = document.querySelector(\"[tree-id='\"+window.dragId+\"']\");\n              rowEle.style.backgroundColor = 'rgba(64,158,255,0.5)';\n              setTimeout(() => {\n                rowEle.style.backgroundColor = 'rgba(64,158,255,0)';\n              }, 2000);\n            })\n          }\n        }\n      },\n      // 查找匹配的行，处理拖拽样式\n      filter(x,y) {\n\n        var rows = document.querySelectorAll('.tree-row')\n        this.targetId = undefined;\n        const dragRect = window.dragParentNode.getBoundingClientRect();\n        const dragW = dragRect.left + window.dragParentNode.clientWidth;\n        const dragH = dragRect.top + window.dragParentNode.clientHeight;\n        if (x >= dragRect.left && x <= dragW && y >= dragRect.top && y <= dragH) {\n          // 当前正在拖拽原始块不允许插入\n          return\n        }\n        let hoverBlock = undefined;\n        let targetId = undefined;\n        let whereInsert = '';\n\n        for(let i=0; i < rows.length; i++) {\n          const row = rows[i];\n          const rect = row.getBoundingClientRect();\n          const rx = rect.left;\n          const ry = rect.top;\n          const rw = row.clientWidth;\n          const rh = row.clientHeight;\n          if (x > rx && x < (rx + rw) && y > ry && y < (ry + rh)) {\n            const diffY = y - ry\n            const pId = row.getAttribute('tree-p-id');\n            // 不允许改变层级结构，只能改变上下顺序逻辑\n            if ( this.onlySameLevelCanDrag !== undefined && pId !== window.dragPId) {\n              return;\n            }\n            targetId = row.getAttribute('tree-id');\n            hoverBlock = row.children[row.children.length - 1]\n            var rowHeight = row.offsetHeight\n            if (diffY/rowHeight > 3/4) {\n              whereInsert = 'bottom'\n            } else if (diffY/rowHeight > 1/4) {\n              // if ( this.onlySameLevelCanDrag !== undefined) {\n              if (1) {\n                // 不允许改变层级结构，只能改变上下顺序逻辑\n                return;\n              }\n              whereInsert = 'center'\n            } else {\n              whereInsert = 'top'\n            }\n            break;\n          }\n        }\n        if (targetId === undefined) {\n          // 匹配不到清空上一个状态\n          func.clearHoverStatus();\n          let whereInsert = '';\n          return;\n        }\n\n        let canDrag = true;\n        if (this.beforeDragOver) {\n          const curRow = this.getItemById(this.data.lists, window.dragId);\n          const targetRow = this.getItemById(this.data.lists, targetId);\n          canDrag = this.beforeDragOver(curRow, targetRow, whereInsert);\n        }\n        if (canDrag == false) return;\n        hoverBlock.style.display = 'block'\n        var rowHeight = row.offsetHeight\n        if (whereInsert == 'bottom') {\n          if (hoverBlock.children[2].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[2].style.opacity = 0.5\n          }\n        } else if (whereInsert == 'center') {\n          if (hoverBlock.children[1].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[1].style.opacity = 0.5\n          }\n        } else {\n          if (hoverBlock.children[0].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[0].style.opacity = 0.5\n          }\n        }\n\n\n        this.targetId = targetId;\n        this.whereInsert = whereInsert;\n      },\n      resetTreeData() {\n        // return;\n        if (this.targetId === undefined) return\n        const listKey = this.custom_field.lists\n        const parentIdKey = this.custom_field.parent_id\n        const idKey = this.custom_field.id\n        const newList = [];\n        const curList = this.data.lists;\n        const _this = this;\n        let curDragItem = null;\n        let taggetItem = null;\n        function pushData(curList, needPushList) {\n          for( let i = 0; i < curList.length; i++) {\n            const item = curList[i]\n            var obj = func.deepClone(item);\n            obj[listKey] = []\n            if (_this.targetId == item[idKey]) {\n              curDragItem = _this.getItemById(_this.data.lists, window.dragId);\n              taggetItem =  _this.getItemById(_this.data.lists, _this.targetId);\n              if (_this.whereInsert === 'top') {\n                curDragItem[parentIdKey] = item[parentIdKey]\n                needPushList.push(curDragItem)\n                needPushList.push(obj)\n              } else if (_this.whereInsert === 'center'){\n                curDragItem[parentIdKey] = item[idKey];\n                obj.open = true;\n                obj[listKey].push(curDragItem)\n                needPushList.push(obj)\n\n              } else {\n                curDragItem[parentIdKey] = item[parentIdKey]\n                needPushList.push(obj)\n                needPushList.push(curDragItem)\n              }\n            } else {\n              if (window.dragId != item[idKey]){\n                needPushList.push(obj)\n              }\n            }\n            if (item[listKey] && item[listKey].length) {\n              pushData(item[listKey], obj[listKey])\n            }\n          }\n        }\n        pushData(curList, newList)\n        this.resetOrder(newList)\n        if(curDragItem.parentName != taggetItem.parentName) return;\n        var sortVO = [];\n        newList.forEach((item, index) => {\n          sortVO.push({\n            id:item.id,\n            sort:index + 1\n          })\n        });\n        // 排列顺序\n        this.request(\n          this.api.scb.categories_sort,\n          {\n            sortVO\n          },\n          true\n        ).then(res => {\n          this.warn('操作成功！');\n          // 操作dom\n          this.onDrag(newList, curDragItem, taggetItem, _this.whereInsert);\n        });\n      },\n      /**\n       * 提示\n       * @param { String } message 提示文案\n       * @param { String } type 提示类型\n       */\n      warn(message, type) {\n        this.$message({\n          message: message,\n          type: type || \"success\"\n        });\n      },\n      // 重置所有数据的顺序order\n      resetOrder(list) {\n        const listKey = this.custom_field.lists;\n        for (var i = 0; i< list.length; i++) {\n            list[i][this.custom_field.order] = i;\n            if (list[i][listKey] && list[i][listKey].length) {\n                this.resetOrder(list[i][listKey])\n            }\n        }\n      },\n      // 根据id获取当前行\n      getItemById(lists, id) {\n        var curItem = null\n        const listKey = this.custom_field.lists\n        const idKey = this.custom_field.id\n        function getchild(curList) {\n          for( let i = 0; i < curList.length; i++) {\n            var item = curList[i]\n            if (item[idKey] == id) {\n              curItem = JSON.parse(JSON.stringify(item))\n              break\n            } else if (item[listKey] && item[listKey].length) {\n              getchild(item[listKey])\n            }\n          }\n        }\n        getchild(lists)\n        return curItem;\n      },\n      // 对外暴漏\n      DelById(id) {\n        const listKey = this.custom_field.lists\n        const orderKey = this.custom_field.order\n        const idKey = this.custom_field.id\n        const newList = [];\n        const curList = this.data.lists;\n        function pushData(curList, needPushList) {\n          let order = 0;\n          for( let i = 0; i < curList.length; i++) {\n            const item = curList[i];\n            if (item[idKey] != id) {\n              var obj = func.deepClone(item);\n              obj[orderKey] = order;\n              obj[listKey] = [];\n              needPushList.push(obj);\n              order++;\n              if (item[listKey] && item[listKey].length) {\n                pushData(item[listKey], obj[listKey])\n              }\n            }\n          }\n        }\n        pushData(curList, newList)\n        return newList;\n      },\n      // 递归设置属性,只允许设置组件内置属性\n      deepSetAttr(key, val, list, ids) {\n        const listKey = this.custom_field.lists;\n        for (var i = 0; i< list.length; i++) {\n            if (ids !== undefined) {\n              if (ids.includes(list[i][this.custom_field['id']])) {\n                list[i][this.custom_field[key]] = val;\n              }\n            } else {\n              list[i][this.custom_field[key]] = val;\n            }\n            if (list[i][listKey] && list[i][listKey].length) {\n                this.deepSetAttr(key, val, list[i][listKey], ids)\n            }\n        }\n      },\n      ZipAll(id, deep=true) {\n        let list = func.deepClone(this.data.lists);\n        this.deepSetAttr('open', false, list);\n        this.data.lists = list;\n      },\n      OpenAll(id, deep=true) {\n        let list = func.deepClone(this.data.lists);\n        this.deepSetAttr('open', true, list);\n        this.data.lists = list;\n      },\n      GetLevelById(id) {\n        var row = this.$refs.table.querySelector('[tree-id=\"'+id+'\"]');\n        var level = row.getAttribute('data-level') * 1;\n        return level\n      },\n      HighlightRow(id, isHighlight=true, deep=false) {\n        let list = func.deepClone(this.data.lists);\n        let ids = [id];\n        if (deep == true){\n          ids = ids.concat(this.GetChildIds(id, true));\n        }\n        this.deepSetAttr('highlight', isHighlight, list, ids);\n        this.data.lists = list\n      },\n      GetChildIds(id, deep=true) {\n        let ids = []\n        const _this = this;\n        function getChilds(list, id) {\n          const listKey = _this.custom_field.lists;\n          for (var i = 0; i< list.length; i++) {\n            let currentPid = '';\n            let pid = list[i][_this.custom_field['parent_id']];\n            if (id == pid) {\n              currentPid = list[i][_this.custom_field['id']]\n              ids.push(currentPid)\n            } else {\n              currentPid = id\n            }\n            if (deep == true || id == currentPid) {\n              if (list[i][listKey] && list[i][listKey].length) {\n                getChilds(list[i][listKey], currentPid)\n              }\n            }\n          }\n        }\n        getChilds(this.data.lists, id);\n        return ids\n      },\n      // 全选按钮事件\n      onCheckAll(evt, func) {\n        this.setAllCheckData(this.data.lists, !!evt.target.checked);\n        const checkedList = this.getCheckedList(this.data.lists)\n        func && func(checkedList)\n      },\n      // 单个CheckBox勾选触发\n      onSingleCheckChange() {\n        const checkedList = this.getCheckedList(this.data.lists)\n        this.onCheckChange && this.onCheckChange(checkedList)\n      },\n      // 根据flag批量处理数据\n      setAllCheckData (curList, flag) {\n        const listKey = this.custom_field.lists;\n        for( let i = 0; i < curList.length; i++) {\n          var item = curList[i];\n          this.$set(item, 'checked', flag);\n          if (item[listKey] && item[listKey].length) {\n            this.setAllCheckData(item[listKey], flag);\n          }\n        }\n      },\n      // 获取所有选中的行\n      getCheckedList(lists) {\n        const listKey = this.custom_field.lists;\n        var checkedList = [];\n        const deepList = func.deepClone(lists)\n        function getchild(curList) {\n          for( let i = 0; i < curList.length; i++) {\n            var item = curList[i]\n            if (item.checked && item.isShowCheckbox != false) {\n              checkedList.push(item)\n            }\n            if (item[listKey] && item[listKey].length) {\n              getchild(item[listKey])\n            }\n          }\n        }\n        getchild(deepList)\n        return checkedList;\n      },\n      mousedown(curIndex, e){\n        const startX = e.target.getBoundingClientRect().x;\n        const curColWidth = e.target.parentElement.offsetWidth;\n        this.mouse = {\n          status: 1,\n          startX,\n          curIndex,\n          curColWidth\n        }\n      }\n    },\n    mounted() {\n      if(this.data.custom_field) {\n        this.custom_field = Object.assign({}, this.custom_field, this.data.custom_field)\n      }\n      setTimeout(() => {\n        this.data.columns.map((item) => {\n          if(item.type == 'checkbox') {\n            this.onCheckChange = item.onChange;\n            this.isContainChildren = item.isContainChildren;\n          }\n        })\n      }, 100);\n      window.addEventListener('mouseup', e => {\n        if (this.mouse.status) {\n          const curX = e.clientX;\n          var line = document.querySelector('.drag-line');\n          line.style.left = '-10000px';\n          this.mouse.status = 0;\n          const curWidth = this.mouse.curColWidth;\n          const subWidth = curX - this.mouse.startX;\n          const lastWidth = curWidth + subWidth;\n          const cols = document.querySelectorAll('.colIndex' + this.mouse.curIndex);\n          for (let index = 0; index < cols.length; index++) {\n            const element = cols[index];\n            element.style.width = lastWidth + 'px';\n          }\n          // 更新数据源\n          this.data.columns[this.mouse.curIndex].width = lastWidth;\n        }\n      });\n      window.addEventListener('mousemove', e => {\n        if (this.mouse.status) {\n          const endX = e.clientX;\n          const tableLeft = document.querySelector('.drag-tree-table').getBoundingClientRect().left;\n          var line = document.querySelector('.drag-line');\n          line.style.left = endX - tableLeft + 'px';\n        }\n      });\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .drag-tree-table{\n    position: relative;\n    margin: 20px 0;\n    color: #606266;\n    font-size: 12px;\n    &.border{\n      border: 1px solid #eee;\n      border-right: none;\n    }\n  }\n  .drag-line{\n    position:absolute;\n    top: 0;\n    left: -1000px;\n    height: 100%;\n    width: 1px;\n    background: #ccc;\n  }\n  .drag-tree-table-header{\n    display: flex;\n    // padding: 15px 10px;\n    background: #f5f7fa;\n    height: 66px;\n    line-height: 36px;\n    box-sizing: border-box;\n    font-weight: 600;\n    .align-left{\n        text-align: left;\n    }\n    .align-right{\n        text-align: right;\n    }\n    .align-center{\n        text-align: center;\n    }\n    .tree-column{\n      user-select: none;\n    }\n  }\n  .tree-icon-hidden{\n    visibility: hidden;\n  }\n  .is-draging .tree-row:hover{\n    background: transparent !important;\n  }\n  .tree-row{\n    background-color: rgba(64,158,255,0);\n    transition: background-color 0.5s linear;\n  }\n</style>\n"]}]}