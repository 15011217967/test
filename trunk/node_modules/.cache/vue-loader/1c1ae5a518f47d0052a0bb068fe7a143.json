{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\inventory\\store_inventory_list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\inventory\\store_inventory_list.vue","mtime":1574160264533},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios'\r\nimport {getToken} from '@/utils/auth'\r\nimport codeSet from '@/components/codeSet'\r\nimport treeDept from '@/components/treeDept'\r\nimport { filter } from 'minimatch';\r\nimport { get } from 'http';\r\n\r\nlet token=getToken()\r\n\r\nexport default {\r\n   name:'store_inventory_list',\r\n   data() {\r\n      return{\r\n         // 选中的表格数据\r\n         checkedTableData: [],\r\n         // data数据\r\n         getList_data:{},\r\n         // 去掉重复后的品牌收据\r\n         brandOptions:[],\r\n         // 获取门店信列表\r\n         getStoreList_data:[],\r\n         // 获取品牌列表\r\n         storeStock_listBrand_data:[],\r\n         priority:{\r\n            \"01\":\"高\",\r\n            \"02\":\"中\",\r\n            \"03\":\"低\",\r\n         },\r\n         formInline:{\r\n            user: '',\r\n            region: ''\r\n         },\r\n         // 选择商品品类相关参数\r\n         classData: [],\r\n         classList: [],\r\n         cateArr: [],\r\n         props: {\r\n            value: \"id\",\r\n            label: \"name\",\r\n            children: \"children\"\r\n         },\r\n         // 选择商品颜色相关参数\r\n         colorProps: {\r\n            value: \"code\",\r\n            label: \"name\",\r\n            children: \"children\",\r\n            checkStrictly: true\r\n         },\r\n         colorOptions: [],\r\n         colorList:[],\r\n         // 检索条件\r\n         filtersData: {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         },\r\n         // 商品颜色系列（子类）\r\n         _colorSeries:null,\r\n         // 商品颜色（子类）\r\n         _color:null,\r\n         // 门店列表请求参数\r\n         filtersDataStore:{\r\n            pageIndex: '',// 当前页码\r\n            pageSize: '',// 每页数量\r\n            name:'',// 门店名称\r\n            organizationId:'',// 隶属机构\r\n            businessStatus:'',// 营业状态\r\n            type:'',// 门店类型\r\n            createBegin:'',// 创建时间开始\r\n            createEnd:''// 创建时间结束\r\n         },\r\n         value: '',\r\n         storageValArr:[],\r\n         // 指派单选框\r\n         radio: '1',\r\n         // 指派\r\n         gridData: [],\r\n        dialogTableVisible: false,\r\n        dialogFormVisible: false,\r\n        form: {\r\n          name: '',\r\n          region: '',\r\n          date1: '',\r\n          date2: '',\r\n          delivery: false,\r\n          type: [],\r\n          resource: '',\r\n          desc: ''\r\n        },\r\n        formLabelWidth: '120px'\r\n      }\r\n   },\r\n   created() {\r\n      const that = this;\r\n\r\n      this.getList();\r\n      this.getStoreList();\r\n      this.getBrandOptions();\r\n      this.storeStock_listBrand();\r\n      this.getClassData();\r\n      this.getColorOptions();\r\n   },\r\n   activated() {\r\n      this.getList();\r\n   },\r\n   methods: {\r\n      /**\r\n       * 获取子级\r\n       */\r\n      childrenIsShow(row, index) {\r\n         console.log(row)\r\n         var productId = row.productCode; //当前数据ID\r\n         let _type = row.isType; //状态 1 关闭 0 打开\r\n         if (_type == \"1\") {\r\n         //当前为关闭状态 需请求接口获取子元素\r\n         row.isType = 0;\r\n         this.getChildData(row, index);\r\n         } else {\r\n         //当前为打开状态 需删除子元素\r\n         row.isType = 1;\r\n         this.removeChildData(row);\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表子类\r\n       */\r\n      getChildData(row, index) {\r\n         let that = this;\r\n         let _index = index;\r\n         if (!row._chilren) {\r\n            this.request(\r\n               that.api.store.storeProduct_listByDeptId,\r\n               {\r\n               \"filter\": \"\",\r\n               \"storeId\": row.storeId,\r\n               productCode:row.productCode,\r\n               \"brandCode\":row.brandCode,\r\n               brandName:row.brandName,\r\n               // 商品品类\r\n               productType:row.productType, \r\n               // 商品颜色系列\r\n               colorSeries:this._colorSeries,\r\n               // 商品颜色\r\n               color:this._color,\r\n               orderBy:'goodsCode'\r\n               }\r\n            ).then(res => {\r\n               let _data = res.data;\r\n               let _dataLen = _data.length;\r\n               for (let i = 0; i < _dataLen; i++) {\r\n                  _data[i].subCode = _data[i].code;\r\n                  _data[i].code = null;\r\n               }\r\n               row._chilren = _data;\r\n               //根据下标插入进去 获取ID 在数组中的下标\r\n               this.getList_data.dataList.data.splice(_index + 1, 0, ..._data);\r\n               //获取子集id存入 元素属性\r\n               let arr = [];\r\n               for (let { id } of _data) {\r\n                  arr.push(id);\r\n               }\r\n               row._cid = arr.join();\r\n            });\r\n         } else {\r\n         this.getList_data.dataList.data.splice(_index + 1, 0, ...row._chilren);\r\n         }\r\n      },\r\n      //删除子集\r\n      removeChildData(row) {\r\n         let cid = row._cid;\r\n         let cidArr = cid.split(\",\");\r\n         let _table = this.getList_data.dataList.data,\r\n         tableLen = _table.length;\r\n         for (let i = 0; i < cidArr.length; i++) {\r\n         for (let j = 0; j < this.getList_data.dataList.data.length; j++) {\r\n            if (cidArr[i] == this.getList_data.dataList.data[j].id) {\r\n               this.getList_data.dataList.data.splice(j, 1);\r\n            }\r\n         }\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表\r\n       */\r\n      getList() {\r\n         const that = this;\r\n\r\n         if(this.filtersData.filter) {\r\n            this.filtersData.orderBy = 'quantity';\r\n         }else{\r\n            this.filtersData.orderBy = '';\r\n         };\r\n         this.request(\r\n         that.api.store.storeProduct_listProduct,\r\n         this.filtersData\r\n         ).then(res => {\r\n            res.dataList.data.forEach((item, index) => {\r\n               item.isShow = true;\r\n               item.isType = 1;\r\n               item._cid = \"\";\r\n            })\r\n            that.getList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 选择品类\r\n       */\r\n      cascaderGet(e) {\r\n         let cateId = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.classList.find(item => item.id == cateId);\r\n         this.filtersData.productType = obj.fullCateName;\r\n      },\r\n      /**\r\n       * 获取分类\r\n       */\r\n      getClassData() {\r\n         //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\r\n         this.$common.getClassSelect(this, 1).then(res => {\r\n            this.classData = res.ztree;\r\n            this.classList = res.list;\r\n         });\r\n      },\r\n      /**\r\n       * 选择颜色\r\n       */\r\n      colorCodeGet(e) {\r\n         let color  = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.colorList.find((item)=>(item.code == color));\r\n         if(obj.parentCode ===null){\r\n            this.filtersData.colorSeries = obj.name;\r\n            this.filtersData.color = null;\r\n         }else{\r\n            this.filtersData.colorSeries = null;\r\n            this.filtersData.color =obj.name;\r\n         }\r\n      },\r\n      /**\r\n       * 获取颜色\r\n       */\r\n      getColorOptions() {\r\n      // console.log(\"从computed中获取颜色\");\r\n      let codeSet = this.$store.getters.codeData;\r\n      let treeList = [];\r\n      let codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\r\n      function toTree(data, parentCode) {\r\n         var tree = [];\r\n         var temp;\r\n         for (var i = 0; i < data.length; i++) {\r\n            if (data[i].parentCode == parentCode) {\r\n            var obj = data[i];\r\n            temp = toTree(data, data[i].code);\r\n            if (temp.length > 0) {\r\n               obj.children = temp;\r\n            }\r\n            tree.push(obj);\r\n            }\r\n         }\r\n         return tree;\r\n      }\r\n      treeList = toTree(codeList, null);\r\n      this.colorList = codeList;\r\n      this.colorOptions = treeList;\r\n      },\r\n      /**\r\n       * 获取品牌\r\n       */\r\n      getBrandOptions() {\r\n         let that = this;\r\n         this.request(\r\n         this.api.product.productBrand_list,\r\n         {},\r\n         true\r\n         ).then(res => {\r\n            that.brandOptions = res.data;\r\n         });\r\n      },\r\n      //导出\r\n      exportExcel() {\r\n     \r\n        require.ensure([], () => {\r\n          let { export_json_to_excel, export_table_to_excel } = require(\"@/vendor/Export2Excel\");\r\n          let tHeader = [\r\n            \"所属门店\",\r\n            \"隶属机构\",\r\n            \"商品款号\",\r\n            \"商品货号\",\r\n            \"库存数量\",\r\n            \"商品图片\",\r\n            \"品牌\",\r\n            \"吊牌价\",\r\n            \"颜色\",\r\n            \"尺码\",\r\n          ];\r\n          // 上面设置Excel的表格第一行的标题\r\n          let filterVal = [\r\n            \"storeName\",\r\n            \"relationDepNmae\",\r\n            \"productCode\",\r\n            \"goodsCode\",\r\n            \"quantity\",\r\n            \"image\",\r\n            \"brandName\",\r\n            \"price\",\r\n            \"color\",\r\n            \"size\"\r\n          ];\r\n          // 上面的index、nickName、name是tableData里对象的属性\r\n          let list = this.getList_data.dataList.data; //把data里的tableData存到list\r\n          let data = this.formatJson(filterVal, list);\r\n          export_json_to_excel(tHeader, data, \"商品库存汇总列表\");\r\n        });\r\n      },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => v[j]));\r\n      },\r\n      tableCheckChange(val){\r\n        this.checkedTableData = val;\r\n      },\r\n      /**\r\n       *\r\n       */\r\n      fnDialogTableVisible() {\r\n         console.log(this.ls)\r\n         this.workOrderPoolAssign();\r\n         this.dialogTableVisible = false;\r\n      },\r\n      /**\r\n       * 查看\r\n       */\r\n      timeRedact(id) {\r\n         this.href('store/inventory/sendBck_order_detail',{\r\n            id\r\n         })\r\n      },\r\n      // 点击页数\r\n      handleCurrentChange(pageIndex){\r\n         this.filtersData.pageIndex = pageIndex;\r\n         this.getList();\r\n      },\r\n      // 点击每页多少条数\r\n      handleSizeChange(pageSize){\r\n         this.filtersData.pageSize = pageSize;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 查询门店列表\r\n       */\r\n      getStoreList() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeBasic_list,\r\n         this.filtersDataStore\r\n         ).then(res => {\r\n            that.getStoreList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 获取品牌列表\r\n       */\r\n      storeStock_listBrand() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeStock_listBrand\r\n         ).then(res => {\r\n            that.storeStock_listBrand_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 跳转工单详情\r\n       */\r\n      href(routeName, param) {\r\n         this.$router.push({\r\n            path: '/' + routeName,\r\n            query: param\r\n         })\r\n      },\r\n      /**\r\n       * 模糊搜索\r\n       */\r\n      handleSearch() {\r\n         this.filtersData.pageIndex = 1;\r\n         this._colorSeries = this.filtersData.colorSeries;\r\n         this._color = this.filtersData.color;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 搜索重置\r\n       */\r\n      handleResetFilters() {\r\n         \r\n         Object.assign(this.filtersData, {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         });\r\n         this.cateArr = [];\r\n         // 将商品颜色重置为空\r\n         this.$refs.goodsColor.$el.children[0].children[0].value = null;\r\n         this.$refs.goodsColor.checkedValue = [];\r\n      },\r\n   },\r\n   components:{\r\n      codeSet,\r\n      treeDept\r\n   }\r\n}\r\n",{"version":3,"sources":["store_inventory_list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"store_inventory_list.vue","sourceRoot":"src/views/store/inventory","sourcesContent":["<template>\r\n   <div>\r\n      <!-- 模糊搜索 -->\r\n      <div class=\"item-margin\">\r\n         <el-form\r\n            class=\"item-form\"\r\n            size=\"small\"\r\n            :inline=\"true\"\r\n            :model=\"filtersData\">\r\n            <el-form-item label=\"商品编码：\">\r\n               <el-input v-model=\"filtersData.filter\"  @keyup.enter.native=\"handleSearch\" clearable placeholder=\"请输入商品款号/货号\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品品牌：\">\r\n              <el-select v-model=\"filtersData.brandName\" clearable filterable>\r\n               <el-option\r\n                  v-for=\"item in brandOptions\"\r\n                  :key=\"item.id\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.name\"\r\n               ></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"门店名称：\">\r\n              <el-select v-model=\"filtersData.storeId\" clearable filterable>\r\n                 <el-option v-for=\"(item, index) in getStoreList_data.data\" :label=\"item.name\" :key=\"index\" :value=\"item.id\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"隶属机构：\">\r\n               <tree-dept\r\n                  type=\"0\"\r\n                  v-model=\"filtersData.relationDepId\"\r\n                  val-type=\"id\"\r\n                  :default-expand-all=\"true\"\r\n                  ref=\"organizationName\"\r\n                ></tree-dept>\r\n            </el-form-item>\r\n            <br/>\r\n            <!-- 商品品类 -->\r\n            <el-form-item prop=\"cateIdentifier\" clearable label=\"商品品类：\">\r\n               <el-cascader\r\n                  class=\"input-w\"\r\n                  :options=\"classData\"\r\n                  v-model=\"cateArr\"\r\n                  :value=\"cateArr\"\r\n                  @change=\"cascaderGet\"\r\n                  :show-all-levels=\"false\"\r\n                  :props=\"props\"\r\n                  change-on-select\r\n               ></el-cascader>\r\n            </el-form-item>\r\n            <!-- 商品颜色 -->\r\n            <el-form-item prop=\"colorCode\" label=\"商品颜色：\">\r\n               <el-cascader\r\n                  class=\"input-w\"\r\n                  :options=\"colorOptions\"\r\n                  @change=\"colorCodeGet\"\r\n                  :show-all-levels=\"false\"\r\n                  :props=\"colorProps\"\r\n                  change-on-select\r\n                  ref=\"goodsColor\"\r\n               ></el-cascader>\r\n            </el-form-item>\r\n            <!-- 搜索，重置 -->\r\n            <el-form-item>\r\n               <el-button @click=\"handleSearch\" type=\"primary\" plain size=\"small\">搜索</el-button>\r\n               <el-button @click=\"handleResetFilters\" size=\"small\">重置</el-button>\r\n            </el-form-item>\r\n         </el-form>\r\n      </div>\r\n      <!-- 模糊搜索 -->\r\n      <!-- 列表 -->\r\n      <div class=\"box\">\r\n         <el-button size=\"small\" type=\"primary\" @click=\"exportExcel\">导出</el-button>\r\n         <el-table\r\n            :data=\"getList_data.dataList.data\"\r\n            stripe\r\n            empty-text=\"暂无数据\"\r\n            header-align=\"center\"\r\n            header-row-class-name=\"item-table-header\"\r\n            :highlight-current-row=\"true\">\r\n            <el-table-column width=\"45\">\r\n               <template slot-scope=\"scope\">\r\n                  <i\r\n                     @click=\"childrenIsShow(scope.row, scope.$index )\"\r\n                     v-if=\"scope.row.isShow\"\r\n                     :class=\"scope.row.isType == 1 ?'el-icon-circle-plus-outline i-cursor' : 'el-icon-remove-outline i-cursor'\"\r\n                  ></i>\r\n               </template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品款号\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.productCode || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品货号\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.goodsCode || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"库存数量\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.quantity }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品图片\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\"><img :src=\"scope.row.image\" class=\"imageSize\" alt=\"\"></template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"品牌\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.brandName || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"品类\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.productType || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"颜色\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.color || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"尺码\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.size }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"吊牌价\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.price || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"所属门店\" min-width=\"100\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.storeName || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"隶属机构\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.relationDepNmae || '--' }}</template>\r\n            </el-table-column>\r\n         </el-table>\r\n         <div class=\"disFlex\">\r\n            <div class=\"info\">{{ getList_data.info }}</div>\r\n            <div class=\"pagination mt-10 mb-20\">\r\n               <!-- 分页 -->\r\n               <el-pagination\r\n                  class=\"mr-20\"\r\n                  @size-change=\"handleSizeChange\"\r\n                  @current-change=\"handleCurrentChange\"\r\n                  :current-page=\"filtersData.pageIndex\"\r\n                  :page-sizes=\"[10,20,30,40,50]\"\r\n                  :page-size=\"filtersData.pageSize\"\r\n                  layout=\"total, sizes, prev, pager, next, jumper\"\r\n                  :total=\"getList_data.dataList.totalCount\"\r\n               ></el-pagination>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <!-- 列表 -->\r\n   </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport {getToken} from '@/utils/auth'\r\nimport codeSet from '@/components/codeSet'\r\nimport treeDept from '@/components/treeDept'\r\nimport { filter } from 'minimatch';\r\nimport { get } from 'http';\r\n\r\nlet token=getToken()\r\n\r\nexport default {\r\n   name:'store_inventory_list',\r\n   data() {\r\n      return{\r\n         // 选中的表格数据\r\n         checkedTableData: [],\r\n         // data数据\r\n         getList_data:{},\r\n         // 去掉重复后的品牌收据\r\n         brandOptions:[],\r\n         // 获取门店信列表\r\n         getStoreList_data:[],\r\n         // 获取品牌列表\r\n         storeStock_listBrand_data:[],\r\n         priority:{\r\n            \"01\":\"高\",\r\n            \"02\":\"中\",\r\n            \"03\":\"低\",\r\n         },\r\n         formInline:{\r\n            user: '',\r\n            region: ''\r\n         },\r\n         // 选择商品品类相关参数\r\n         classData: [],\r\n         classList: [],\r\n         cateArr: [],\r\n         props: {\r\n            value: \"id\",\r\n            label: \"name\",\r\n            children: \"children\"\r\n         },\r\n         // 选择商品颜色相关参数\r\n         colorProps: {\r\n            value: \"code\",\r\n            label: \"name\",\r\n            children: \"children\",\r\n            checkStrictly: true\r\n         },\r\n         colorOptions: [],\r\n         colorList:[],\r\n         // 检索条件\r\n         filtersData: {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         },\r\n         // 商品颜色系列（子类）\r\n         _colorSeries:null,\r\n         // 商品颜色（子类）\r\n         _color:null,\r\n         // 门店列表请求参数\r\n         filtersDataStore:{\r\n            pageIndex: '',// 当前页码\r\n            pageSize: '',// 每页数量\r\n            name:'',// 门店名称\r\n            organizationId:'',// 隶属机构\r\n            businessStatus:'',// 营业状态\r\n            type:'',// 门店类型\r\n            createBegin:'',// 创建时间开始\r\n            createEnd:''// 创建时间结束\r\n         },\r\n         value: '',\r\n         storageValArr:[],\r\n         // 指派单选框\r\n         radio: '1',\r\n         // 指派\r\n         gridData: [],\r\n        dialogTableVisible: false,\r\n        dialogFormVisible: false,\r\n        form: {\r\n          name: '',\r\n          region: '',\r\n          date1: '',\r\n          date2: '',\r\n          delivery: false,\r\n          type: [],\r\n          resource: '',\r\n          desc: ''\r\n        },\r\n        formLabelWidth: '120px'\r\n      }\r\n   },\r\n   created() {\r\n      const that = this;\r\n\r\n      this.getList();\r\n      this.getStoreList();\r\n      this.getBrandOptions();\r\n      this.storeStock_listBrand();\r\n      this.getClassData();\r\n      this.getColorOptions();\r\n   },\r\n   activated() {\r\n      this.getList();\r\n   },\r\n   methods: {\r\n      /**\r\n       * 获取子级\r\n       */\r\n      childrenIsShow(row, index) {\r\n         console.log(row)\r\n         var productId = row.productCode; //当前数据ID\r\n         let _type = row.isType; //状态 1 关闭 0 打开\r\n         if (_type == \"1\") {\r\n         //当前为关闭状态 需请求接口获取子元素\r\n         row.isType = 0;\r\n         this.getChildData(row, index);\r\n         } else {\r\n         //当前为打开状态 需删除子元素\r\n         row.isType = 1;\r\n         this.removeChildData(row);\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表子类\r\n       */\r\n      getChildData(row, index) {\r\n         let that = this;\r\n         let _index = index;\r\n         if (!row._chilren) {\r\n            this.request(\r\n               that.api.store.storeProduct_listByDeptId,\r\n               {\r\n               \"filter\": \"\",\r\n               \"storeId\": row.storeId,\r\n               productCode:row.productCode,\r\n               \"brandCode\":row.brandCode,\r\n               brandName:row.brandName,\r\n               // 商品品类\r\n               productType:row.productType, \r\n               // 商品颜色系列\r\n               colorSeries:this._colorSeries,\r\n               // 商品颜色\r\n               color:this._color,\r\n               orderBy:'goodsCode'\r\n               }\r\n            ).then(res => {\r\n               let _data = res.data;\r\n               let _dataLen = _data.length;\r\n               for (let i = 0; i < _dataLen; i++) {\r\n                  _data[i].subCode = _data[i].code;\r\n                  _data[i].code = null;\r\n               }\r\n               row._chilren = _data;\r\n               //根据下标插入进去 获取ID 在数组中的下标\r\n               this.getList_data.dataList.data.splice(_index + 1, 0, ..._data);\r\n               //获取子集id存入 元素属性\r\n               let arr = [];\r\n               for (let { id } of _data) {\r\n                  arr.push(id);\r\n               }\r\n               row._cid = arr.join();\r\n            });\r\n         } else {\r\n         this.getList_data.dataList.data.splice(_index + 1, 0, ...row._chilren);\r\n         }\r\n      },\r\n      //删除子集\r\n      removeChildData(row) {\r\n         let cid = row._cid;\r\n         let cidArr = cid.split(\",\");\r\n         let _table = this.getList_data.dataList.data,\r\n         tableLen = _table.length;\r\n         for (let i = 0; i < cidArr.length; i++) {\r\n         for (let j = 0; j < this.getList_data.dataList.data.length; j++) {\r\n            if (cidArr[i] == this.getList_data.dataList.data[j].id) {\r\n               this.getList_data.dataList.data.splice(j, 1);\r\n            }\r\n         }\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表\r\n       */\r\n      getList() {\r\n         const that = this;\r\n\r\n         if(this.filtersData.filter) {\r\n            this.filtersData.orderBy = 'quantity';\r\n         }else{\r\n            this.filtersData.orderBy = '';\r\n         };\r\n         this.request(\r\n         that.api.store.storeProduct_listProduct,\r\n         this.filtersData\r\n         ).then(res => {\r\n            res.dataList.data.forEach((item, index) => {\r\n               item.isShow = true;\r\n               item.isType = 1;\r\n               item._cid = \"\";\r\n            })\r\n            that.getList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 选择品类\r\n       */\r\n      cascaderGet(e) {\r\n         let cateId = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.classList.find(item => item.id == cateId);\r\n         this.filtersData.productType = obj.fullCateName;\r\n      },\r\n      /**\r\n       * 获取分类\r\n       */\r\n      getClassData() {\r\n         //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\r\n         this.$common.getClassSelect(this, 1).then(res => {\r\n            this.classData = res.ztree;\r\n            this.classList = res.list;\r\n         });\r\n      },\r\n      /**\r\n       * 选择颜色\r\n       */\r\n      colorCodeGet(e) {\r\n         let color  = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.colorList.find((item)=>(item.code == color));\r\n         if(obj.parentCode ===null){\r\n            this.filtersData.colorSeries = obj.name;\r\n            this.filtersData.color = null;\r\n         }else{\r\n            this.filtersData.colorSeries = null;\r\n            this.filtersData.color =obj.name;\r\n         }\r\n      },\r\n      /**\r\n       * 获取颜色\r\n       */\r\n      getColorOptions() {\r\n      // console.log(\"从computed中获取颜色\");\r\n      let codeSet = this.$store.getters.codeData;\r\n      let treeList = [];\r\n      let codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\r\n      function toTree(data, parentCode) {\r\n         var tree = [];\r\n         var temp;\r\n         for (var i = 0; i < data.length; i++) {\r\n            if (data[i].parentCode == parentCode) {\r\n            var obj = data[i];\r\n            temp = toTree(data, data[i].code);\r\n            if (temp.length > 0) {\r\n               obj.children = temp;\r\n            }\r\n            tree.push(obj);\r\n            }\r\n         }\r\n         return tree;\r\n      }\r\n      treeList = toTree(codeList, null);\r\n      this.colorList = codeList;\r\n      this.colorOptions = treeList;\r\n      },\r\n      /**\r\n       * 获取品牌\r\n       */\r\n      getBrandOptions() {\r\n         let that = this;\r\n         this.request(\r\n         this.api.product.productBrand_list,\r\n         {},\r\n         true\r\n         ).then(res => {\r\n            that.brandOptions = res.data;\r\n         });\r\n      },\r\n      //导出\r\n      exportExcel() {\r\n     \r\n        require.ensure([], () => {\r\n          let { export_json_to_excel, export_table_to_excel } = require(\"@/vendor/Export2Excel\");\r\n          let tHeader = [\r\n            \"所属门店\",\r\n            \"隶属机构\",\r\n            \"商品款号\",\r\n            \"商品货号\",\r\n            \"库存数量\",\r\n            \"商品图片\",\r\n            \"品牌\",\r\n            \"吊牌价\",\r\n            \"颜色\",\r\n            \"尺码\",\r\n          ];\r\n          // 上面设置Excel的表格第一行的标题\r\n          let filterVal = [\r\n            \"storeName\",\r\n            \"relationDepNmae\",\r\n            \"productCode\",\r\n            \"goodsCode\",\r\n            \"quantity\",\r\n            \"image\",\r\n            \"brandName\",\r\n            \"price\",\r\n            \"color\",\r\n            \"size\"\r\n          ];\r\n          // 上面的index、nickName、name是tableData里对象的属性\r\n          let list = this.getList_data.dataList.data; //把data里的tableData存到list\r\n          let data = this.formatJson(filterVal, list);\r\n          export_json_to_excel(tHeader, data, \"商品库存汇总列表\");\r\n        });\r\n      },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => v[j]));\r\n      },\r\n      tableCheckChange(val){\r\n        this.checkedTableData = val;\r\n      },\r\n      /**\r\n       *\r\n       */\r\n      fnDialogTableVisible() {\r\n         console.log(this.ls)\r\n         this.workOrderPoolAssign();\r\n         this.dialogTableVisible = false;\r\n      },\r\n      /**\r\n       * 查看\r\n       */\r\n      timeRedact(id) {\r\n         this.href('store/inventory/sendBck_order_detail',{\r\n            id\r\n         })\r\n      },\r\n      // 点击页数\r\n      handleCurrentChange(pageIndex){\r\n         this.filtersData.pageIndex = pageIndex;\r\n         this.getList();\r\n      },\r\n      // 点击每页多少条数\r\n      handleSizeChange(pageSize){\r\n         this.filtersData.pageSize = pageSize;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 查询门店列表\r\n       */\r\n      getStoreList() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeBasic_list,\r\n         this.filtersDataStore\r\n         ).then(res => {\r\n            that.getStoreList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 获取品牌列表\r\n       */\r\n      storeStock_listBrand() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeStock_listBrand\r\n         ).then(res => {\r\n            that.storeStock_listBrand_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 跳转工单详情\r\n       */\r\n      href(routeName, param) {\r\n         this.$router.push({\r\n            path: '/' + routeName,\r\n            query: param\r\n         })\r\n      },\r\n      /**\r\n       * 模糊搜索\r\n       */\r\n      handleSearch() {\r\n         this.filtersData.pageIndex = 1;\r\n         this._colorSeries = this.filtersData.colorSeries;\r\n         this._color = this.filtersData.color;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 搜索重置\r\n       */\r\n      handleResetFilters() {\r\n         \r\n         Object.assign(this.filtersData, {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         });\r\n         this.cateArr = [];\r\n         // 将商品颜色重置为空\r\n         this.$refs.goodsColor.$el.children[0].children[0].value = null;\r\n         this.$refs.goodsColor.checkedValue = [];\r\n      },\r\n   },\r\n   components:{\r\n      codeSet,\r\n      treeDept\r\n   }\r\n}\r\n</script>\r\n<style  lang=\"less\" scoped>\r\n   .box{\r\n      margin: 8px;\r\n      padding: 20px;\r\n      background: #fff;\r\n   }\r\n  .imageSize{\r\n      width: 50px;\r\n      height: 50px;\r\n   }\r\n   .blueness{\r\n      color: #1E90FF;\r\n   }\r\n  .disFlex{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      .info{\r\n         margin-top: 15px;\r\n      }\r\n   }\r\n   .warningType{\r\n    width: 20px;\r\n    height: 20px;\r\n    line-height: 20px;\r\n    display: inline-block;\r\n    background: red;\r\n    color: #fff;\r\n    font-size: 12px;\r\n    border-radius: 4px;\r\n    margin-left: 10px;\r\n    text-align: center;\r\n   }\r\n   .color{\r\n      background: #FF6347;\r\n   }\r\n   h5 {\r\n     color: #222;\r\n     margin-left: -15px;\r\n   }\r\n   .test {\r\n     color: #9d9d9d;\r\n   }\r\n</style>\r\n"]}]}