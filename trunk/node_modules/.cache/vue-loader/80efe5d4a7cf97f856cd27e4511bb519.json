{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\commodity\\commodity_details.vue?vue&type=style&index=0&id=16c53684&lang=less&scoped=true&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\commodity\\commodity_details.vue","mtime":1587347931181},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\css-loader\\index.js","mtime":1558492728478},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1558492728890},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\postcss-loader\\src\\index.js","mtime":1558492728823},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\less-loader\\dist\\cjs.js","mtime":1566193719488},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.item-box {\r\n  padding: 0 30px 30px;\r\n}\r\n.fixed-item-nav {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 1030;\r\n  height: 64px;\r\n  width: 100%;\r\n  padding: 0 18px 0 212px;\r\n  font-size: 20px;\r\n \r\n  >ul{\r\n     background: #ffffff;\r\n     height: 64px;\r\n  width: 100%;\r\n   color: #333333;\r\n  display: flex;\r\n  padding-left: 20px;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-bottom: 1px solid #c3c7ce;\r\n  }\r\n  li {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    margin-right: 50px;\r\n  }\r\n\r\n  li.active {\r\n    color: #2290e8;\r\n  }\r\n\r\n  li:hover {\r\n    color: #2290e8;\r\n  }\r\n}\r\n\r\n.item-nav {\r\n  height: 64px;\r\n  font-size: 20px;\r\n  color: #333333;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-bottom: 1px solid #c3c7ce;\r\n  li {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    margin-right: 50px;\r\n  }\r\n\r\n  li.active {\r\n    color: #2290e8;\r\n  }\r\n\r\n  li:hover {\r\n    color: #2290e8;\r\n  }\r\n}\r\n\r\n.basic-wrap {\r\n  margin-top: 25px;\r\n}\r\n\r\n.info {\r\n  font-size: 18px;\r\n  color: #000000;\r\n  margin-bottom: 20px;\r\n  border-bottom: 1px solid #eeeeee;\r\n  font-weight: 100;\r\n}\r\nspan {\r\n  font-size: 16px;\r\n  color: #999999;\r\n  margin-left: 10px;\r\n  font-weight: 100;\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409eff;\r\n}\r\n\r\n.c_footer {\r\n  width: 100%;\r\n  height: 80px;\r\n  margin-top: 30px;\r\n}\r\n.img-form {\r\n  /deep/.el-form-item__content {\r\n    display: flex;\r\n    align-items: top;\r\n    justify-content: flex-start;\r\n    .input-w {\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n}\r\n.input-w {\r\n  margin-right: 10px;\r\n}\r\n\r\n.img-upload {\r\n  display: flex;\r\n  align-items: top;\r\n  justify-content: flex-start;\r\n  margin-right: 10px;\r\n  /deep/ .el-upload-list--picture {\r\n    margin-left: 10px;\r\n    margin-top: -10px;\r\n    max-width: 200px;\r\n    margin-right: 10px;\r\n  }\r\n}\r\n.el-icon-error {\r\n  padding-top: 8px;\r\n}\r\n.description-wrap {\r\n  .label {\r\n    font-size: 14px;\r\n    color: #000000;\r\n  }\r\n}\r\n// 外部\r\n.stage-wrap {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n  > h5 {\r\n    font-size: 14px;\r\n    font-weight: 100;\r\n    width: 80px;\r\n    flex: 0 0 auto;\r\n  }\r\n  .full {\r\n    min-width: 500px;\r\n    flex: 1;\r\n  }\r\n}\r\n.input-h{\r\n  height: 35px;\r\n}\r\n.left{\r\n  margin-left: 100px;\r\n}\r\n",{"version":3,"sources":["commodity_details.vue"],"names":[],"mappingskfile":"commodity_details.vue","sourceRoot":"src/views/product/commodity","sourcesContent":["<!--\r\n * @Description: 商品详情\r\n * @Author: elephant\r\n * @Date: 2019-07-01 15:20:22\r\n * @LastEditTime: 2020-04-16 17:22:29\r\n * @LastEditors: Please set LastEditors\r\n -->\r\n<template>\r\n  <div class=\"item-margin bg-fff item-box\">\r\n    <!-- 顶部导航 -->\r\n    <div  v-if=\"!local\" class=\"fixed-item-nav\"> \r\n     <ul>\r\n      <li\r\n        @click=\"scrollToItem(item,index)\"\r\n        :class=\"toActive == index ? 'active' :'' \"\r\n        v-for=\"(item,index) in topList\"\r\n        :key=\"index\"\r\n      >{{item.title}}</li>\r\n    </ul>\r\n    </div>\r\n    <ul class=\"item-nav\">\r\n      <li\r\n        @click=\"scrollToItem(item,index)\"\r\n        :class=\"toActive == index ? 'active' :'' \"\r\n        v-for=\"(item,index) in topList\"\r\n        :key=\"index\"\r\n      >{{item.title}}</li>\r\n    </ul>\r\n    <!-- 顶部导航END -->\r\n    <!-- 基本信息 吊牌信息 -->\r\n      <el-form :model=\"productFormData\" label-width=\"120px\" size=\"small\" ref=\"productFormDP\" inline>\r\n  <basic-and-tag \r\n  :editDisabled=\"editDisabled\"\r\n  :showDisabled=\"showDisabled\"\r\n  :productFormData=\"productFormData\">\r\n  </basic-and-tag>\r\n  </el-form>\r\n    <!-- 基本信息 吊牌信息END -->\r\n    <!-- 销售信息 -->\r\n    <h5 ref=\"productInfoRef\" class=\"info\">销售信息</h5>\r\n    <el-row>\r\n      <el-form :model=\"filtersData\" label-width=\"100px\" size=\"small\" ref=\"filtersForm\">\r\n        <el-col :span=\"24\">\r\n          <el-form-item v-if=\"_type != 'add'\" prop=\"Category\" label=\"商品款号:\">{{comCode}}</el-form-item>\r\n          <el-form-item\r\n            class=\"img-form\"\r\n            label=\"颜色：\"\r\n          >\r\n            <el-cascader\r\n              :disabled=\"showDisabled\"\r\n              class=\"input-w input-h\"\r\n              :options=\"colorOptions\"\r\n              v-model=\"colorArr\"\r\n              :value=\"colorArr\"\r\n              @change=\"colorArrGet($event)\"\r\n              :show-all-levels=\"false\"\r\n              :props=\"colorProps\"\r\n              :emitPath=\"false\"\r\n            ></el-cascader>\r\n            <el-upload-img\r\n              class=\"ml-5\"\r\n              v-if=\"!showDisabled\"\r\n              :disabled=\"showDisabled\"\r\n              lssListType=\"picture-card\"\r\n              v-model=\"imageUrl\"\r\n              @remove-img=\"handleRemoveColorImg\"\r\n              CatalogName=\"product\"\r\n            ></el-upload-img>\r\n          </el-form-item>\r\n        </el-col>\r\n        <el-col :span=\"24\">\r\n          <el-form-item v-for=\"(_key,index) in checkedSizeData\" :key=\"index\" :label=\"_key.name+'：'\">\r\n            <el-checkbox-group\r\n              :disabled=\"_key.disabled\"\r\n              @change=\"handleCheckedChange($event,_key)\"\r\n              v-model=\"_key.checkedSizeList\">\r\n              <el-checkbox\r\n                v-for=\"list in _key.productSpecificationsAttributes\"\r\n                :label=\"list.id\"\r\n                :key=\"list.name\"\r\n              >{{list.name}}</el-checkbox>\r\n            </el-checkbox-group>\r\n          </el-form-item>\r\n          <el-form-item label=\" \">\r\n            <el-button size=\"small\" :disabled=\"showDisabled\" @click=\"addSKU\">添加SKU</el-button>\r\n          </el-form-item>\r\n        </el-col>\r\n      </el-form>\r\n      <el-col :span=\"24\">\r\n        <el-form label-width=\"100px\" size=\"small\" ref=\"filtersForm\" inline>\r\n          <el-form-item label=\"设置预警：\">\r\n            <el-input\r\n              @input.native=\"setNumber($event)\"\r\n              :disabled=\"showDisabled\"\r\n              placeholder=\"请输入内容\"\r\n              v-model=\"setMinThreshold\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"吊牌价：\">\r\n            <el-input\r\n              @input.native=\"setNumberPrice($event)\"\r\n              :disabled=\"showDisabled\"\r\n              placeholder=\"请输入内容\"\r\n              v-model=\"setRetailPrice\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"采购价：\">\r\n            <el-input\r\n              @input.native=\"setNumberPrice($event)\"\r\n              :disabled=\"showDisabled\"\r\n              placeholder=\"请输入内容\"\r\n              v-model=\"setWholesalePrice\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"进货价：\">\r\n            <el-input\r\n              @input.native=\"setNumberPrice($event)\"\r\n              :disabled=\"showDisabled\"\r\n              placeholder=\"请输入内容\"\r\n              v-model=\"setPurchasePrice\"\r\n            ></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-col>\r\n      <el-col class=\"mb-20\" v-if=\"!showDisabled\" :span=\"24\">\r\n        <el-button size=\"small\" class=\"left\"  @click=\"updateSKUImg\">批量更新图片</el-button>\r\n      </el-col>\r\n      <el-col class=\"mb-20\" :span=\"24\">\r\n        <!-- 销售信息table -->\r\n        <div class=\"item-details-table\">\r\n          <el-table\r\n            :data=\"salesInforData\"\r\n            stripe\r\n            empty-text=\"暂无数据\"\r\n            header-align=\"center\"\r\n            header-row-class-name=\"item-table-header\"\r\n            :highlight-current-row=\"true\"\r\n          >\r\n            <el-table-column prop=\"code\" align=\"center\" label=\"商品货号\" width=\"150\"></el-table-column>\r\n            <el-table-column prop=\"color\" align=\"center\" label=\"颜色\" width=\"100\"></el-table-column>\r\n            <el-table-column prop=\"size\" align=\"center\" label=\"规格信息\" min-width=\"100\"></el-table-column>\r\n            <el-table-column prop=\"image\" align=\"center\" label=\"图片\" min-width=\"100\">\r\n              <template slot-scope=\"scope\">\r\n                <img class=\"logo-wh\" :src=\"scope.row.image\" alt />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"minThreshold\" align=\"center\" label=\"库存预警\" width=\"120\">\r\n              <template slot-scope=\"scope\">\r\n                <el-input :disabled=\"showDisabled\" v-model=\"scope.row.minThreshold\" v-enter-number></el-input>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"retailPrice\" align=\"center\" label=\"吊牌价\" width=\"120\">\r\n              <template slot-scope=\"scope\">\r\n                <el-input\r\n                  :disabled=\"showDisabled\"\r\n                  v-model=\"scope.row.retailPrice\"\r\n                  @input.native=\"setNumberPrice($event)\"\r\n                ></el-input>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"wholesalePrice\" align=\"center\" label=\"采购价\" width=\"120\">\r\n              <template slot-scope=\"scope\">\r\n                <el-input\r\n                  :disabled=\"showDisabled\"\r\n                  v-model=\"scope.row.wholesalePrice\"\r\n                  @input.native=\"setNumberPrice($event)\"\r\n                ></el-input>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"purchasePrice\" align=\"center\" label=\"进货价\" width=\"120\">\r\n              <template slot-scope=\"scope\">\r\n                <el-input\r\n                  :disabled=\"showDisabled\"\r\n                  v-model=\"scope.row.purchasePrice\"\r\n                  @input.native=\"setNumberPrice($event)\"\r\n                ></el-input>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column\r\n              v-if=\"!showDisabled\"\r\n              fixed=\"right\"\r\n              label-class-name=\"text-center\"\r\n              class-name=\"text-center\"\r\n              align=\"center\"\r\n              label=\"操作\"\r\n              width=\"120\"\r\n            >\r\n              <template slot-scope=\"scope\">\r\n                <el-button\r\n                  @click=\"editSalesInforImg(scope.row)\"\r\n                  type=\"text\"\r\n                  size=\"small\"\r\n                  v-text=\"scope.row.image == ''?'上传图片':'修改图片'\"\r\n                ></el-button>\r\n                <el-button\r\n                  v-if=\"_type == 'add'\"\r\n                  @click=\"removeSalesInfor(scope.$index)\"\r\n                  type=\"text\"\r\n                  size=\"small\"\r\n                >删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 销售信息 END -->\r\n    <!-- 匹配标签 -->\r\n    <h5 ref=\"productTagsRef\" class=\"info\">匹配标签</h5>\r\n    <tag-matching v-model=\"productTags\" ref=\"tagRef\"></tag-matching>\r\n    <!-- 匹配标签 END-->\r\n    <!-- 商城描述 -->\r\n    <h5 ref=\"productDescriptionRef\" class=\"info\">商城描述</h5>\r\n    <div class=\"description-wrap\">\r\n      <com-description\r\n        @setParentImgList=\"descriptionImgList\"\r\n        @setParentVideoList=\"descriptionVideoList\"\r\n        ref=\"descriptionRef\"\r\n      ></com-description>\r\n      <div class=\"stage-wrap\">\r\n        <h5>前台展示：</h5>\r\n        <div class=\"full\">\r\n          <el-radio v-model=\"productFormData.show\" :disabled=\"showDisabled\" :label=\"true\">是</el-radio>\r\n          <el-radio v-model=\"productFormData.show\" :disabled=\"showDisabled\" :label=\"false\">否</el-radio>\r\n        </div>\r\n      </div>\r\n      <div class=\"stage-wrap\">\r\n        <h5>商品类型：</h5>\r\n        <div class=\"full\">\r\n          <el-radio v-model=\"productFormData.presale\" :disabled=\"showDisabled\" :label=\"false\">现货商品</el-radio>\r\n          <el-radio v-model=\"productFormData.presale\" :disabled=\"showDisabled\" :label=\"true\">预售商品</el-radio>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 商城描述END -->\r\n    <div class=\"c_footer\">\r\n      <el-button\r\n        size=\"small\"\r\n        v-if=\"!showDisabled\"\r\n        type=\"primary\"\r\n        @click=\"submitForm('productFormDP')\"\r\n      >确认</el-button>\r\n      <el-button size=\"small\" @click=\"goToReturn\">取消</el-button>\r\n    </div>\r\n    <!-- 图片上传 -->\r\n    <tp-upload-img ref=\"uploadImgCpt\"></tp-upload-img>\r\n    <!-- 批量修改SKU图片 -->\r\n    <BtchReplaceImg @imgChange=\"btchImgChange\" ref=\"BtchReplaceImgRef\"></BtchReplaceImg>\r\n  </div>\r\n</template>\r\n<script>\r\n//引入基本信息和吊牌信息\r\nimport CommondityBasicAndTag from \"../components/CommondityBasicAndTag\";\r\n//上传图片\r\nimport ElUploadImg from \"@/components/uploadImg/el_upload_img\";\r\n//table上传图片\r\nimport UpLoadImgTP from \"@/components/uploadImg/table_upload_img.vue\";\r\n//匹配标签\r\nimport TagMatching from \"../components/tagMatching.vue\";\r\n//引入详情描述 图片视频\r\nimport ComDescription from \"../components/commondity_description.vue\";\r\n// 批量替换图片\r\nimport BtchReplaceImg from \"../components/BtchReplaceImg.vue\";\r\n\r\n//条件判断\r\nimport { numberPrice, inputNumber } from \"@/utils/validate\";\r\nexport default {\r\n  /**\r\n   * 商品详情 添加商品 修改商品 用一个页面\r\n   */\r\n  components: {\r\n    [UpLoadImgTP.name]: UpLoadImgTP,\r\n    ElUploadImg,\r\n    TagMatching,\r\n    [CommondityBasicAndTag.name]:CommondityBasicAndTag,\r\n    ComDescription,\r\n    BtchReplaceImg\r\n  },\r\n  data() {\r\n    let that=this;\r\n    return {\r\n      //顶部固定\r\n      local: true,\r\n      //顶部点击\r\n      toActive: \"0\",\r\n      topList: [\r\n        { title: \"基本信息\", _ref: \"productFormDP\" },\r\n        { title: \"销售信息\", _ref: \"productInfoRef\" },\r\n        { title: \"匹配标签\", _ref: \"productTagsRef\" },\r\n        { title: \"商城描述\", _ref: \"productDescriptionRef\" }\r\n      ],\r\n      //跳页状态\r\n      comCode: \"\",\r\n      _type: \"\",\r\n      cateId: \"\",\r\n      productId: \"\",\r\n      //查看状态\r\n      editDisabled: false,\r\n      showDisabled: false,\r\n      filtersData: {},\r\n      //复选框数据\r\n      checkedSizeData: [],\r\n      //一下是测试数据\r\n      //销售信息数据\r\n      salesInforData: [],\r\n      colorProps: {\r\n        lazy: true,\r\n        lazyLoad (node, resolve) {\r\n          that.getColorList(node,resolve);\r\n        }\r\n      },\r\n      colorOptions:[],\r\n      allColorList:[],\r\n      colorArr: [],\r\n      //颜色已选数组\r\n      colorSelectData: [],\r\n      //  提交的时候也用这个字段 基本信息使用\r\n      // productInfoAttrs: [\r\n      //   {\r\n      //     productName: \"测试003\", //(商品名称/品名)\r\n      //     infoName: \"测02\", //(基本信息名称)\r\n      //     infoId: \"7ce27322-ead1-4958-8e45-4089849a1503\", //(基本信息ID)\r\n      //     infoAttrName: \"测02\", //(基本信息内容名称)\r\n      //     infoAttrId: \"7ce27322-ead1-4958-8e45-4089849a1503\" //(基本信息内容ID)\r\n      //   }\r\n      // ],\r\n      //后台提交数据\r\n      productFormData: {\r\n        description: \"\",\r\n        image: \"\", //商品图片\r\n        originalCode: \"\", //原始款号\r\n        cateId: \"\", //分类ID\r\n        safetyGrade: \"\", //安全类别\r\n        level: \"\", //等级\r\n        performanceStandard: \"\", //执行标准\r\n        qualityInspector: \"01\", //检验员\r\n        designCompanyId: \"\", //设计商\r\n        designCompanyCode:\"\",\r\n        designCompanyName: \"\", //设计商名称\r\n        ownerId:'',//货主ID\r\n        ownerCode:'',\r\n        ownerName:'',//货主名称\r\n        name: \"\", //品名\r\n        brandId: \"\", //品牌ID\r\n        brandCode:\"\",\r\n        brandName: \"\", //品牌名称\r\n        tagBrandCode:\"\",//打印品牌\r\n        tagBrandId:\"\",\r\n        tagBrandName:\"\",\r\n        postalCode: \"\", //邮编\r\n        brandOwnerId:\"\",\r\n        brandOwnerName: \"\", //品牌商\r\n        brandOwnerCode:'',\r\n        brandOwnerAddress: \"\", //地址\r\n        ingredients: \"\", //配料\r\n        fabric: \"\", //面料\r\n        lining: \"\", //里料\r\n        filler: \"\", //填充物\r\n        popularYear: \"\", //流行年份\r\n        seasonalStyle: \"\", //季节波段\r\n        seasonalStyleCode:\"\",\r\n        productInfoAttrs: null, //基本信息数组\r\n        productGoodses: null, //货品信息列表 毕传\r\n        productTags: null, //匹配标签列表 毕传\r\n        productImages: null, //产品图片列表\r\n        productVideos: null, //产品视频列表\r\n        show: false,\r\n        presale:false,//商品类型  true=>预售  false=>现货\r\n      },\r\n      //匹配标签数据\r\n      specificationsType: false,\r\n      //定义生成笛卡尔所需的数据结构 规格数据结构可以先做测试\r\n      specificationsData: [],\r\n      list: [],\r\n      setMinThreshold: null, //设置最小预警\r\n      setRetailPrice: null, //设置吊牌价格\r\n      setWholesalePrice: null, //设置采购价格\r\n      setPurchasePrice: null, //设置进货价格\r\n      imageUrl: \"\", //图片存的字符串\r\n      productTags: [] //标签子组件返回的数据\r\n    };\r\n  },\r\n  created() {\r\n    this.getParams(); \r\n    this.getSpecifications();\r\n     //颜色\r\n    this.getColorOptions();\r\n    this.getAllColorList();\r\n  },\r\n  mounted() {\r\n    window.addEventListener(\"scroll\", this.btn_pos);\r\n  },\r\n  methods: {\r\n    setNumberPrice(_t) {\r\n      numberPrice(_t);\r\n    },\r\n    setNumber(_t) {\r\n      inputNumber(_t);\r\n    },\r\n    /**\r\n     * 1,当规格多选框发生改变时触发的事件  第一个参数 返回选中的数组  第二个参数 是在原==父数组中的下标\r\n     * 2,根据当前的数据 生成所需的数据 放入生成笛卡尔积数组\r\n     * 3,valArr//选择的数组   elem 当前数组源\r\n     */\r\n    handleCheckedChange(valArr, elem) {\r\n      //如果当前选择有值 禁用除当前之外的筛选\r\n      if(valArr.length >=1){\r\n          for (let i = 0; i < this.checkedSizeData.length; i++) {\r\n            if( this.checkedSizeData[i].id !=  elem.id){\r\n                this.checkedSizeData[i].disabled=true;\r\n            }\r\n          }\r\n      }else{ //否则清空禁用\r\n          for (let i = 0; i < this.checkedSizeData.length; i++) {\r\n            this.checkedSizeData[i].disabled=false;\r\n          }\r\n      }\r\n      let elem_id = elem.id;\r\n      let Attributes = elem.productSpecificationsAttributes;\r\n      let index = this.specificationsData.findIndex(item => item.id == elem_id);\r\n      //因为arr每次是新的数组 对下标的数组清空处理\r\n      this.specificationsData[index].attrs = [];\r\n      //找到对应的对象 放入数据\r\n      for (let i = 0; i < valArr.length; i++) {\r\n        let checkedObj = Attributes.find(item => item.id == valArr[i]);\r\n        this.specificationsData[index].attrs.push({\r\n          attrCode: checkedObj.code,\r\n          attrId: checkedObj.id,\r\n          attr: checkedObj.name,\r\n          attrSize: checkedObj.size\r\n        });\r\n      }\r\n    },\r\n     //颜色\r\n    getColorOptions() {\r\n      this.request(this.api.product.colorSeries_list, {},true).then(res => {\r\n        let _data = res.data;\r\n        let colorList = _data.map((item, i) => ({\r\n          value: item.id,\r\n          label: item.name,\r\n          leaf: false,\r\n          }));\r\n         this.colorOptions = colorList;\r\n      });\r\n    },\r\n     getColorList(node,resolve){\r\n      if(!node.value)return;\r\n       this.request(this.api.product.color_list, {seriesId:node.value},true)\r\n        .then(res => {\r\n          let _data = res.data;\r\n          let colorList = _data.map((item, i) => ({\r\n            value: item.code,\r\n            label: item.name,\r\n            leaf: true\r\n          }));\r\n          resolve(colorList);\r\n        })\r\n    },\r\n    getAllColorList(){\r\n      this.request(this.api.product.color_list, {},true)\r\n      .then(res => {\r\n        let _data = res.data;\r\n        this.allColorList=_data;\r\n      })\r\n    },\r\n    //颜色发生改变后的数据 //改变的数据 \r\n    colorArrGet(valArr) {\r\n      if (valArr.length <= 1) {\r\n        this.$message({\r\n          type: \"info\",\r\n          message: \"请选择子类\"\r\n        });\r\n        return false;\r\n      }\r\n      //找到color 的对象\r\n      let colorCode =this.$common.deepCopy(valArr).pop();\r\n      let colorObj = this.allColorList.find(\r\n        item => item.code == colorCode\r\n      );\r\n      //找到 生成笛卡尔积  //找到 存储的对象\r\n      let spData = this.specificationsData;\r\n      //console.log(spData);\r\n      let spIndex = spData.findIndex(item => item.id == 'myColorId');\r\n      //先判断是否含有当前颜色 有的话 毙掉\r\n      let colorIndex = spData[spIndex].attrs.find(\r\n        item => item.attrCode == colorCode\r\n      );\r\n      spData[spIndex].attrs = [];\r\n      //无重复颜色\r\n      spData[spIndex].attrs.push({\r\n        attrCode: colorObj.code,\r\n        attrId: colorObj.id,\r\n        attr: colorObj.name\r\n      });\r\n    },\r\n    // 删除图片 \r\n    handleRemoveColorImg(){\r\n      this.imageUrl = '';\r\n    },\r\n    // 添加规格表格\r\n    getTable() {\r\n      this.list = []; // list  处理数组  去掉title //只存子集 attrs\r\n      //声明个新的原数组  深复制一下 删除空的元素\r\n      let primaryData = [];\r\n      this.specificationsData.forEach(item => {\r\n        if (item.attrs.length > 0) {\r\n          this.list.push(item.attrs);\r\n          primaryData.push(item);\r\n        }\r\n      });\r\n      // console.log(this.list)//获得到了子集\r\n      //声明空数组  递归获取的 笛卡尔积数据  [[]] 数组嵌套数组结构\r\n      //[0: (3) [\"红色\", \"M\", \"好\"]]\r\n      var arr = [];\r\n      var that = this;\r\n      //定义递归方法  从获取单一字符串 改成对象\r\n      function func(skuarr = [], i) {\r\n        for (let j = 0; j < that.list[i].length; j++) {\r\n          if (i < that.list.length - 1) {\r\n            skuarr[i] = that.list[i][j]; //hat.list[i][j].attr\r\n            func(skuarr, i + 1);\r\n          } else {\r\n            arr.push([...skuarr, that.list[i][j]]);\r\n          }\r\n        }\r\n        return arr;\r\n      }\r\n      //声明新list 等于   [0: (3) [\"红色\", \"M\", \"好\"]]\r\n      let newList = func([], 0);\r\n      let tableList = [];\r\n      //group 排序好的结构 好放入 table 中调用 group\r\n      newList.forEach(item => {\r\n        let tableItem = new Object();\r\n        tableItem.wholesalePrice = \"\";\r\n        tableItem.minThreshold = \"\";\r\n        tableItem.retailPrice = \"\";\r\n        tableItem.purchasePrice = \"\";\r\n        tableItem.image = this.imageUrl;\r\n        tableItem.color = \"\";\r\n        tableItem.colorCode = \"\";\r\n        tableItem.size = item[0].attr;\r\n        tableItem.sizeCode = item[0].attrCode;\r\n        tableItem.sizeAttribute = item[0].attrSize;\r\n        tableItem.productGoodsSpecifications = [];\r\n        for (let i = 0; i < primaryData.length; i++) {\r\n          // console.log( primaryData[i]);\r\n          // console.log( item[i]);\r\n          if (primaryData[i].title == \"颜色\") {\r\n            tableItem.color = item[i].attr;\r\n            tableItem.colorCode = item[i].attrCode;\r\n          }\r\n          // if (primaryData[i].id == this.specificationsData[0].id) {\r\n          // }\r\n          tableItem.productGoodsSpecifications.push({\r\n            specificationsId: primaryData[i].id,\r\n            specificationsName: primaryData[i].title,\r\n            specificationsAttributeId: item[i].attrId,\r\n            specificationsAttributeIdName: item[i].attr\r\n          });\r\n        }\r\n        tableList.push(tableItem);\r\n      });\r\n      //处理给颜色增加色系  真坑\r\n      let codeList=this.allColorList;\r\n      function getColorSeriesData(code, type) {\r\n        let obj = codeList.find(item => item.code == code);\r\n        if (type == \"name\") {\r\n          return obj.seriesName;\r\n        } else {\r\n          return obj.seriesId;\r\n        }\r\n      }\r\n      for (let i = 0; i < tableList.length; i++) {\r\n        tableList[i].colorSeries = getColorSeriesData(\r\n          tableList[i].colorCode,\r\n          \"name\"\r\n        );\r\n        tableList[i].colorSeriesId = getColorSeriesData(\r\n          tableList[i].colorCode,\r\n          \"id\"\r\n        );\r\n      }\r\n      // console.log(tableList);\r\n      let infoData = this.salesInforData,\r\n        infoLen = infoData.length; //table 数组\r\n      let tableListLen = tableList.length;\r\n      if (infoLen >= 1) {\r\n        for (let i = 0; i < infoLen; i++) {\r\n          for (let k = 0; k < tableListLen; k++) {\r\n            if (\r\n              infoData[i].colorCode == tableList[k].colorCode &&\r\n              infoData[i].sizeCode == tableList[k].sizeCode\r\n            ) {\r\n              this.$message({\r\n                message:\r\n                  \"已有重复规格：\" +\r\n                  tableList[k].size +\r\n                  \"，颜色：\" +\r\n                  tableList[k].color,\r\n                type: \"warning\"\r\n              });\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        this.salesInforData.push(...tableList);\r\n      } else {\r\n        this.salesInforData = tableList;\r\n      }\r\n    },\r\n    //// 取到路由带过来的参数\r\n    getParams() {\r\n      let _qurey = this.$route.query;\r\n      this._type = _qurey._type;\r\n      this.cateId = _qurey.cateId;\r\n      this.productId = _qurey.productId;\r\n      let itemStatus = _qurey._type;\r\n      // console.log(itemStatus);\r\n      switch (itemStatus.toString()) {\r\n        case \"add\":\r\n          this.getBasicData(); //获取基本信息列表\r\n          this.productFormData.cateId = this.cateId;\r\n          this.productFormData.cateName = _qurey.cateName;\r\n          this.productFormData.cateIdentifier = _qurey.cateIdentifier;\r\n          this.productFormData.fullCateName = _qurey.fullCateName;\r\n          this.productFormData.cateCode = _qurey.cateCode;\r\n          this.editDisabled = false;\r\n          this.showDisabled = false;\r\n          break;\r\n        case \"edit\":\r\n          this.editDisabled = true;\r\n          this.showDisabled = false;\r\n          this.setPromiseAll();\r\n          break;\r\n        case \"show\":\r\n          this.editDisabled = true;\r\n          this.showDisabled = true;\r\n          this.setPromiseAll();\r\n          break;\r\n      }\r\n    },\r\n    //获取基本信息列表\r\n    getBasicData() {\r\n      this.request(this.api.product.productInformation_list, {\r\n        cateId: this.cateId,\r\n        subset: true,\r\n        valid: true\r\n      }).then(data => {\r\n        let _data = data.data,\r\n          _dataLen = _data.length;\r\n        //创建数组 存入对象\r\n        let productInfo = [];\r\n        for (let i = 0; i < _dataLen; i++) {\r\n          let obj = {};\r\n          obj.productName = \"\";\r\n          obj.infoName = _data[i].name;\r\n          obj.infoId = _data[i].id;\r\n          obj.infoAttrName = \"\";\r\n          obj.infoAttrId = \"\";\r\n          obj._children = _data[i].productInformationAttributes;\r\n          obj.required = _data[i].required;\r\n          productInfo.push(obj);\r\n        }\r\n        // this.productInfoAttrs = productInfo;\r\n        this.productFormData.productInfoAttrs = productInfo;\r\n      });\r\n    },\r\n    //获取规格\r\n    getSpecifications() {\r\n      this.request(this.api.product.productSpecifications_list, {\r\n        cateId: this.cateId,\r\n        subset: true,\r\n        valid: true\r\n      },true).then(data => {\r\n        //获取 颜色 后 添加 生成笛卡尔所需的初始数据 specificationsData\r\n        let _data = data.data;\r\n        for (let i = 0; i < _data.length; i++) {\r\n          _data[i].checkedSizeList = [];\r\n          _data[i].disabled=false;\r\n          //重新排序\r\n          _data[i].productSpecificationsAttributes = _data[i].productSpecificationsAttributes.sort((a, b) => a.sort - b.sort);\r\n          this.specificationsData.push({\r\n            title: _data[i].name,\r\n            id: _data[i].id,\r\n            attrs: []\r\n          });\r\n        }\r\n        this.specificationsData.push({\r\n          title:'颜色',\r\n          id: 'myColorId',\r\n          attrs: []\r\n        });\r\n        //当原数组生成好后开始操作\r\n        this.specificationsType = true;\r\n        this.checkedSizeData = _data;\r\n      });\r\n    },\r\n    //标签处理 懵逼处理\r\n    handleTags() {\r\n      let productTags =\r\n        this.$common.deepCopy(this.productFormData.productTags) || [];\r\n      let tags = this.$common.deepCopy(this.productTags);\r\n      let deleteTags = [];\r\n      for (let i = 0; i < productTags.length; i++) {\r\n        let flag = false;\r\n        for (let k = 0; k < tags.length; k++) {\r\n          if (productTags[i].tagId == tags[k].tagId) {\r\n            flag = true;\r\n            tags[k] = productTags[i];\r\n            break;\r\n          }\r\n        }\r\n        if (!flag) {\r\n          productTags[i].status = 9;\r\n          deleteTags.push(productTags[i]);\r\n        }\r\n      }\r\n      this.productFormData.productTags = [...deleteTags, ...tags];\r\n    },\r\n    //新增\r\n    submitForm(formName) {\r\n      if (this.salesInforData.length <= 0) {\r\n        this.$message({\r\n          message: \"货品必须录入\",\r\n          type: \"error\"\r\n        });\r\n        return;\r\n      }\r\n      this.$refs[formName].validate((valid, object) => {\r\n        if (valid) {\r\n          //标签 处理\r\n          this.handleTags();\r\n          this.productFormData.productGoodses =\r\n            this.salesInforData.length > 0 ? this.salesInforData : null;\r\n            if(!!this.productFormData.productImages){\r\n                for (let i = 0; i < this.productFormData.productImages.length; i++) {\r\n                this.productFormData.productImages[\r\n                  i\r\n                ].productName = this.productFormData.name;\r\n              }\r\n            }\r\n            if(!!this.productFormData.productVideos){\r\n              for (let i = 0; i < this.productFormData.productVideos.length; i++) {\r\n                this.productFormData.productVideos[\r\n                  i\r\n                ].productName = this.productFormData.name;\r\n              }\r\n            }\r\n          let josnFormData = JSON.parse(JSON.stringify(this.productFormData));\r\n          let Attrs = josnFormData.productInfoAttrs;\r\n          for (let i = 0; i < Attrs.length; i++) {\r\n            delete Attrs[i]._children;\r\n          }\r\n          this.request(this.api.product.product_save, josnFormData).then(\r\n            data => {\r\n              this.$message.success(\"保存成功\");\r\n              setTimeout(() => {\r\n                this.goToReturn();\r\n              }, 500);\r\n            }\r\n          );\r\n        } else {\r\n          this.$message({\r\n            message: \"请填入必填字段\",\r\n            type: \"error\"\r\n          });\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    setPromiseAll() {\r\n      Promise.all([this.getShowBasicData(), this.getProductData()])\r\n        .then(res => {\r\n          //获取根据ID返回的数据\r\n          this.productLogic(res[1]);\r\n          //获取基本信息的数据\r\n          this.basicLogic(res[0]);\r\n        })\r\n    },\r\n    //修改 查看 数据\r\n    getProductData() {\r\n      return new Promise((resolve, reject) => {\r\n        this.request(this.api.product.product_get, { id: this.productId }).then(\r\n          data => {\r\n            resolve(data);\r\n          }\r\n        );\r\n      });\r\n    },\r\n    //查看时基本数据\r\n    getShowBasicData() {\r\n      return new Promise((resolve, reject) => {\r\n        this.request(this.api.product.productInformation_list, {\r\n          cateId: this.cateId,\r\n          subset: true\r\n        },true).then(data => {\r\n          resolve(data);\r\n        });\r\n      });\r\n    },\r\n    //\r\n    basicLogic(data) {\r\n      let _data = data.data,\r\n        _dataLen = _data.length;\r\n      let Attrs = this.productFormData.productInfoAttrs;\r\n      for (let i = 0; i < _dataLen; i++) {\r\n        for (let k = 0; k < Attrs.length; k++) {\r\n          if (_data[i].id == Attrs[k].infoId) {\r\n            Attrs[k]._children = _data[i].productInformationAttributes;\r\n            Attrs[k].required = _data[i].required;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //根据ID返回的数据\r\n    productLogic(data) {\r\n      let _data = data;\r\n      this.comCode = _data.code;\r\n      this.productFormData = _data;\r\n      this.salesInforData = _data.productGoodses;\r\n      //处理Tags 抽出tagId传入子组件\r\n      let tags = _data.productTags;\r\n      let allIds = [];\r\n      for (let i = 0; i < tags.length; i++) {\r\n        allIds.push({ tagId: tags[i].tagId });\r\n      }\r\n      this.$refs.tagRef.propInit(this.$common.deepCopy(allIds));\r\n      //处理图片视频 放入子组件\r\n      this.$refs.descriptionRef.videoImgPropInit(this.$common.deepCopy(_data),this.showDisabled);\r\n    },\r\n    //添加sku\r\n    addSKU() {\r\n      if (this.specificationsType) {\r\n        let _data = this.specificationsData;\r\n        let _dataLen = _data.length;\r\n        let num = 0;\r\n        for (let i = 0; i < _dataLen; i++) {\r\n          if (_data[i].attrs.length != 0) {\r\n            num += 1;\r\n          }\r\n        }\r\n        if (num >= 2) {\r\n          this.getTable();\r\n        } else {\r\n          this.$message.error(\"缺少必要的规格！\");\r\n        }\r\n      }\r\n    },\r\n    //删除 sku\r\n    removeSalesInfor(index) {\r\n      this.salesInforData.splice(index, 1);\r\n    },\r\n    //上传图片\r\n    editSalesInforImg(row) {\r\n      this.$refs.uploadImgCpt.uploadImgPopupInit(row);\r\n    },\r\n    btn_pos: function() {\r\n      //滚动条的高度\r\n      var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\r\n      // var clientHeight=document.documentElement.clientHeight;\r\n      //滚动条的高度>可视区的高度\r\n      if (scrollTop > 200) {\r\n        this.local = false;\r\n      } else {\r\n        this.local = true;\r\n      }\r\n    },\r\n    // 批量更新SKU图片\r\n    updateSKUImg() {\r\n      if(this.salesInforData.length <= 0){\r\n        this.$message.error(\"请添加SKU！\");\r\n        return false;\r\n      }\r\n      const obj = {};\r\n      let arr = this.$common.deepCopy(this.salesInforData);\r\n      arr = arr.reduce((item, next) => {\r\n        obj[next.colorCode] ? '' : obj[next.colorCode] = true && item.push({\r\n          color:next.color,\r\n          colorCode:next.colorCode\r\n        });\r\n        return item;\r\n      }, []);\r\n      this.$refs.BtchReplaceImgRef.propInit(arr);\r\n    },\r\n    // 批量更新图片发生改变时调用\r\n    btchImgChange(obj){\r\n      for (let i = 0; i < this.salesInforData.length; i++) {\r\n        if(this.salesInforData[i].colorCode == obj.colorCode){\r\n          this.salesInforData[i].image=obj.imgUrl;\r\n        }\r\n      }\r\n    },\r\n    //跳转某地\r\n    scrollToItem(item, index) {\r\n      if(index == this.toActive){\r\n        return;\r\n      }\r\n      this.toActive = index; //event.currentTarget.offsetTop\r\n      const currentY = document.documentElement.scrollTop || document.body.scrollTop;\r\n      let topNum = null;\r\n      switch (index) {\r\n        case 0:\r\n          this.scrollAnimation(currentY, 200);\r\n          break;\r\n        case 1:\r\n          topNum = this.$refs.productInfoRef.offsetTop;\r\n          this.scrollAnimation(currentY, topNum-10);\r\n          break;\r\n        case 2:\r\n          topNum = this.$refs.productTagsRef.offsetTop;\r\n          this.scrollAnimation(currentY, topNum-20);\r\n          break;\r\n        default:\r\n          topNum = this.$refs.productDescriptionRef.offsetTop;\r\n          this.scrollAnimation(currentY, topNum-20);\r\n          break;\r\n      }\r\n      topNum=null;\r\n    },\r\n    /**\r\n     * 动画垂直滚动到页面指定位置\r\n     * @param { Number } currentY 当前位置\r\n     * @param { Number } targetY 目标位置\r\n     */\r\n    scrollAnimation(currentY, targetY) {\r\n      // 计算需要移动的距离\r\n      let needScrollTop = targetY - currentY;\r\n      let _currentY = currentY;\r\n      setTimeout(() => {\r\n        // 一次调用滑动帧数，每次调用会不一样\r\n        const dist = Math.ceil(needScrollTop / 10);\r\n        _currentY += dist;\r\n        window.scrollTo(_currentY, currentY);\r\n        // 如果移动幅度小于十个像素，直接移动，否则递归调用，实现动画效果\r\n        if (needScrollTop > 10 || needScrollTop < -10) {\r\n          this.scrollAnimation(_currentY, targetY);\r\n        } else {\r\n          window.scrollTo(_currentY, targetY);\r\n        }\r\n      }, 1);\r\n    },\r\n    /**\r\n     * @description: 商品描述\r\n     * @param {type}\r\n     * @return:\r\n     */\r\n    //商品描述图片返回的数据\r\n    descriptionImgList(params) {\r\n      this.productFormData.productImages = params;\r\n    },\r\n    //商品描述视频返回的数据\r\n    descriptionVideoList(params) {\r\n      this.productFormData.productVideos = params;\r\n    },\r\n    //返回\r\n    goToReturn() {\r\n      if (this._type == \"edit\") {\r\n        this.$router.go(-1);\r\n      } else if (this._type == \"add\") {\r\n        this.$router.go(-2);\r\n      } else {\r\n        this.$router.go(-1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    //监听品名变化 放入数据中\r\n    \"productFormData.name\": function(newVal, oldVal) {\r\n      let _sales = this.productFormData.productInfoAttrs;\r\n      if (_sales <= 0) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < _sales.length; i++) {\r\n        _sales[i].productName = newVal;\r\n      }\r\n    },\r\n    //监听table 设置价格等\r\n    numberChange(item) {\r\n      let _sales = this.salesInforData;\r\n      if (_sales.length <= 0) {\r\n        return false;\r\n      }\r\n      for (let i = 0; i < _sales.length; i++) {\r\n        _sales[i].minThreshold = item.setMinThreshold;\r\n        _sales[i].retailPrice = item.setRetailPrice;\r\n        _sales[i].wholesalePrice = item.setWholesalePrice;\r\n        _sales[i].purchasePrice = item.setPurchasePrice;\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    //计算销售信息同设子属性\r\n    numberChange() {\r\n      const {\r\n        setMinThreshold,\r\n        setRetailPrice,\r\n        setWholesalePrice,\r\n        setPurchasePrice\r\n      } = this;\r\n      return {\r\n        setMinThreshold,\r\n        setRetailPrice,\r\n        setWholesalePrice,\r\n        setPurchasePrice\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.item-box {\r\n  padding: 0 30px 30px;\r\n}\r\n.fixed-item-nav {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 1030;\r\n  height: 64px;\r\n  width: 100%;\r\n  padding: 0 18px 0 212px;\r\n  font-size: 20px;\r\n \r\n  >ul{\r\n     background: #ffffff;\r\n     height: 64px;\r\n  width: 100%;\r\n   color: #333333;\r\n  display: flex;\r\n  padding-left: 20px;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-bottom: 1px solid #c3c7ce;\r\n  }\r\n  li {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    margin-right: 50px;\r\n  }\r\n\r\n  li.active {\r\n    color: #2290e8;\r\n  }\r\n\r\n  li:hover {\r\n    color: #2290e8;\r\n  }\r\n}\r\n\r\n.item-nav {\r\n  height: 64px;\r\n  font-size: 20px;\r\n  color: #333333;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-bottom: 1px solid #c3c7ce;\r\n  li {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    margin-right: 50px;\r\n  }\r\n\r\n  li.active {\r\n    color: #2290e8;\r\n  }\r\n\r\n  li:hover {\r\n    color: #2290e8;\r\n  }\r\n}\r\n\r\n.basic-wrap {\r\n  margin-top: 25px;\r\n}\r\n\r\n.info {\r\n  font-size: 18px;\r\n  color: #000000;\r\n  margin-bottom: 20px;\r\n  border-bottom: 1px solid #eeeeee;\r\n  font-weight: 100;\r\n}\r\nspan {\r\n  font-size: 16px;\r\n  color: #999999;\r\n  margin-left: 10px;\r\n  font-weight: 100;\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409eff;\r\n}\r\n\r\n.c_footer {\r\n  width: 100%;\r\n  height: 80px;\r\n  margin-top: 30px;\r\n}\r\n.img-form {\r\n  /deep/.el-form-item__content {\r\n    display: flex;\r\n    align-items: top;\r\n    justify-content: flex-start;\r\n    .input-w {\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n}\r\n.input-w {\r\n  margin-right: 10px;\r\n}\r\n\r\n.img-upload {\r\n  display: flex;\r\n  align-items: top;\r\n  justify-content: flex-start;\r\n  margin-right: 10px;\r\n  /deep/ .el-upload-list--picture {\r\n    margin-left: 10px;\r\n    margin-top: -10px;\r\n    max-width: 200px;\r\n    margin-right: 10px;\r\n  }\r\n}\r\n.el-icon-error {\r\n  padding-top: 8px;\r\n}\r\n.description-wrap {\r\n  .label {\r\n    font-size: 14px;\r\n    color: #000000;\r\n  }\r\n}\r\n// 外部\r\n.stage-wrap {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n  > h5 {\r\n    font-size: 14px;\r\n    font-weight: 100;\r\n    width: 80px;\r\n    flex: 0 0 auto;\r\n  }\r\n  .full {\r\n    min-width: 500px;\r\n    flex: 1;\r\n  }\r\n}\r\n.input-h{\r\n  height: 35px;\r\n}\r\n.left{\r\n  margin-left: 100px;\r\n}\r\n</style>\r\n"]}]}