{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\content\\operate\\mini_program.vue?vue&type=style&index=0&id=679387b7&lang=less&scoped=true&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\content\\operate\\mini_program.vue","mtime":1574160264908},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\css-loader\\index.js","mtime":1558492728478},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1558492728890},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\postcss-loader\\src\\index.js","mtime":1558492728823},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\less-loader\\dist\\cjs.js","mtime":1566193719488},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["\n@import \"../style/contentPublic.less\";\n.mini-program{\n  .page-main{display:flex;\n    .side {width: 240px;padding: 20px;margin-right: 0;background: #fff;}\n    .list-table{flex:1;background: 100%;background: #fff;padding: 24px;\n      .table-img{height: 30px;max-width: 200px;}\n    }\n    .check-link-list{\n      span{margin-left: 20px;}\n    }\n    .item-margin{\n      margin-top: 0;\n    }\n  }\n}\n\n",{"version":3,"sources":["mini_program.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"mini_program.vue","sourceRoot":"src/views/content/operate","sourcesContent":["<style lang=\"less\" scoped>\r\n  @import \"../style/contentPublic.less\";\r\n  .mini-program{\r\n    .page-main{display:flex;\r\n      .side {width: 240px;padding: 20px;margin-right: 0;background: #fff;}\r\n      .list-table{flex:1;background: 100%;background: #fff;padding: 24px;\r\n        .table-img{height: 30px;max-width: 200px;}\r\n      }\r\n      .check-link-list{\r\n        span{margin-left: 20px;}\r\n      }\r\n      .item-margin{\r\n        margin-top: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n</style>\r\n<template>\r\n  <div class=\"mini-program page-public\">\r\n    <div class=\"page-main\">\r\n      <!--侧边-->\r\n      <div class=\"side item-margin\">\r\n        <h4>运营模块</h4>\r\n        <el-tree ref=\"sideTree\" :data=\"sideData\" :props=\"sideDataProps\" :default-expand-all=\"true\" :expand-on-click-node=\"false\" highlight-current node-key=\"id\" @node-click=\"sideDataClick\"></el-tree>\r\n      </div>\r\n      <!--表格-->\r\n      <div class=\"list-table item-margin\">\r\n        <div class=\"page-main-btns\">\r\n          <el-button type=\"primary\" size=\"small\"  @click=\"addAndEdit(true)\">新增</el-button>\r\n        </div>\r\n        <el-table :data=\"tableData\" ref=\"dragTable\" style=\"width: 100%\"  row-key=\"id\">\r\n          <el-table-column type=\"index\" width=\"50\" label=\"序号\"></el-table-column>\r\n          <div v-if=\"checkSideRow.relationType === 0\" >\r\n            <el-table-column label=\"图片\">\r\n              <template slot-scope=\"scope\">\r\n                <img :src=\"scope.row.coverUrl\" alt=\"\" class=\"table-img\" v-if=\"scope.row.coverUrl\">\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"跳转类型\">\r\n              <template slot-scope=\"scope\">\r\n                {{ scope.row.linkType ? linkType[scope.row.linkType] : ''}}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column  prop=\"_linkInfo\" label=\"关联内容\"></el-table-column>\r\n          </div>\r\n          <el-table-column prop=\"conCatName\" label=\"关联内容分类\"  v-if=\"checkSideRow.relationType === 1\"></el-table-column>\r\n          <el-table-column label=\"操作\" width=\"160\">\r\n            <template slot-scope=\"scope\">\r\n              <el-button type=\"text\" size=\"small\" @click=\"addAndEdit(false, scope.row)\">编辑</el-button>\r\n              <el-button type=\"text\" size=\"small\"  @click=\"delTableItem(scope.row.id)\">删除</el-button>\r\n              <el-button type=\"text\" size=\"small\">移动</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </div>\r\n      <!--新增和编辑-->\r\n      <el-dialog :title=\"addAndEditFlag ? '新增' : '编辑'\" :visible.sync=\"dialogVisible\" width=\"40%\">\r\n        <el-form ref=\"form\" :model=\"addAndEditFormData\" label-width=\"80px\" :rules=\"rules\" v-if=\"checkSideRow.relationType === 0\" :key=\"checkSideRow.relationType\">\r\n          <el-form-item label=\"轮播图\" prop=\"coverUrl\">\r\n            <upload-img v-model=\"addAndEditFormData.coverUrl\" :content-txt=\"'点击上传'\"></upload-img>\r\n          </el-form-item>\r\n          <el-form-item label=\"选择链接\" prop=\"checkLinkList\" class=\"small-input\">\r\n            <el-button type=\"primary\" size=\"small\" @click=\"getLink\" v-if=\"!addAndEditFormData.checkLinkList.length\">新增</el-button>\r\n            <div v-for=\"item in addAndEditFormData.checkLinkList\" class=\"check-link-list\">{{item.linkTypeName}} 》 {{ item.detailsTypeName }} 》 {{ item.title }} <span><el-button type=\"text\" size=\"small\" @click=\"getLink\">更换</el-button></span> </div>\r\n            <p v-show=\"!addAndEditFormData.checkLinkList.length\">{{ addAndEditFormData.noContent }}</p>\r\n          </el-form-item>\r\n        </el-form>\r\n        <el-form ref=\"categoryForm\" :model=\"addAndEditCategoryFormData\" label-width=\"80px\" :rules=\"categoryRules\"  v-if=\"checkSideRow.relationType === 1\"  :key=\"checkSideRow.relationType\">\r\n          <el-form-item label=\"分类\" prop=\"categoryTreeValue\">\r\n            <el-cascader :options=\"categoryTreeList\" v-model=\"addAndEditCategoryFormData.categoryTreeValue\" :props=\"categoryTreeListProps\">\r\n            </el-cascader>\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\" size=\"small\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"addAndEditSub\" size=\"small\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n      <link-dialog ref=\"LinkDialog\" :check-link-list=\"addAndEditFormData.checkLinkList\"></link-dialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  import UploadImg from '@/components/editor/UploadImg.vue'\r\n  import LinkDialog from '@/views/content/operate/components/LinkDialog.vue'\r\n  import Sortable from 'sortablejs'\r\n  export default {\r\n    name: 'mini_program',\r\n    // 数据\r\n    data() {\r\n      return {\r\n        // 左侧数据\r\n        sideData: [],\r\n        // 选中的行\r\n        checkSideRow: {},\r\n        // 左侧数据映射\r\n        sideDataProps: {\r\n          children: 'children',\r\n          label: 'name'\r\n        },\r\n        // 表格数据\r\n        tableData:[],\r\n        // 链接类型\r\n        linkType: {\r\n          1: '内容链接',\r\n          2: '商品链接',\r\n          3: '外部链接'\r\n        },\r\n        detailsType: {\r\n          1: '视频',\r\n          2: '小视频',\r\n          3: '图集',\r\n          4: '文章',\r\n          5: '定制单品',\r\n          6: '定制套装',\r\n          7: '标准商品'\r\n        },\r\n        // 新增和编辑\r\n        // 是否显示\r\n        dialogVisible: false,\r\n        // 编辑的行\r\n        checkTableRow: {},\r\n        // 编辑还是新增  新增 true  编辑false\r\n        addAndEditFlag: true,\r\n        // 首页banner\r\n        // 编辑新增提交的表单\r\n        addAndEditFormData: {\r\n          id: '',\r\n          coverUrl: '',\r\n          // 选中的链接\r\n          checkLinkList: [],\r\n        },\r\n        // 验证\r\n        rules: {\r\n          coverUrl: [\r\n            { type: 'string',required: true, message: '请上传轮播图', trigger: 'blur' }\r\n          ],\r\n          checkLinkList: [\r\n            { type: 'array',required: true, message: '请选择关联', trigger: 'change' }\r\n          ]\r\n        },\r\n        /**\r\n         * 如果不是首页banner\r\n         */\r\n        // 分类选择验证\r\n        categoryRules: {\r\n          categoryTreeValue: [\r\n            { type: 'array',required: true, message: '请选择分类', trigger: 'change' }\r\n          ]\r\n        },\r\n        // 选中的分类\r\n        addAndEditCategoryFormData: {\r\n          categoryTreeValue: []\r\n        },\r\n        // 分类数据\r\n        categoryTreeList: [],\r\n        // 分类映射\r\n        categoryTreeListProps:{\r\n          value: '_flag',\r\n          label: 'name',\r\n          children: 'children',\r\n        }\r\n      }\r\n    },\r\n    // 组件\r\n    components: {\r\n      UploadImg,\r\n      LinkDialog\r\n    },\r\n    // 初始化数据\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        // 获取左侧数据\r\n        this.getSideData()\r\n        // 初始行拖拽\r\n        this.rowDrop()\r\n      })\r\n    },\r\n    // keepAlive 页面显示时\r\n    activated() {\r\n      this.getTableData();\r\n    },\r\n    // 方法\r\n    methods: {\r\n      // 获取左侧数据\r\n      getSideData() {\r\n        this.request(this.api.contentCore.module_tree_list, {}).then(data => {\r\n          if(data && data.length){\r\n            this.sideData =  data\r\n            // 获取默认选中的\r\n            this.$nextTick(() => {\r\n              const row = data[0].children[0]\r\n              this.checkSideRow = row\r\n              this.$refs.sideTree.setCurrentKey(row.id)\r\n              this.getTableData(row)\r\n            })\r\n          }\r\n        });\r\n      },\r\n      // 获取表格数据\r\n      getTableData(row) {\r\n        this.request(this.api.contentCore.manage_list, {modelId: row.id, orderBy: 'sort', relationType: row.relationType }).then(data => {\r\n          if(data.data && data.data.length){\r\n            data.data.forEach(item => {\r\n              if(item.linkType == 1 && item.contentPasses && item.contentPasses.length > 0){\r\n                item._linkInfo = this.detailsType[item.detailsType] + ' 》 ' + item.contentPasses[0].title\r\n              }else if(item.productName && item.linkType == 2 ){\r\n                item._linkInfo = this.detailsType[item.detailsType] + ' 》 ' + item.productName\r\n              }else if(item.url && item.linkType == 3 ){\r\n                item._linkInfo = item.url\r\n              }else {\r\n                item._linkInfo = '关联的'+ this.detailsType[item.detailsType] + '不存在或已下线'\r\n              }\r\n            })\r\n          }\r\n          this.tableData =  data.data\r\n        });\r\n      },\r\n      // 表格行删除\r\n      delTableItem(id){\r\n        this.$confirm('确认删除吗？', '删除', {\r\n          confirmButtonText: '确认',\r\n          cancelButtonText: '取消',\r\n          showClose:false\r\n        }).then(() => {\r\n          this.request(this.api.contentCore.manage_delete, {id: id}).then(data => {\r\n            this.$notify.success({ title: '成功',message: '删除成功'})\r\n            this.getTableData(this.checkSideRow)\r\n          });\r\n        }).catch(() => {\r\n        });\r\n\r\n      },\r\n      // 左侧数据行点击\r\n      sideDataClick(row, node, tree){\r\n        if( row.level > 1){\r\n          this.checkSideRow = row\r\n          this.getTableData(row)\r\n        }\r\n      },\r\n      // 表格行拖拽\r\n      rowDrop() {\r\n        const tbody = this.$refs.dragTable.$el.querySelector('.el-table__body-wrapper > table > tbody')\r\n        const _this = this\r\n        Sortable.create(tbody, {\r\n          onEnd({ newIndex, oldIndex }) {\r\n            if(newIndex === oldIndex) return\r\n            const currRow = _this.tableData.splice(oldIndex, 1)[0]\r\n            _this.tableData.splice(newIndex, 0, currRow)\r\n            let listData = _this.tableData.map((item,index) => {\r\n              return {\r\n                id: item.id,\r\n                sort: ++index\r\n              }\r\n            })\r\n            _this.request(_this.api.contentCore.manage_move, listData).then(data => {\r\n              _this.$notify.success({ title: '成功',message: '移动成功'})\r\n            });\r\n\r\n          }\r\n        })\r\n      },\r\n      // 新增和编辑显示\r\n      addAndEdit(flag,row){\r\n\r\n        if(flag){\r\n          if(this.checkSideRow.relationType === 0){\r\n            this.addAndEditFormData = {\r\n              coverUrl: '',\r\n              noContent: '',\r\n              checkLinkList: []\r\n            }\r\n          }\r\n          if(this.checkSideRow.relationType === 1){\r\n            this.addAndEditCategoryFormData = {\r\n              categoryTreeValue : []\r\n            }\r\n            this.getCategoryTreeList()\r\n          }\r\n        }else {\r\n          if(this.checkSideRow.relationType === 0){\r\n            // 内容\r\n            if(row.linkType == 1 && row.contentPasses && row.contentPasses.length > 0){\r\n              this.addAndEditFormData = {\r\n                checkLinkList: [{\r\n                  title: row.contentPasses[0].title,\r\n                  url: row.url,\r\n                  linkType: row.linkType,\r\n                  linkTypeName: this.linkType[row.linkType],\r\n                  detailsType: row.detailsType,\r\n                  detailsTypeName: this.detailsType[row.detailsType]\r\n                }],\r\n                coverUrl: row.coverUrl,\r\n                id: row.id\r\n              }\r\n              // 商品\r\n            }else if(row.linkType == 2 && row.productName){\r\n              this.addAndEditFormData = {\r\n                checkLinkList: [{\r\n                  title: row.productName,\r\n                  url: row.url,\r\n                  linkType: row.linkType,\r\n                  linkTypeName: this.linkType[row.linkType],\r\n                  detailsType: row.detailsType,\r\n                  detailsTypeName: this.detailsType[row.detailsType]\r\n                }],\r\n                coverUrl: row.coverUrl,\r\n                id: row.id\r\n              }\r\n\r\n              // 则为链接\r\n            }else if(row.linkType == 1 && row.url){\r\n\r\n            }else{\r\n              this.addAndEditFormData = {\r\n                checkLinkList: [],\r\n                noContent: `关联的${this.detailsType[row.detailsType]}不存在或已下线`,\r\n                coverUrl: row.coverUrl\r\n              }\r\n            }\r\n          }\r\n          if(this.checkSideRow.relationType === 1){\r\n            this.checkTableRow = row\r\n            let check = [row.identifier]\r\n            if(row.identifier.indexOf('$') > -1){\r\n              check = row.identifier.split('$')\r\n            }\r\n            this.addAndEditCategoryFormData.categoryTreeValue = check\r\n            this.getCategoryTreeList()\r\n          }\r\n        }\r\n        this.addAndEditFlag = flag\r\n        this.dialogVisible = true\r\n      },\r\n      // 获取链接关联\r\n      getLink(){\r\n        this.$refs.LinkDialog.linkDialog = true\r\n        this.$refs.LinkDialog.init()\r\n      },\r\n      // 新增编辑提交\r\n      addAndEditSub(){\r\n        // 新增url\r\n        let url\r\n        if(!this.addAndEditFlag){\r\n          // 编辑url\r\n          url = this.api.contentCore.manage_edit\r\n        }else {\r\n          // 新增 url\r\n          url = this.api.contentCore.manage_save\r\n        }\r\n        // relationType  0 首页banner   1  其他\r\n        if(this.checkSideRow.relationType === 0){\r\n          this.$refs.form.validate((valid) => {\r\n            if (valid) {\r\n              let params = this.addAndEditFormData.checkLinkList[0]\r\n              params.coverUrl = this.addAndEditFormData.coverUrl\r\n              params.id = this.addAndEditFormData.id\r\n              this.addAndEditSubSend(url, params)\r\n            } else {\r\n              return false;\r\n            }\r\n          });\r\n        }\r\n        if(this.checkSideRow.relationType === 1){\r\n          this.$refs.categoryForm.validate((valid) => {\r\n            if (valid && this.addAndEditCategoryFormData.categoryTreeValue.length) {\r\n              const ary = this.addAndEditCategoryFormData.categoryTreeValue[this.addAndEditCategoryFormData.categoryTreeValue.length-1].split('&')\r\n              const formData = {\r\n                conCatId: ary[0],\r\n                conCatName: ary[1],\r\n                coverUrl: ary[2],\r\n                identifier: this.addAndEditCategoryFormData.categoryTreeValue.join('$'),\r\n                id: this.checkTableRow.id\r\n              }\r\n              this.addAndEditSubSend(url, formData)\r\n            } else {\r\n              return false;\r\n            }\r\n          });\r\n\r\n        }\r\n\r\n\r\n\r\n      },\r\n      addAndEditSubSend(url, formData){\r\n        // 左侧菜单id\r\n        formData.modelId = this.checkSideRow.id\r\n        this.request(url, formData).then(data => {\r\n          let msg = this.addAndEditFlag ? '新增成功' : '编辑成功'\r\n          this.$notify.success({ title: '成功',message: msg})\r\n          // 删除完初始化表格数据\r\n          this.getTableData(this.checkSideRow)\r\n          this.dialogVisible = false\r\n        })\r\n      },\r\n      // 获取分类tree\r\n      getCategoryTreeList(){\r\n        this.request(this.api.contentCore.category_tree_list, {}).then(data => {\r\n          if(data && data.length){\r\n            // 初始化数据\r\n            this.categoryTreeListInit(data)\r\n            this.categoryTreeList = data\r\n          }\r\n        });\r\n      },\r\n      // 初始数据\r\n      categoryTreeListInit(data){\r\n    if(data && data.length){\r\n      data.forEach((item)=>{\r\n        item._flag = item.id +'&'+ item.name + '&'+item.coverUrl\r\n        if(item.children){\r\n          if(item.children.length === 0){\r\n            delete item.children\r\n          }else {\r\n            this.categoryTreeListInit(item.children)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n    },\r\n    // 计算属性\r\n    computed: {},\r\n    // 监听数据变化\r\n    watch: {\r\n    }\r\n  }\r\n</script>\r\n"]}]}