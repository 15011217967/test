{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\workorder\\config\\workOrder_redact.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\workorder\\config\\workOrder_redact.vue","mtime":1572415123712},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from \"axios\";\r\nimport { getToken } from \"@/utils/auth\";\r\nimport codeSet from \"@/components/codeSet\";\r\nimport treeDept from \"@/components/treeDeptReturnObj\";\r\nimport { filter } from \"minimatch\";\r\nimport { get } from \"http\";\r\nimport { constants } from 'crypto';\r\nimport { exists } from 'fs';\r\nimport { async } from 'q';\r\nlet token = getToken();\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dept_obj:{},\r\n      // 名称校验集合\r\n      existObj:{},\r\n      // 具体单源默认value\r\n      TableSet_defalut:'请选择',\r\n      // 具体单源列表\r\n      TableSet_List:[],\r\n      jobOrderExtendObj_name:null,\r\n      // 源单编码列表\r\n      sourceOrderType_list:[{\r\n        id:'measuringWorkOrder',\r\n        name:'量体工单'\r\n      },{\r\n        id:'returnWorkOrder',\r\n        name:'回访工单'\r\n      },{\r\n        id:'consumerCustomizedOrder',\r\n        name:'定制订单'\r\n      },{\r\n        id:'consumerReservationOrder',\r\n        name:'预约订单'\r\n      },{\r\n        id:'wideningWorkOrder',\r\n        name:'加宽量工单'\r\n      },{\r\n        id:'factoryWorkOrder',\r\n        name:'工厂下单工单'\r\n      },{\r\n        id:'factoryTrackingWorkOrder',\r\n        name:'工厂跟踪工单'\r\n      },{\r\n        id:'incrementWorkOrder',\r\n        name:'增值服务工单'\r\n      },],\r\n      // 新建表单提交数据\r\n      jobOrderExtendObj: {\r\n        busType: \"\", // 业务类型\r\n        currentUser: \"\",\r\n        dept: \"\",// 适用部门\r\n        layout: \"\",// 工单排版\r\n        name: \"\",// 工单名称\r\n        priority: '',// 优先级\r\n        serveType: \"\",// 服务类型\r\n        sourceOrderParams: {\r\n          sourceOrderChild: \"\"\r\n        },\r\n        tableItems: [\r\n          {\r\n            codeName: \"\",\r\n            currentUser: \"\",\r\n            id: \"\",\r\n            inputType: \"\",\r\n            isRead: 0,\r\n            itemAlias: \"\",\r\n            itemCode: \"\",\r\n            itemName: \"\",\r\n            itemType: 0,\r\n            jdbcType: \"\",\r\n            length: 0,\r\n            linkItemName: \"\",\r\n            linkTable: \"\",\r\n            nullAble: true,\r\n            precisions: 0,\r\n            primaryKey: true,\r\n            remarks: \"\",\r\n            sort: 0,\r\n            status: 0,\r\n            tableSetId: \"\",\r\n            visible: true\r\n          }\r\n        ],\r\n        tableSets: [\r\n          {\r\n            alias: \"\",\r\n            code: \"\",\r\n            currentUser: \"\",\r\n            dataSourceId: \"\",\r\n            id: \"\",\r\n            linkType: 0,\r\n            orderExtendId: \"\",\r\n            remarks: \"\",\r\n            sort: 0,\r\n            sourceChileType: \"\",\r\n            sourceOrderType: \"\",\r\n            status: 0,\r\n            tableCn: \"\",\r\n            tableId: \"\",\r\n            tableName: \"\",\r\n            type: 0\r\n          }\r\n        ],\r\n        workOrderProcessItem: []\r\n      },\r\n      // 父类选择对象备份\r\n      tableSetsObj:{},\r\n      // 子类选择对象备份\r\n      tableItemsObj:{},\r\n      // 配置选项\r\n      listMapArr:[],\r\n      formInline: {\r\n        user: \"\",\r\n        region: \"\"\r\n      },\r\n      filtersData: {\r\n        pageIndex: 1, //当前页码\r\n        pageSize: 10, //每页数量\r\n        used: null, //有效状态\r\n        filter: \"\", //搜索关键字\r\n        startDate: \"\",\r\n        endDate: \"\"\r\n      },\r\n      currentPage: 1, // 当前页数\r\n      total: 130, //总条目数\r\n      value: \"\",\r\n      storageValArr: '',\r\n      // 指派单选框\r\n      radio: \"1\",\r\n      // 指派\r\n      options: [{\r\n          value: '01',\r\n          label: '三栏'\r\n        }, {\r\n          value: '02',\r\n          label: '四栏'\r\n        }],\r\n         // 指派\r\n      prioritys: [{\r\n          value: '01',\r\n          label: '高'\r\n        },{\r\n          value: '02',\r\n          label: '中'\r\n        },{\r\n          value: '03',\r\n          label: '低'\r\n        }],\r\n        value: '',\r\n      dialogTableVisible: false,\r\n      dialogFormVisible: false,\r\n      form: {\r\n        name: \"\",\r\n        region: \"\",\r\n        date1: \"\",\r\n        date2: \"\",\r\n        delivery: false,\r\n        type: [],\r\n        resource: \"\",\r\n        desc: \"\"\r\n      },\r\n      formLabelWidth: \"120px\"\r\n    };\r\n  },\r\n  created() {\r\n    this.getTableSet_List();\r\n    this.jobOrderExtendGet(this.$route.query.id);\r\n    // this.tableItemListByOrderExtendId(this.$route.query.id);\r\n\r\n    console.log(this.$route.query)\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    /**\r\n     * 获取工单类型扩展\r\n     */\r\n    jobOrderExtendGet(id) {\r\n      const that = this;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.jobOrderExtendGet,\r\n        {\r\n          id\r\n        }\r\n      ).then(res=>{\r\n        that.jobOrderExtendObj = res;\r\n        that.jobOrderExtendObj_name = JSON.parse(JSON.stringify(that.jobOrderExtendObj.name));\r\n        // 所属部门回显\r\n        that.dept_obj = {\r\n          id:res.dept,\r\n          name:res.deptName\r\n        };\r\n        that.tableItemGetListMap({\r\n          id:res.sourceOrderParams.sourceOrderChild,\r\n          // tableCn:findItem.tableCn\r\n        });\r\n      });\r\n    },\r\n    /**\r\n     * 根据源单获取所有子表数据项\r\n     */\r\n    tableItemListByOrderExtendId(id) {\r\n      const that = this;\r\n\r\n      this.request(\r\n        that.api.job_order.tableItemListByOrderExtendId,\r\n        {\r\n          orderExtendId: id\r\n        }\r\n      ).then(res => {\r\n      let tableItemListByWorkOrderCodeArr =[];\r\n        // 处理配置单源数据字段\r\n        res.forEach((item, index) => {\r\n          if(item.type == 0) that.TableSet_defalut = item.tableCn;\r\n          item.sublist.forEach((items, indexs) => {\r\n            // if(items.visible == false) return;\r\n            tableItemListByWorkOrderCodeArr.push(items);\r\n          })\r\n        });\r\n        console.log(tableItemListByWorkOrderCodeArr)\r\n        // 点亮字段勾选\r\n        tableItemListByWorkOrderCodeArr.forEach((itemArr, indexArr) => {\r\n          let isRead = null,\r\n              index = null,\r\n              indexs = null,\r\n              tableSetsObj = null,\r\n              obj = {};\r\n          if(itemArr.visible == false) return;\r\n          that.listMapArr.forEach((item, index) => {\r\n            item.sublist.forEach((items, indexs) => {\r\n              if(items.itemName ==  itemArr.itemName) {\r\n                obj = {\r\n                  isRead : true,\r\n                  index : index,\r\n                  indexs : indexs,\r\n                  tableSetsObj : item\r\n                }\r\n                return;\r\n              }\r\n            })\r\n          });\r\n          console.log(obj)\r\n          that.selectChilder(obj.isRead, obj.index, obj.indexs, obj.tableSetsObj);\r\n          that.listMapArr[obj.index].sublist[obj.indexs].isRead = itemArr.isRead;\r\n          that.listMapArr[obj.index].sublist[obj.indexs].request = itemArr.request;\r\n          that.changeRadioChild(itemArr.isRead, obj.index);\r\n        });\r\n        console.log(that.listMapArr);\r\n        console.log(tableItemListByWorkOrderCodeArr);\r\n      });\r\n    },\r\n    /**\r\n     * 改变父单选框\r\n     * @param { Boolean } isRead 是否选中状态\r\n     * @param { Number } index 当前索引\r\n     */\r\n    changeRadioParent(isRead, index) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n        listMapArr[index].sublist.forEach((items, index) => {\r\n          items.isRead = isRead;\r\n        })\r\n      console.log(listMapArr[index].sublist)\r\n\r\n    },\r\n    /**\r\n     * 改变子单选框\r\n     * @param { Boolean } isRead 子选框选中状态\r\n     * @param { Number } index 当前索引\r\n     */\r\n    changeRadioChild(isRead, index) {\r\n      var that = this,\r\n            listMapArr = that.listMapArr,\r\n            isRadioParent;\r\n      // 如果选择的是左侧的选框，当全部子选框被选中时，父级选框被勾选，否则取消勾选\r\n      if(isRead) {\r\n        isRadioParent = listMapArr[index].sublist.every((item) => {\r\n          return item.isRead === 1;\r\n        });\r\n        listMapArr[index].isRead = isRadioParent ?  1 : null;\r\n      }else{\r\n        isRadioParent = listMapArr[index].sublist.every((item) => {\r\n          return item.isRead === 0;\r\n        });\r\n        listMapArr[index].isRead = isRadioParent ? 0 : null;\r\n      };\r\n      console.log(listMapArr[index].sublist)\r\n      console.log(that.tableItemsObj)\r\n    },\r\n    /**\r\n     * 获取具体单源列表\r\n     */\r\n    getTableSet_List() {\r\n      const that = this;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.getTableSet_List,\r\n        {\r\n          isSourceOrder:1\r\n        }\r\n      ).then(res=>{\r\n        that.TableSet_List = res.data;\r\n      });\r\n    },\r\n    /**\r\n     * 获取工单配置内容\r\n     * @param { String } selval.id 请求id\r\n     */\r\n    tableItemGetListMap(selVal) {\r\n      const that = this;\r\n\r\n      that.jobOrderExtendObj.sourceOrderParams.sourceOrderChild = selVal.id;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.tableItemGetListMap,\r\n        {\r\n          tableSetId: selVal.id\r\n        }\r\n      ).then(res=>{\r\n        // 数据初始化放在最前面做\r\n        res.forEach((item, index) => {\r\n          item.checked = false;\r\n          // json名称修改\r\n          item.sourceTableId = item.id;\r\n          delete item.id;\r\n          item.checkedLength = 0;\r\n          item.radioLength = 0;\r\n          item.isShow = false;\r\n          item.isRead = '';\r\n          item.sublist.forEach((items, indexs) => {\r\n            items.checked = false;\r\n            items.request = false;\r\n            items.isRead = '';\r\n          })\r\n        });\r\n        /**\r\n         * 拷贝一份配置选项，为了删除sublist中visible为false的附加选，不然操作会出错\r\n         * 但是最后如果选择了子单，是需要把这个删除项带上的，所以要准备一个暂时备份\r\n         */\r\n        this.listMapArr_backup = JSON.parse(JSON.stringify(res));\r\n        // 删除res下sublist中visible为false的项；\r\n        res.forEach((item, index) => {\r\n          let find_Visible_false = item.sublist.findIndex((items, indexs) => {\r\n            return items.visible == false;\r\n          });\r\n          if(find_Visible_false != -1) {\r\n            item.sublist.splice(find_Visible_false, 1);\r\n          };\r\n        });\r\n        that.listMapArr = res;\r\n        that.tableItemListByOrderExtendId(this.$route.query.id);\r\n      });\r\n    },\r\n    /**\r\n     * 新建工单\r\n     */\r\n    async saveJobOrder() {\r\n      const that = this,\r\n            _tableSetsObj = Object.values(that.tableSetsObj) || [],\r\n            _tableItemsObj = Object.values(that.tableItemsObj) || [],\r\n            jobOrderExtendObj = that.jobOrderExtendObj;\r\n\r\n      Object.assign(that.jobOrderExtendObj, {\r\n        dept:this.dept_obj.id,\r\n        deptName:this.dept_obj.name\r\n      });\r\n      // 文本框校验\r\n      if(!jobOrderExtendObj.busType) {\r\n        that.warn('请选择业务类型！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.serveType) {\r\n        that.warn('请选择服务类型！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.dept) {\r\n        that.warn('请选择适用部门！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.serveType) {\r\n        that.warn('请选择优先级！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.name) {\r\n        that.warn('工单名称不能为空！');\r\n        return;\r\n      };\r\n      /**\r\n      * 名称校验\r\n      */\r\n     // 名字不能重复，编辑获取的名字不做检验\r\n      if(that.jobOrderExtendObj_name != jobOrderExtendObj.name) {\r\n        let list = await that.request(\r\n          that.api.job_order.jobOrderExtend_validation,\r\n          {\r\n            name:jobOrderExtendObj.name,\r\n            sourceOrderParams:that.jobOrderExtendObj.sourceOrderParams\r\n          }\r\n        );\r\n        if(!list.exist) {\r\n          that.warn(list.msg);\r\n          return;\r\n        };\r\n      };\r\n      if(!jobOrderExtendObj.layout) {\r\n        that.warn('请选择工单排版！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.sourceOrderParams.sourceOrderType) {\r\n        that.warn('请选择源单编码！');\r\n        return;\r\n      };\r\n      if(that.TableSet_defalut=='请选择') {\r\n        that.warn('请选择具体单源！');\r\n        return;\r\n      };\r\n      if(_tableSetsObj.length === 0) {\r\n        that.warn('请配置流转数据！');\r\n        return;\r\n      };\r\n      let detectionRadio = _tableItemsObj.find(item => {\r\n        return typeof item.isRead != 'number';\r\n      })\r\n      console.log(that.tableItemsObj)\r\n      console.log(_tableItemsObj)\r\n      if(detectionRadio){\r\n          that.warn(`请设置${detectionRadio.itemName}是否可读写！`);\r\n          return;\r\n      };\r\n      // 提交之前深拷贝，删除无用子类\r\n      let tableSetsData = JSON.parse(JSON.stringify(_tableSetsObj));\r\n      let tableItemsData = JSON.parse(JSON.stringify(_tableItemsObj));\r\n      let sourceOrderItem = tableSetsData.find((item, index) => {\r\n        return item.type == 0;\r\n      })\r\n      // 把隐藏项带入tableItemsData\r\n      this.listMapArr.forEach((item, index) => {\r\n        // 如果是主数据则终止\r\n        if(item.type == 0) return;\r\n        let isChecked = item.sublist.some(x => {\r\n          return x.checked == true;\r\n        })\r\n        if(isChecked) {\r\n          let UUID = that.listMapArr_backup[index].sublist.find(x => {\r\n            return x.visible == false;\r\n          });\r\n          if(UUID) tableItemsData.push(UUID);\r\n        }\r\n      });\r\n      console.log(tableItemsData)\r\n      // 删除无用子类\r\n      tableSetsData.forEach((item, index) => {\r\n        delete item.sublist;\r\n      });\r\n      let data = Object.assign(JSON.parse(JSON.stringify(that.jobOrderExtendObj)), {\r\n        tableSets: tableSetsData,\r\n        tableItems: tableItemsData\r\n      });\r\n      console.log(1)\r\n      // return;\r\n      this.request(\r\n        this.api.job_order.jobOrderExtend_update,\r\n        data\r\n      ).then(res=>{\r\n          that.warn('工单编辑成功！','success');\r\n          that.href('workOrder_new_list');\r\n      });\r\n    },\r\n    /**\r\n     * 选择一级菜单\r\n     * @param { Boolean } isChecked 是否选中状态\r\n     * @param { Number } index 父级索引\r\n     * @param { Object } tableSetsObj 当前选中数据集合\r\n     */\r\n    selectParent(isChecked, index, tableSetsObj) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n      if (isChecked) {\r\n        // 全选视图逻辑\r\n        listMapArr[index].sublist.forEach((item, i) => {\r\n          item.checked = true;\r\n        });\r\n        listMapArr[index].checkedLength = listMapArr[index].sublist.length;\r\n        // 数据存入父类备份集合\r\n        that.tableSetsObj[index] = tableSetsObj;// 以对象形式存入父类\r\n        // 数据存入子类备份集合\r\n        tableSetsObj.sublist.forEach((subItem, subIndex) => {\r\n          that.tableItemsObj[parseInt(`${index}${subIndex}`)] = subItem;// 以他们的索引拼接为对象名如：00、01、10。为了删除时方便，注意得存入数字类型，下面提交要排序\r\n        });\r\n      } else {\r\n        // 全选视图逻辑\r\n        listMapArr[index].sublist.forEach((item, i) => {\r\n          item.checked = false;\r\n        });\r\n        listMapArr[index].checkedLength = 0;\r\n        // 删除父类备份集合数据\r\n        delete that.tableSetsObj[index];\r\n        // 删除子类备份集合数据\r\n        tableSetsObj.sublist.forEach((subitems, subIndexs) => {\r\n          delete that.tableItemsObj[parseInt(`${index}${subIndexs}`)];\r\n        });\r\n      }\r\n        console.log(that.tableSetsObj);\r\n        console.log(that.tableItemsObj);\r\n    },\r\n    /**\r\n     * 选择二级菜单\r\n     * @param { Boolean } isChecked 是否选中状态\r\n     * @param { Number } index 父级索引\r\n     * @param { Number } indexs 子级索引\r\n     * @param { Object } tableSetsObj 当前选中数据集合\r\n     */\r\n    selectChilder(isChecked, index, indexs, tableSetsObj) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n      // 子元素选中计数\r\n      if (isChecked) {\r\n        listMapArr[index].checkedLength++;\r\n        tableSetsObj.sublist[indexs].createTime =new Date().toISOString();\r\n        that.tableSetsObj[index] = tableSetsObj;\r\n        that.tableItemsObj[parseInt(`${index}${indexs}`)] = tableSetsObj.sublist[indexs];\r\n        tableSetsObj.sublist[indexs].checked = isChecked;\r\n      } else {\r\n        listMapArr[index].checkedLength--;\r\n        if(listMapArr[index].checkedLength == 0) {\r\n          delete that.tableSetsObj[index];\r\n        }\r\n        delete that.tableItemsObj[parseInt(`${index}${indexs}`)];\r\n      }\r\n      // 判断子元素是否全部选中\r\n      if (listMapArr[index].checkedLength === listMapArr[index].sublist.length) {\r\n        listMapArr[index].checked = true;\r\n      } else {\r\n        listMapArr[index].checked = false;\r\n      }\r\n      console.log(that.tableSetsObj);\r\n      console.log(that.tableItemsObj);\r\n    },\r\n    /**\r\n     * 控制二级分类显示或者隐藏\r\n     * @param { Number } index 当前索引\r\n     */\r\n    click_isShow(index) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n      listMapArr[index].isShow = !listMapArr[index].isShow;\r\n    },\r\n    /**\r\n     * 跳转工单详情\r\n     * @param { String } routeName 路由名称\r\n     */\r\n    href(routeName) {\r\n      this.$router.push({\r\n        path: `/${routeName}`,\r\n        name: routeName\r\n      });\r\n    },\r\n    /**\r\n     * 提示\r\n     */\r\n    warn(message, type) {\r\n      this.$message({\r\n        message: message,\r\n        type: type || 'warning'\r\n      });\r\n    },\r\n    /**\r\n     * 模糊搜索\r\n     */\r\n    handleSearch() {},\r\n    /**\r\n     * 搜索重置\r\n     */\r\n    handleResetFilters() {}\r\n  },\r\n  components: {\r\n    codeSet,\r\n    treeDept\r\n  }\r\n};\r\n",{"version":3,"sources":["workOrder_redact.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"workOrder_redact.vue","sourceRoot":"src/views/workorder/config","sourcesContent":["<!-- 创建新工单 -->\r\n<template>\r\n  <div>\r\n    <!-- 指派 -->\r\n    <el-dialog title=\"预览\" :visible.sync=\"dialogTableVisible\">\r\n      <el-form class=\"item-form previewVisible-list\" size=\"small\" :inline=\"true\" :model=\"formInline\">\r\n        <!-- 模糊查询 -->\r\n        <el-form-item class=\"item\" :label=\"item.itemName\" width=\"200\" :key=\"item.id\" v-for=\"item in tableItemsObj\">\r\n          <el-input disabled value=\"--\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogTableVisible = false\" size=\"small\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"dialogTableVisible = false\" size=\"small\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    <!-- 新建工单 -->\r\n    <div class=\"item-margin\" style=\"height:100%;\">\r\n      <div class=\"item-form\">\r\n        <div class=\"mt-30\">工单定义</div>\r\n        <el-form class=\"item-form\" size=\"small\" :inline=\"true\" :model=\"jobOrderExtendObj\">\r\n          <section class=\"extend-list\">\r\n            <!-- 业务类型 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"业务类型：\">\r\n                <code-set v-model=\"jobOrderExtendObj.busType\" code=\"CEN012\" :multiple=\"false\"/>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 服务类型 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"服务类型：\">\r\n                <code-set v-model=\"jobOrderExtendObj.serveType\" code=\"CEN013\" :multiple=\"false\"/>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 适用部门 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"适用部门：\">\r\n                <tree-dept\r\n                  v-model=\"dept_obj\"\r\n                  val-type=\"id\"\r\n                  :sel-type=\"1\"\r\n                  :default-expand-all=\"true\"\r\n                ></tree-dept>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 优先级 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"优先级：\">\r\n                <el-select  v-model=\"jobOrderExtendObj.priority\"  placeholder=\"请选择\">\r\n                  <el-option  v-for=\"item in prioritys\"  :label=\"item.label\" :key=\"item.value\" :value=\"item.value\"></el-option>\r\n                </el-select>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 工单名称 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"工单名称：\">\r\n                <el-input style=\"width:199px;\" v-model=\"jobOrderExtendObj.name\" placeholder=\"请输入内容\"></el-input>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 工单排版 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"工单排版：\">\r\n                <el-select v-model=\"jobOrderExtendObj.layout\" placeholder=\"请选择\">\r\n                  <el-option\r\n                    v-for=\"item in options\"\r\n                    :key=\"item.value\"\r\n                    :label=\"item.label\"\r\n                    :value=\"item.value\">\r\n                  </el-option>\r\n                </el-select>\r\n              </el-form-item>\r\n            </div>\r\n            <!-- 源单编码 -->\r\n            <div class=\"item\">\r\n              <i class=\"colorRed\">*</i>\r\n              <el-form-item label=\"源单编码：\">\r\n                <el-select disabled v-model=\"jobOrderExtendObj.sourceOrderParams.sourceOrderType\">\r\n                  <el-option\r\n                    v-for=\"(item, index) in sourceOrderType_list\"\r\n                    :value=\"item.id\"\r\n                    :label=\"item.name\"\r\n                    :key=\"index\"></el-option>\r\n                </el-select>\r\n              </el-form-item>\r\n            </div>\r\n          </section>\r\n        </el-form>\r\n        <!-- 工单配置内容 -->\r\n        <div class=\"mt-30\">工单配置内容</div>\r\n        <el-form class=\"item-form\" size=\"small\" :inline=\"true\" :model=\"formInline\">\r\n          <i class=\"colorRed\">*</i>\r\n          <el-form-item prop=\"parentName\" label=\"具体源单：\">\r\n            <el-select v-model=\"TableSet_defalut\" disabled value-key=\"id\" @change=\"tableItemGetListMap\">\r\n              <el-option v-for=\"(item, index) in TableSet_List\" :value=\"item\" :label=\"item.tableCn\" :key=\"item.id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n        </el-form>\r\n        <!-- 配置字段 -->\r\n        <div class=\"display-flex\" v-if=\"listMapArr.length\">\r\n          <i class=\"colorRed\" style=\"line-height:19px\">*</i>\r\n          <span>配置流转数据：</span>\r\n          <div class=\"tree\">\r\n            <div class=\"tree-title text-center\">\r\n              <span>源单数据</span>\r\n              <span>是否可读写</span>\r\n              <span>关联数据</span>\r\n            </div>\r\n            <!-- 一级分类 -->\r\n            <ul>\r\n              <li v-for=\"(item, index) in listMapArr\" :key=\"index\">\r\n                <div class=\"justify-content content\">\r\n                  <span class=\"l\">\r\n                    <el-checkbox\r\n                      class=\"ml-20\"\r\n                      @change=\"selectParent(item.checked, index, item)\"\r\n                      v-model=\"item.checked\">\r\n                    </el-checkbox>\r\n                    <i @click=\"click_isShow(index)\">\r\n                      <i :class=\"item.isShow ? 'el-icon-minus' : 'el-icon-plus'\"></i>\r\n                      {{ item.tableCn }}\r\n                    </i>\r\n                  </span>\r\n                  <span class=\"r\">\r\n                    <template>\r\n                      <el-radio-group v-model=\"item.isRead\" @change=\"changeRadioParent(item.isRead, index)\">\r\n                        <el-radio :disabled=\"!item.checked\" :label=\"1\">可读写</el-radio>\r\n                        <el-radio :disabled=\"!item.checked\" :label=\"0\">只读</el-radio>\r\n                      </el-radio-group>\r\n                    </template>\r\n                  </span>\r\n                  <span class=\"r\"></span>\r\n                </div>\r\n                <!-- 二级分类 -->\r\n                <ul v-if=\"item.sublist && item.sublist.length > 0 && item.isShow\">\r\n                  <li v-for=\"(items, indexs) in item.sublist\" v-if=\"items.visible\" :key=\"indexs\">\r\n                    <div class=\"justify-content content\">\r\n                      <span class=\"l text-index10\">\r\n                        <el-checkbox\r\n                          class=\"ml-20\"\r\n                          @change=\"selectChilder(items.checked, index, indexs, item)\"\r\n                          v-model=\"items.checked\"\r\n                        >{{ items.itemName }}</el-checkbox>\r\n                      </span>\r\n                      <span class=\"r\">\r\n                        <template>\r\n                          <el-radio-group v-model=\"items.isRead\" @change=\"changeRadioChild(items.isRead, index)\">\r\n                            <el-radio :disabled=\"!items.checked\"  :label=\"1\">可读写</el-radio>\r\n                            <el-radio :disabled=\"!items.checked\" :label=\"0\">只读</el-radio>\r\n                          </el-radio-group>\r\n                        </template>\r\n                      </span>\r\n                      <span class=\"r\">\r\n                        <template>\r\n                          <el-checkbox label=\"关联数据\" :disabled=\"!items.checked\" v-model=\"items.request\"></el-checkbox>\r\n                        </template>\r\n                      </span>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-50 mb-50\">\r\n          <el-button type=\"primary\" v-no-more-click @click=\"saveJobOrder\" size=\"small\">确定</el-button>\r\n          <el-button @click=\"href('workOrder_new_list')\" size=\"small\">取消</el-button>\r\n          <el-button @click=\"dialogTableVisible = true\" size=\"small\" v-if=\"Object.values(tableItemsObj).length > 0\">预览</el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 新建工单 -->\r\n  </div>\r\n</template>\r\n<!-- 工单池 -->\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { getToken } from \"@/utils/auth\";\r\nimport codeSet from \"@/components/codeSet\";\r\nimport treeDept from \"@/components/treeDeptReturnObj\";\r\nimport { filter } from \"minimatch\";\r\nimport { get } from \"http\";\r\nimport { constants } from 'crypto';\r\nimport { exists } from 'fs';\r\nimport { async } from 'q';\r\nlet token = getToken();\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dept_obj:{},\r\n      // 名称校验集合\r\n      existObj:{},\r\n      // 具体单源默认value\r\n      TableSet_defalut:'请选择',\r\n      // 具体单源列表\r\n      TableSet_List:[],\r\n      jobOrderExtendObj_name:null,\r\n      // 源单编码列表\r\n      sourceOrderType_list:[{\r\n        id:'measuringWorkOrder',\r\n        name:'量体工单'\r\n      },{\r\n        id:'returnWorkOrder',\r\n        name:'回访工单'\r\n      },{\r\n        id:'consumerCustomizedOrder',\r\n        name:'定制订单'\r\n      },{\r\n        id:'consumerReservationOrder',\r\n        name:'预约订单'\r\n      },{\r\n        id:'wideningWorkOrder',\r\n        name:'加宽量工单'\r\n      },{\r\n        id:'factoryWorkOrder',\r\n        name:'工厂下单工单'\r\n      },{\r\n        id:'factoryTrackingWorkOrder',\r\n        name:'工厂跟踪工单'\r\n      },{\r\n        id:'incrementWorkOrder',\r\n        name:'增值服务工单'\r\n      },],\r\n      // 新建表单提交数据\r\n      jobOrderExtendObj: {\r\n        busType: \"\", // 业务类型\r\n        currentUser: \"\",\r\n        dept: \"\",// 适用部门\r\n        layout: \"\",// 工单排版\r\n        name: \"\",// 工单名称\r\n        priority: '',// 优先级\r\n        serveType: \"\",// 服务类型\r\n        sourceOrderParams: {\r\n          sourceOrderChild: \"\"\r\n        },\r\n        tableItems: [\r\n          {\r\n            codeName: \"\",\r\n            currentUser: \"\",\r\n            id: \"\",\r\n            inputType: \"\",\r\n            isRead: 0,\r\n            itemAlias: \"\",\r\n            itemCode: \"\",\r\n            itemName: \"\",\r\n            itemType: 0,\r\n            jdbcType: \"\",\r\n            length: 0,\r\n            linkItemName: \"\",\r\n            linkTable: \"\",\r\n            nullAble: true,\r\n            precisions: 0,\r\n            primaryKey: true,\r\n            remarks: \"\",\r\n            sort: 0,\r\n            status: 0,\r\n            tableSetId: \"\",\r\n            visible: true\r\n          }\r\n        ],\r\n        tableSets: [\r\n          {\r\n            alias: \"\",\r\n            code: \"\",\r\n            currentUser: \"\",\r\n            dataSourceId: \"\",\r\n            id: \"\",\r\n            linkType: 0,\r\n            orderExtendId: \"\",\r\n            remarks: \"\",\r\n            sort: 0,\r\n            sourceChileType: \"\",\r\n            sourceOrderType: \"\",\r\n            status: 0,\r\n            tableCn: \"\",\r\n            tableId: \"\",\r\n            tableName: \"\",\r\n            type: 0\r\n          }\r\n        ],\r\n        workOrderProcessItem: []\r\n      },\r\n      // 父类选择对象备份\r\n      tableSetsObj:{},\r\n      // 子类选择对象备份\r\n      tableItemsObj:{},\r\n      // 配置选项\r\n      listMapArr:[],\r\n      formInline: {\r\n        user: \"\",\r\n        region: \"\"\r\n      },\r\n      filtersData: {\r\n        pageIndex: 1, //当前页码\r\n        pageSize: 10, //每页数量\r\n        used: null, //有效状态\r\n        filter: \"\", //搜索关键字\r\n        startDate: \"\",\r\n        endDate: \"\"\r\n      },\r\n      currentPage: 1, // 当前页数\r\n      total: 130, //总条目数\r\n      value: \"\",\r\n      storageValArr: '',\r\n      // 指派单选框\r\n      radio: \"1\",\r\n      // 指派\r\n      options: [{\r\n          value: '01',\r\n          label: '三栏'\r\n        }, {\r\n          value: '02',\r\n          label: '四栏'\r\n        }],\r\n         // 指派\r\n      prioritys: [{\r\n          value: '01',\r\n          label: '高'\r\n        },{\r\n          value: '02',\r\n          label: '中'\r\n        },{\r\n          value: '03',\r\n          label: '低'\r\n        }],\r\n        value: '',\r\n      dialogTableVisible: false,\r\n      dialogFormVisible: false,\r\n      form: {\r\n        name: \"\",\r\n        region: \"\",\r\n        date1: \"\",\r\n        date2: \"\",\r\n        delivery: false,\r\n        type: [],\r\n        resource: \"\",\r\n        desc: \"\"\r\n      },\r\n      formLabelWidth: \"120px\"\r\n    };\r\n  },\r\n  created() {\r\n    this.getTableSet_List();\r\n    this.jobOrderExtendGet(this.$route.query.id);\r\n    // this.tableItemListByOrderExtendId(this.$route.query.id);\r\n\r\n    console.log(this.$route.query)\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    /**\r\n     * 获取工单类型扩展\r\n     */\r\n    jobOrderExtendGet(id) {\r\n      const that = this;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.jobOrderExtendGet,\r\n        {\r\n          id\r\n        }\r\n      ).then(res=>{\r\n        that.jobOrderExtendObj = res;\r\n        that.jobOrderExtendObj_name = JSON.parse(JSON.stringify(that.jobOrderExtendObj.name));\r\n        // 所属部门回显\r\n        that.dept_obj = {\r\n          id:res.dept,\r\n          name:res.deptName\r\n        };\r\n        that.tableItemGetListMap({\r\n          id:res.sourceOrderParams.sourceOrderChild,\r\n          // tableCn:findItem.tableCn\r\n        });\r\n      });\r\n    },\r\n    /**\r\n     * 根据源单获取所有子表数据项\r\n     */\r\n    tableItemListByOrderExtendId(id) {\r\n      const that = this;\r\n\r\n      this.request(\r\n        that.api.job_order.tableItemListByOrderExtendId,\r\n        {\r\n          orderExtendId: id\r\n        }\r\n      ).then(res => {\r\n      let tableItemListByWorkOrderCodeArr =[];\r\n        // 处理配置单源数据字段\r\n        res.forEach((item, index) => {\r\n          if(item.type == 0) that.TableSet_defalut = item.tableCn;\r\n          item.sublist.forEach((items, indexs) => {\r\n            // if(items.visible == false) return;\r\n            tableItemListByWorkOrderCodeArr.push(items);\r\n          })\r\n        });\r\n        console.log(tableItemListByWorkOrderCodeArr)\r\n        // 点亮字段勾选\r\n        tableItemListByWorkOrderCodeArr.forEach((itemArr, indexArr) => {\r\n          let isRead = null,\r\n              index = null,\r\n              indexs = null,\r\n              tableSetsObj = null,\r\n              obj = {};\r\n          if(itemArr.visible == false) return;\r\n          that.listMapArr.forEach((item, index) => {\r\n            item.sublist.forEach((items, indexs) => {\r\n              if(items.itemName ==  itemArr.itemName) {\r\n                obj = {\r\n                  isRead : true,\r\n                  index : index,\r\n                  indexs : indexs,\r\n                  tableSetsObj : item\r\n                }\r\n                return;\r\n              }\r\n            })\r\n          });\r\n          console.log(obj)\r\n          that.selectChilder(obj.isRead, obj.index, obj.indexs, obj.tableSetsObj);\r\n          that.listMapArr[obj.index].sublist[obj.indexs].isRead = itemArr.isRead;\r\n          that.listMapArr[obj.index].sublist[obj.indexs].request = itemArr.request;\r\n          that.changeRadioChild(itemArr.isRead, obj.index);\r\n        });\r\n        console.log(that.listMapArr);\r\n        console.log(tableItemListByWorkOrderCodeArr);\r\n      });\r\n    },\r\n    /**\r\n     * 改变父单选框\r\n     * @param { Boolean } isRead 是否选中状态\r\n     * @param { Number } index 当前索引\r\n     */\r\n    changeRadioParent(isRead, index) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n        listMapArr[index].sublist.forEach((items, index) => {\r\n          items.isRead = isRead;\r\n        })\r\n      console.log(listMapArr[index].sublist)\r\n\r\n    },\r\n    /**\r\n     * 改变子单选框\r\n     * @param { Boolean } isRead 子选框选中状态\r\n     * @param { Number } index 当前索引\r\n     */\r\n    changeRadioChild(isRead, index) {\r\n      var that = this,\r\n            listMapArr = that.listMapArr,\r\n            isRadioParent;\r\n      // 如果选择的是左侧的选框，当全部子选框被选中时，父级选框被勾选，否则取消勾选\r\n      if(isRead) {\r\n        isRadioParent = listMapArr[index].sublist.every((item) => {\r\n          return item.isRead === 1;\r\n        });\r\n        listMapArr[index].isRead = isRadioParent ?  1 : null;\r\n      }else{\r\n        isRadioParent = listMapArr[index].sublist.every((item) => {\r\n          return item.isRead === 0;\r\n        });\r\n        listMapArr[index].isRead = isRadioParent ? 0 : null;\r\n      };\r\n      console.log(listMapArr[index].sublist)\r\n      console.log(that.tableItemsObj)\r\n    },\r\n    /**\r\n     * 获取具体单源列表\r\n     */\r\n    getTableSet_List() {\r\n      const that = this;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.getTableSet_List,\r\n        {\r\n          isSourceOrder:1\r\n        }\r\n      ).then(res=>{\r\n        that.TableSet_List = res.data;\r\n      });\r\n    },\r\n    /**\r\n     * 获取工单配置内容\r\n     * @param { String } selval.id 请求id\r\n     */\r\n    tableItemGetListMap(selVal) {\r\n      const that = this;\r\n\r\n      that.jobOrderExtendObj.sourceOrderParams.sourceOrderChild = selVal.id;\r\n      // 请求数据\r\n      this.request(\r\n        this.api.job_order.tableItemGetListMap,\r\n        {\r\n          tableSetId: selVal.id\r\n        }\r\n      ).then(res=>{\r\n        // 数据初始化放在最前面做\r\n        res.forEach((item, index) => {\r\n          item.checked = false;\r\n          // json名称修改\r\n          item.sourceTableId = item.id;\r\n          delete item.id;\r\n          item.checkedLength = 0;\r\n          item.radioLength = 0;\r\n          item.isShow = false;\r\n          item.isRead = '';\r\n          item.sublist.forEach((items, indexs) => {\r\n            items.checked = false;\r\n            items.request = false;\r\n            items.isRead = '';\r\n          })\r\n        });\r\n        /**\r\n         * 拷贝一份配置选项，为了删除sublist中visible为false的附加选，不然操作会出错\r\n         * 但是最后如果选择了子单，是需要把这个删除项带上的，所以要准备一个暂时备份\r\n         */\r\n        this.listMapArr_backup = JSON.parse(JSON.stringify(res));\r\n        // 删除res下sublist中visible为false的项；\r\n        res.forEach((item, index) => {\r\n          let find_Visible_false = item.sublist.findIndex((items, indexs) => {\r\n            return items.visible == false;\r\n          });\r\n          if(find_Visible_false != -1) {\r\n            item.sublist.splice(find_Visible_false, 1);\r\n          };\r\n        });\r\n        that.listMapArr = res;\r\n        that.tableItemListByOrderExtendId(this.$route.query.id);\r\n      });\r\n    },\r\n    /**\r\n     * 新建工单\r\n     */\r\n    async saveJobOrder() {\r\n      const that = this,\r\n            _tableSetsObj = Object.values(that.tableSetsObj) || [],\r\n            _tableItemsObj = Object.values(that.tableItemsObj) || [],\r\n            jobOrderExtendObj = that.jobOrderExtendObj;\r\n\r\n      Object.assign(that.jobOrderExtendObj, {\r\n        dept:this.dept_obj.id,\r\n        deptName:this.dept_obj.name\r\n      });\r\n      // 文本框校验\r\n      if(!jobOrderExtendObj.busType) {\r\n        that.warn('请选择业务类型！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.serveType) {\r\n        that.warn('请选择服务类型！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.dept) {\r\n        that.warn('请选择适用部门！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.serveType) {\r\n        that.warn('请选择优先级！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.name) {\r\n        that.warn('工单名称不能为空！');\r\n        return;\r\n      };\r\n      /**\r\n      * 名称校验\r\n      */\r\n     // 名字不能重复，编辑获取的名字不做检验\r\n      if(that.jobOrderExtendObj_name != jobOrderExtendObj.name) {\r\n        let list = await that.request(\r\n          that.api.job_order.jobOrderExtend_validation,\r\n          {\r\n            name:jobOrderExtendObj.name,\r\n            sourceOrderParams:that.jobOrderExtendObj.sourceOrderParams\r\n          }\r\n        );\r\n        if(!list.exist) {\r\n          that.warn(list.msg);\r\n          return;\r\n        };\r\n      };\r\n      if(!jobOrderExtendObj.layout) {\r\n        that.warn('请选择工单排版！');\r\n        return;\r\n      };\r\n      if(!jobOrderExtendObj.sourceOrderParams.sourceOrderType) {\r\n        that.warn('请选择源单编码！');\r\n        return;\r\n      };\r\n      if(that.TableSet_defalut=='请选择') {\r\n        that.warn('请选择具体单源！');\r\n        return;\r\n      };\r\n      if(_tableSetsObj.length === 0) {\r\n        that.warn('请配置流转数据！');\r\n        return;\r\n      };\r\n      let detectionRadio = _tableItemsObj.find(item => {\r\n        return typeof item.isRead != 'number';\r\n      })\r\n      console.log(that.tableItemsObj)\r\n      console.log(_tableItemsObj)\r\n      if(detectionRadio){\r\n          that.warn(`请设置${detectionRadio.itemName}是否可读写！`);\r\n          return;\r\n      };\r\n      // 提交之前深拷贝，删除无用子类\r\n      let tableSetsData = JSON.parse(JSON.stringify(_tableSetsObj));\r\n      let tableItemsData = JSON.parse(JSON.stringify(_tableItemsObj));\r\n      let sourceOrderItem = tableSetsData.find((item, index) => {\r\n        return item.type == 0;\r\n      })\r\n      // 把隐藏项带入tableItemsData\r\n      this.listMapArr.forEach((item, index) => {\r\n        // 如果是主数据则终止\r\n        if(item.type == 0) return;\r\n        let isChecked = item.sublist.some(x => {\r\n          return x.checked == true;\r\n        })\r\n        if(isChecked) {\r\n          let UUID = that.listMapArr_backup[index].sublist.find(x => {\r\n            return x.visible == false;\r\n          });\r\n          if(UUID) tableItemsData.push(UUID);\r\n        }\r\n      });\r\n      console.log(tableItemsData)\r\n      // 删除无用子类\r\n      tableSetsData.forEach((item, index) => {\r\n        delete item.sublist;\r\n      });\r\n      let data = Object.assign(JSON.parse(JSON.stringify(that.jobOrderExtendObj)), {\r\n        tableSets: tableSetsData,\r\n        tableItems: tableItemsData\r\n      });\r\n      console.log(1)\r\n      // return;\r\n      this.request(\r\n        this.api.job_order.jobOrderExtend_update,\r\n        data\r\n      ).then(res=>{\r\n          that.warn('工单编辑成功！','success');\r\n          that.href('workOrder_new_list');\r\n      });\r\n    },\r\n    /**\r\n     * 选择一级菜单\r\n     * @param { Boolean } isChecked 是否选中状态\r\n     * @param { Number } index 父级索引\r\n     * @param { Object } tableSetsObj 当前选中数据集合\r\n     */\r\n    selectParent(isChecked, index, tableSetsObj) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n      if (isChecked) {\r\n        // 全选视图逻辑\r\n        listMapArr[index].sublist.forEach((item, i) => {\r\n          item.checked = true;\r\n        });\r\n        listMapArr[index].checkedLength = listMapArr[index].sublist.length;\r\n        // 数据存入父类备份集合\r\n        that.tableSetsObj[index] = tableSetsObj;// 以对象形式存入父类\r\n        // 数据存入子类备份集合\r\n        tableSetsObj.sublist.forEach((subItem, subIndex) => {\r\n          that.tableItemsObj[parseInt(`${index}${subIndex}`)] = subItem;// 以他们的索引拼接为对象名如：00、01、10。为了删除时方便，注意得存入数字类型，下面提交要排序\r\n        });\r\n      } else {\r\n        // 全选视图逻辑\r\n        listMapArr[index].sublist.forEach((item, i) => {\r\n          item.checked = false;\r\n        });\r\n        listMapArr[index].checkedLength = 0;\r\n        // 删除父类备份集合数据\r\n        delete that.tableSetsObj[index];\r\n        // 删除子类备份集合数据\r\n        tableSetsObj.sublist.forEach((subitems, subIndexs) => {\r\n          delete that.tableItemsObj[parseInt(`${index}${subIndexs}`)];\r\n        });\r\n      }\r\n        console.log(that.tableSetsObj);\r\n        console.log(that.tableItemsObj);\r\n    },\r\n    /**\r\n     * 选择二级菜单\r\n     * @param { Boolean } isChecked 是否选中状态\r\n     * @param { Number } index 父级索引\r\n     * @param { Number } indexs 子级索引\r\n     * @param { Object } tableSetsObj 当前选中数据集合\r\n     */\r\n    selectChilder(isChecked, index, indexs, tableSetsObj) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n      // 子元素选中计数\r\n      if (isChecked) {\r\n        listMapArr[index].checkedLength++;\r\n        tableSetsObj.sublist[indexs].createTime =new Date().toISOString();\r\n        that.tableSetsObj[index] = tableSetsObj;\r\n        that.tableItemsObj[parseInt(`${index}${indexs}`)] = tableSetsObj.sublist[indexs];\r\n        tableSetsObj.sublist[indexs].checked = isChecked;\r\n      } else {\r\n        listMapArr[index].checkedLength--;\r\n        if(listMapArr[index].checkedLength == 0) {\r\n          delete that.tableSetsObj[index];\r\n        }\r\n        delete that.tableItemsObj[parseInt(`${index}${indexs}`)];\r\n      }\r\n      // 判断子元素是否全部选中\r\n      if (listMapArr[index].checkedLength === listMapArr[index].sublist.length) {\r\n        listMapArr[index].checked = true;\r\n      } else {\r\n        listMapArr[index].checked = false;\r\n      }\r\n      console.log(that.tableSetsObj);\r\n      console.log(that.tableItemsObj);\r\n    },\r\n    /**\r\n     * 控制二级分类显示或者隐藏\r\n     * @param { Number } index 当前索引\r\n     */\r\n    click_isShow(index) {\r\n      const that = this,\r\n            listMapArr = that.listMapArr;\r\n\r\n      listMapArr[index].isShow = !listMapArr[index].isShow;\r\n    },\r\n    /**\r\n     * 跳转工单详情\r\n     * @param { String } routeName 路由名称\r\n     */\r\n    href(routeName) {\r\n      this.$router.push({\r\n        path: `/${routeName}`,\r\n        name: routeName\r\n      });\r\n    },\r\n    /**\r\n     * 提示\r\n     */\r\n    warn(message, type) {\r\n      this.$message({\r\n        message: message,\r\n        type: type || 'warning'\r\n      });\r\n    },\r\n    /**\r\n     * 模糊搜索\r\n     */\r\n    handleSearch() {},\r\n    /**\r\n     * 搜索重置\r\n     */\r\n    handleResetFilters() {}\r\n  },\r\n  components: {\r\n    codeSet,\r\n    treeDept\r\n  }\r\n};\r\n</script>\r\n<style  lang=\"less\" scoped>\r\n.previewVisible-list{\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  .item{\r\n      width: 50%;\r\n      margin-right: 0;\r\n      text-align: right;\r\n  }\r\n}\r\n.extend-list{\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 1150px;\r\n  .item{\r\n    width: 320px;\r\n    text-align: right;\r\n  }\r\n}\r\ni{\r\n  font-style:normal;\r\n}\r\n.colorRed{\r\n  color: red;\r\n  line-height:30px;\r\n}\r\nh5 {\r\n  color: #222;\r\n  margin-left: -15px;\r\n}\r\n.test {\r\n  color: #9d9d9d;\r\n}\r\n.display-flex {\r\n  display: flex;\r\n}\r\n.text-center{\r\n  text-align: center;\r\n}\r\n.justify-content {\r\n  display: flex;\r\n  // justify-content: space-between;\r\n}\r\n.content {\r\n  height: 50px;\r\n  line-height: 50px;\r\n}\r\n\r\n.tree {\r\n  width: 1000px;\r\n  border-right: 1px solid #ccc;\r\n  border-top: 1px solid #ccc;\r\n  border-left: 1px solid #ccc;\r\n  .tree-title{\r\n    height: 50px;\r\n    line-height: 50px;\r\n    font-weight: bold;\r\n    font-size:16px;\r\n  }\r\n  span {\r\n    display: inline-block;\r\n    width: 33%;\r\n    border-bottom: 1px solid #ccc;\r\n  }\r\n  .text-index10 {\r\n    text-indent: 10px;\r\n  }\r\n  .l {\r\n    border-right: 1px solid #ccc;\r\n  }\r\n  .r{\r\n    text-indent: 20px;\r\n  }\r\n}\r\n</style>\r\n"]}]}