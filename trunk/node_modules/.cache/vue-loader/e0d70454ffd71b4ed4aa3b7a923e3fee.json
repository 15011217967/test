{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\treeDeptReturnObj.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\treeDeptReturnObj.vue","mtime":1572415127968},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"tree-dept\",\r\n  props: {\r\n    // 接收绑定参数\r\n    value: null,\r\n    valType: {\r\n      default: \"code\",\r\n      type: String\r\n    },\r\n    defaultExpandAll: {\r\n      default: false,\r\n      type: Boolean\r\n    },\r\n    // 输入框宽度\r\n    width: String,\r\n    type: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    // 输入框占位符\r\n    placeholder: {\r\n      type: String,\r\n      default: \"请选择\"\r\n    },\r\n    selType: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 是否禁用\r\n    disabled: {\r\n      type: Boolean\r\n    }\r\n  },\r\n  watch: {\r\n    value(val) {\r\n      this.valueModel = val;\r\n    },\r\n    valueModel(val) {\r\n      if (!val) {\r\n        this.labelModel = \"\";\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [],\r\n      // 菜单宽度\r\n      treeWidth: \"auto\",\r\n      // 输入框显示值\r\n      labelModel: \"\",\r\n      // 实际请求传值\r\n      valueModel: this.value,\r\n      props: {\r\n        value: this.valType,\r\n        label: \"name\",\r\n        children: \"sublist\"\r\n      },\r\n      defaultExpandedKeys: []\r\n    };\r\n  },\r\n  created() {\r\n    if (this.valueModel != undefined)\r\n      this.defaultExpandedKeys = [this.valueModel];\r\n\r\n    this.getList();\r\n    // 获取输入框宽度同步至树状菜单宽度\r\n    this.$nextTick(() => {\r\n      this.treeWidth = `${(this.width ||\r\n        this.$refs.input.$refs.input.clientWidth) - 24}px`;\r\n    });\r\n  },\r\n  updated() {\r\n    var defaultNode = this.$refs.tree.getNode(this.valueModel);\r\n    if (defaultNode) {\r\n      this.labelModel = defaultNode.data[this.props.label];\r\n    }\r\n  },\r\n  methods: {\r\n    async getList() {\r\n      var self = this;\r\n      var requestParam;\r\n      if (self.type) {\r\n        requestParam = {\r\n          type: self.type,\r\n          used: true\r\n        };\r\n      } else {\r\n        requestParam = {\r\n          used: true\r\n        };\r\n      }\r\n\r\n      var list = await this.request(this.api.user.DEPART_LIST_POST, requestParam);\r\n      this.options = list;\r\n    },\r\n    filterNode(val, data) {\r\n      if (!val) return true;\r\n      var isCur = data[this.props.value] == val;\r\n      if (isCur) {\r\n        this.labelModel = data[this.props.label];\r\n      }\r\n      return isCur;\r\n    },\r\n    // 单击节点\r\n    onClickNode(node) {\r\n      if (\r\n        this.selType == null ||\r\n        (this.selType != null && this.selType == node.type)\r\n      ) {\r\n        this.labelModel = node[this.props.label];\r\n        this.valueModel = node;\r\n        this.onCloseTree();\r\n      }\r\n    },\r\n    // 隐藏树状菜单\r\n    onCloseTree() {\r\n      this.$refs.popover.showPopper = false;\r\n    },\r\n    // 显示时触发\r\n    onShowPopover() {\r\n      this.$refs.tree.filter(false);\r\n    },\r\n    // 隐藏时触发\r\n    onHidePopover() {\r\n      this.$emit(\"selected\", this.valueModel);\r\n      this.$emit(\"input\", this.valueModel);\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["treeDeptReturnObj.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"treeDeptReturnObj.vue","sourceRoot":"src/components","sourcesContent":["<!-- 树状选择器 -->\r\n<template>\r\n  <el-popover\r\n    ref=\"popover\"\r\n    placement=\"bottom-start\"\r\n    trigger=\"click\"\r\n    :disabled=\"disabled\"\r\n    @show=\"onShowPopover\"\r\n    @hide=\"onHidePopover\"\r\n  >\r\n    <el-tree\r\n      ref=\"tree\"\r\n      class=\"select-tree\"\r\n      :highlight-current=\"true\"\r\n      :style=\"`min-width: ${treeWidth}`\"\r\n      :data=\"options\"\r\n      :props=\"props\"\r\n      :node-key=\"valType\"\r\n      :expand-on-click-node=\"false\"\r\n      :check-on-click-node=\"true\"\r\n      :default-expand-all=\"defaultExpandAll\"\r\n      :default-expanded-keys=\"defaultExpandedKeys\"\r\n      :current-node-key=\"valueModel\"\r\n      :filter-node-method=\"filterNode\"\r\n      @node-click=\"onClickNode\"\r\n    >\r\n      <!-- <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n        <span>\r\n          <i :class=\"node.icon\"></i>\r\n          {{ node.label }}\r\n        </span>\r\n      </span>-->\r\n    </el-tree>\r\n    <el-input\r\n      slot=\"reference\"\r\n      ref=\"input\"\r\n      v-model=\"labelModel\"\r\n      clearable\r\n      :disabled=\"disabled\"\r\n      suffix-icon=\"el-icon-arrow-down\"\r\n      @change=\"valueModel=''\"\r\n      :placeholder=\"placeholder\"\r\n    ></el-input>\r\n  </el-popover>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"tree-dept\",\r\n  props: {\r\n    // 接收绑定参数\r\n    value: null,\r\n    valType: {\r\n      default: \"code\",\r\n      type: String\r\n    },\r\n    defaultExpandAll: {\r\n      default: false,\r\n      type: Boolean\r\n    },\r\n    // 输入框宽度\r\n    width: String,\r\n    type: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    // 输入框占位符\r\n    placeholder: {\r\n      type: String,\r\n      default: \"请选择\"\r\n    },\r\n    selType: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 是否禁用\r\n    disabled: {\r\n      type: Boolean\r\n    }\r\n  },\r\n  watch: {\r\n    value(val) {\r\n      this.valueModel = val;\r\n    },\r\n    valueModel(val) {\r\n      if (!val) {\r\n        this.labelModel = \"\";\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [],\r\n      // 菜单宽度\r\n      treeWidth: \"auto\",\r\n      // 输入框显示值\r\n      labelModel: \"\",\r\n      // 实际请求传值\r\n      valueModel: this.value,\r\n      props: {\r\n        value: this.valType,\r\n        label: \"name\",\r\n        children: \"sublist\"\r\n      },\r\n      defaultExpandedKeys: []\r\n    };\r\n  },\r\n  created() {\r\n    if (this.valueModel != undefined)\r\n      this.defaultExpandedKeys = [this.valueModel];\r\n\r\n    this.getList();\r\n    // 获取输入框宽度同步至树状菜单宽度\r\n    this.$nextTick(() => {\r\n      this.treeWidth = `${(this.width ||\r\n        this.$refs.input.$refs.input.clientWidth) - 24}px`;\r\n    });\r\n  },\r\n  updated() {\r\n    var defaultNode = this.$refs.tree.getNode(this.valueModel);\r\n    if (defaultNode) {\r\n      this.labelModel = defaultNode.data[this.props.label];\r\n    }\r\n  },\r\n  methods: {\r\n    async getList() {\r\n      var self = this;\r\n      var requestParam;\r\n      if (self.type) {\r\n        requestParam = {\r\n          type: self.type,\r\n          used: true\r\n        };\r\n      } else {\r\n        requestParam = {\r\n          used: true\r\n        };\r\n      }\r\n\r\n      var list = await this.request(this.api.user.DEPART_LIST_POST, requestParam);\r\n      this.options = list;\r\n    },\r\n    filterNode(val, data) {\r\n      if (!val) return true;\r\n      var isCur = data[this.props.value] == val;\r\n      if (isCur) {\r\n        this.labelModel = data[this.props.label];\r\n      }\r\n      return isCur;\r\n    },\r\n    // 单击节点\r\n    onClickNode(node) {\r\n      if (\r\n        this.selType == null ||\r\n        (this.selType != null && this.selType == node.type)\r\n      ) {\r\n        this.labelModel = node[this.props.label];\r\n        this.valueModel = node;\r\n        this.onCloseTree();\r\n      }\r\n    },\r\n    // 隐藏树状菜单\r\n    onCloseTree() {\r\n      this.$refs.popover.showPopper = false;\r\n    },\r\n    // 显示时触发\r\n    onShowPopover() {\r\n      this.$refs.tree.filter(false);\r\n    },\r\n    // 隐藏时触发\r\n    onHidePopover() {\r\n      this.$emit(\"selected\", this.valueModel);\r\n      this.$emit(\"input\", this.valueModel);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.el-input.el-input--suffix {\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n}\r\n.el-input.el-input--suffix.rotate .el-input__suffix {\r\n  transform: rotate(180deg);\r\n}\r\n.select-tree {\r\n  max-height: 350px;\r\n  overflow-y: scroll;\r\n}\r\n/* 菜单滚动条 */\r\n.select-tree::-webkit-scrollbar {\r\n  z-index: 11;\r\n  width: 6px;\r\n}\r\n.select-tree::-webkit-scrollbar-track,\r\n.select-tree::-webkit-scrollbar-corner {\r\n  background: #fff;\r\n}\r\n.select-tree::-webkit-scrollbar-thumb {\r\n  border-radius: 5px;\r\n  width: 6px;\r\n  background: #b4bccc;\r\n}\r\n.select-tree::-webkit-scrollbar-track-piece {\r\n  background: #fff;\r\n  width: 6px;\r\n}\r\n</style>\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}