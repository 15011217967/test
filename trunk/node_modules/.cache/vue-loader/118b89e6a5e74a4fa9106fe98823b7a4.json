{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\channel\\channel_edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\channel\\channel_edit.vue","mtime":1576636769399},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// TODO 临时解决上传文件\nimport axios from 'axios'\nimport { getToken } from \"@/utils/auth\";\n\n\nimport PageTable from \"@/views/collocation/components/PageTable\";\nimport treeDept from '@/components/treeDept'\nimport CheckTags from \"@/views/collocation/components/CheckTags\";\nimport StoreInfo from \"../components/channelStoreInfo\";\nimport TransferSlipGoodsTable from \"../components/channelTransferSlipGoodsTable\";\nimport division from \"@/components/division\";\nimport ImagePopover from \"@/views/collocation/components/ImagePopover\";\nimport { filter } from 'minimatch';\nimport { get } from 'http';\nexport default {\n  // 组件\n  components: {\n    PageTable,\n    TransferSlipGoodsTable,\n    CheckTags,\n    StoreInfo,\n    ImagePopover,\n    division,\n    treeDept\n  },\n  // 数据\n  data() {\n    return {\n      colorOptions: [],\n      colorList:[],\n      // 选择商品颜色相关参数\n      colorProps: {\n        value: \"code\",\n        label: \"name\",\n        children: \"children\",\n        checkStrictly: true\n      },\n      dialogTableVisible:false,\n      codeItem_list_get:{},\n      warehouseBase_goodsOwner_data:[],\n      addFormData: {\n        // 发货人\n        allotMan: '',\n        // 发货人直属机构\n        organizationId: '',\n        organizationName: '',\n        // 订单类型\n        // orderType: '0203',\n        // 发货门店\n        outStoreId: '',\n        outStoreName: '',\n        // 收货门店\n        inStoreId: '',\n        inStoreName: '',\n        // 收货人\n        receiveMan: '',\n        // 电话\n        phone: '',\n        // 省市区信息\n        provinceName: '',\n        provinceCode: '',\n        cityName: '',\n        cityCode: '',\n        areaName: '',\n        areaCode: '',\n        divisionId: '',\n        // 地址\n        addressInfo: ''\n      },\n      // 路由参数\n      _orderSn: null,\n      _outStoreId: null,\n\n      // 默认显示门店信息 outStoreInfo: 发货门店     inStoreInfo: 收货门店\n      activeName: 'outStoreInfo',\n      // 发货门店详情\n      outStoreInfo: null,\n      // 收货门店详情\n      inStoreInfo: null,\n      // 导入商品地址\n      uploadGoodsUrl: this.api.FN_ALLPATH(this.api.retailStore.storeProduct_importOrderItem),\n      // 导入是否可点\n      uploadGoodsDisabled: false,\n      // 导入附带参数\n      uploadGoodsParams: {\n        storeId: ''\n      },\n      // 最终保存提交信息\n      transferSlipAddInfo: {},\n      // 选择的商品列表\n      checkedSKUTableData: [],\n\n      // 是否显示选中的\n      checkedGoodsShow: false,\n      // 查询商品参数\n      formData: {\n         // 综合搜索\n        filter: '',\n        // 颜色\n        color:null,\n        // 品牌\n        brandId: '',\n        // 季节\n        seasonalStyleCode:null,\n        // 货主\n        ownerId:null,\n        // 标签\n        collocationTagIdList: [],\n        // 当前页码\n        pageIndex: 1,\n        // 每页数量\n        pageSize: 10\n      },\n      // 商品主表格数据\n      tableData: {},\n\n      /**\n       * 商品查询辅助数据\n       */\n      // 验证\n      rules: {\n        money: [\n          { required: false, validator: this.moneyRule, trigger: 'blur'}\n        ],\n        count: [\n          { required: false, validator: this.countRule, trigger: 'blur'}\n        ]\n      },\n      // 分类映射\n      props:{\n        value: 'id',\n        label: 'name',\n        children: 'children'\n      },\n      // 分类数据\n      classData:[],\n      classList:[],\n      // 选中的分类\n      cateArr:[],\n      // 品牌\n      brandOptions:[],\n      // 设计商\n      designCompanyOptions:[]\n      /**\n       * 商品查询辅助数据--end\n       */\n    }\n  },\n  created(){\n    this.transferSlipAddInfo.outStoreId = this.$route.query.outStoreId;\n    this.codeItem_list();\n    this.getWarehouseList();\n    this.getColorOptions();\n  },\n  // 初始化数据\n  mounted() {\n    this.init();\n  },\n  // 方法\n  methods: {\n    /**\n     * 选择颜色\n     */\n    colorCodeGet(e) {\n       let color  = JSON.parse(JSON.stringify(e)).pop();\n       let obj = this.colorList.find((item)=>(item.code == color));\n       if(obj.parentCode ===null){\n          this.formData.colorSeries = obj.name;\n          this.formData.color = null;\n       }else{\n          this.formData.colorSeries = null;\n          this.formData.color =obj.name;\n       }\n    },\n    /**\n     * 获取颜色\n     */\n    getColorOptions() {\n      // console.log(\"从computed中获取颜色\");\n      let codeSet = this.$store.getters.codeData;\n      let treeList = [];\n      let codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\n      function toTree(data, parentCode) {\n        var tree = [];\n        var temp;\n        for (var i = 0; i < data.length; i++) {\n            if (data[i].parentCode == parentCode) {\n            var obj = data[i];\n            temp = toTree(data, data[i].code);\n            if (temp.length > 0) {\n              obj.children = temp;\n            }\n            tree.push(obj);\n            }\n        }\n        return tree;\n      }\n      treeList = toTree(codeList, null);\n      this.colorList = codeList;\n      this.colorOptions = treeList;\n    },\n    /**\n     * （获取货主）\n     */\n    getWarehouseList(item) {\n      const that = this;\n\n      this.request(\n        this.api.warehouse.warehouseBase_goodsOwner_list,\n      ).then(res => {\n        that.warehouseBase_goodsOwner_data = res;\n      });\n    },\n    /**\n     * （获取季节）\n     */\n    codeItem_list(item) {\n      const that = this;\n\n      this.request(\n        this.api.market.codeItem_list,\n        {\n          codeSetId:'06b11574-ef82-4ae4-a8a9-a25f903083df'\n        },\n        true\n      ).then(res => {\n        that.codeItem_list_get = res;\n      });\n    },\n    /**\n     * 获取返货单已选商品列表（为了获取调入结算单价）\n     */\n    settleQuery_findSettle(){\n      this.checkedGoodsShow = true;\n    },\n    /**\n     * 修改收货地址\n     */\n    changeAddress() {\n      console.log(this.transferSlipAddInfo)\n    },\n    // 获取省市信息\n    setDivision(division){\n      this.transferSlipAddInfo.provinceName =  division.province;\n      this.transferSlipAddInfo.provinceCode =  division.provinceCode;\n      this.transferSlipAddInfo.cityName =  division.municipality;\n      this.transferSlipAddInfo.cityCode =  division.municipalityCode;\n      this.transferSlipAddInfo.areaName =  division.area;\n      this.transferSlipAddInfo.areaCode =  division.areaCode;\n      this.transferSlipAddInfo.divisionId =  division.divisionId;\n    },\n    // 初始化\n    init(){\n      // 获取上页面参数\n      this.getQueryParams();\n      // 获取发货门店详情\n      this.getStoreInfo(this.transferSlipAddInfo.outStoreId, 'outStoreInfo');\n      // 获取设计商列表\n      this.getDesignCompanyOptions();\n      // 获取品牌列表\n      this.getBrandOptions();\n      // 获取商品分类列表\n      this.getClassData();\n      // 获取表格数据\n      this.getTableData();\n    },\n    // 获取上页面参数\n    getQueryParams() {\n      this._orderSn = this.$route.query.orderSn;\n      this._outStoreId = this.$route.query.outStoreId;\n      if(this._orderSn && this._outStoreId){\n        this.getStoreAllotOrderProductInfoList(this._orderSn, this._outStoreId)\n      }\n    },\n    // 获取商品详情\n    getStoreAllotOrderProductInfoList(orderSn, outStoreId){\n      this.request(this.api.order.storeAllotOrderProductInfo_list, {orderSn ,outStoreId}).then(data => {\n        this.checkedSKUTableData = data.data;\n      });\n    },\n    /**\n     * 获取门店详情\n     * @param id {String} 门店id\n     * @param type {String} outStoreInfo: 发货门店 inStoreInfo: 收货门店\n     */\n    getStoreInfo(id, type){\n      if(!this[type]){\n        this.request(this.api.retailStore.storeBasic_get, {id: id}).then(data => {\n          this[type] = data;\n        });\n      }\n    },\n    /**\n     * 导入商品\n     * @param file 上传的文件\n     */\n    uploadGoodsChange(file){\n      const str = file.name.split('.')[1].toLowerCase();\n      // 判断类型\n      if (!str.match(/xlsx|xls/)) {\n        this.$message.error('文件格式只能是 xlsx | xls格式!');\n        return false\n      }\n      let formData = new FormData();\n      let token = getToken();\n      formData.set('file', file.raw );\n      formData.set('storeId', this.transferSlipAddInfo.outStoreId );\n      axios({\n        method: \"POST\",\n        url: this.api.FN_ALLPATH(this.api.retailStore.storeProduct_importOrderItem),\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          accessToken: token\n        },\n        data: formData\n      }).then(res => {\n        let data = res.data;\n        // 合并导入的数据和已选择的数据\n        if(data.code && data.code == 200){\n          let goodsData = data.data;\n          if(goodsData && goodsData.length > 0){\n            for(let n = 0; n < goodsData.length; n++){\n              let goodsIndex = this.checkedSKUTableData.findIndex(item => {\n                return item.goodsCode === goodsData[n].goodsCode\n              });\n              if(goodsIndex !== -1){\n                this.checkedSKUTableData[goodsIndex].quantity = goodsData[n].quantity + this.checkedSKUTableData[goodsIndex].quantity;\n              }else {\n                goodsData[n].allotPrice = goodsData[n].retailPrice;\n                this.checkedSKUTableData.push(goodsData[n])\n              }\n            }\n          }\n          this.checkedGoodsShow = true;\n          this.$nextTick(() => {\n            this.$refs.transferSlipGoodsTable.init();\n          })\n        }else {\n          this.$notify.error({ title: '错误',message: data.message});\n        }\n      })\n\n    },\n    /**\n     * 左侧门店类型切换\n     * @param activeName {String} 选择的门店类型名称\n     */\n    handleBeforeClick(activeName) {\n      this.getStoreInfo(this.transferSlipAddInfo.inStoreId, activeName);\n    },\n    // 点击搜索\n    searchTableData(){\n      this.formData.pageIndex = 1;\n      this.getTableData();\n    },\n    /**\n     * 重置查询条件\n     * @param formName {String} 表单的节点ref的值\n     */\n    initFormData(formName){\n      Object.assign(this.formData, {\n        // 综合搜索\n        filter: '',\n        // 颜色\n        color:null,\n        // 品牌\n        brandId: '',\n        // 季节\n        seasonalStyleCode:null,\n        // 货主\n        ownerId:null,\n        // 标签\n        collocationTagIdList: [],\n        // 当前页码\n        pageIndex: 1,\n        // 每页数量\n        pageSize: 10\n      })\n      // 将商品颜色重置为空\n      this.$refs.goodsColor.$el.children[0].children[0].value = null;\n      this.$refs.goodsColor.checkedValue = [];\n    },\n    // 获取spu商品数据\n    getTableData() {\n      this.$nextTick(() => {\n        setTimeout(()=> {\n          this.$refs.searchForm.validate((valid) => {\n            if (valid) {\n              let params = JSON.parse(JSON.stringify(this.formData));\n              params.storeId = this.transferSlipAddInfo.outStoreId;\n              if(params.collocationTagIdList.length === 0){\n                params.collocationTagIdList = null\n              }\n              this.request(this.api.scb.movingAveragePrice_productList, params).then(data => {\n                if(data.data && data.data.length){\n                  data.data.forEach(item => {\n                    item._skuList = [];\n                  });\n                  this.tableData = data;\n                }else {\n                  this.tableData = {};\n                }\n              });\n            } else {\n              return false;\n            }\n          });\n        },0)\n      })\n    },\n    /**\n     * 点击左侧三角 获取sku商品\n     * @param row {Object} 表格行数据\n     * @param expandedRows {Array} 表格行数据\n     */\n    tableDataExpandChange(row, expandedRows){\n      if(row._skuList.length) return;\n      let params = {\n        productCode: row.productCode,\n        storeId: this.transferSlipAddInfo.outStoreId\n      };\n      this.request(this.api.scb.movingAveragePrice_list, params).then(data => {\n        if(data.data && data.data.length){\n          data.data.forEach(item => {\n            // 新增提交需要的字段\n            // item.designCompanyCode = row.designCompanyCode;\n            // item.designCompanyName = row.designCompanyName;\n            // 由于导入商品字段和查询字段不同  重新赋值\n            // item.allotPrice = item.retailPrice;\n            item.stock = item.quantity;\n            item.quantity = 0;\n            // item.productType = item.fullCateName;\n            // item.goodsName = item.name;\n            // item.brandName = item.productBrandName;\n            // item.brandCode = item.productBrandCode;\n            if(this.checkedSKUTableData.length > 0){\n              for(let i = 0; i < this.checkedSKUTableData.length; i++){\n                if(this.checkedSKUTableData[i].goodsCode === item.goodsCode){\n                  item.quantity = this.checkedSKUTableData[i].quantity;\n                }\n              }\n            }\n          });\n          row._skuList = data.data;\n        }\n      });\n    },\n    /**\n     * 输入修改商品数量\n     * @param $event {Object} event\n     * @param row {Object} 表格行数据\n     */\n    goodsQuantityInput($event, row){\n      this.$nextTick(()=>{\n        let val = $event.target.value;\n        row.planBackQuantity = $event.target.value = val.replace(/[^\\d.]/g,'');\n        this.goodsQuantityChange(row);\n      })\n    },\n    /**\n     * + -修改商品数量\n     * @param row {Object} 表格行数据\n     */\n    goodsQuantityChange(row){\n      let index = this.checkedSKUTableData.findIndex(item => {\n        return item.goodsCode === row.goodsCode;\n      });\n      if(index !== -1){\n        if(row.quantity == 0){\n          this.checkedSKUTableData.splice(index, 1);\n        }else{\n          this.checkedSKUTableData[index].quantity = row.quantity;\n        }\n      }else {\n        this.checkedSKUTableData.push(row);\n      }\n    },\n\n\n    /**\n     * 搜索商品参数下拉数据及验证\n     */\n    // 验证价格区间\n    moneyRule(rule, value,callback) {\n      const reg = /^[0-9]*$/;\n      if(!reg.test(this.formData.retailPriceLowerLimit) || !reg.test(this.formData.retailPriceUpperLimit)){\n        callback(new Error('价格区间必须是数字'));\n        return\n      }\n      if(this.formData.retailPriceLowerLimit && this.formData.retailPriceUpperLimit && this.formData.retailPriceLowerLimit >= this.formData.retailPriceUpperLimit){\n        callback(new Error('价格区间下限应小于上限'));\n      }else {\n        callback();\n      }\n    },\n    // 验证数量区间\n    countRule(rule, value,callback) {\n      const reg = /^[0-9]*$/;\n      if(!reg.test(this.formData.quantityLowerLimit) || !reg.test(this.formData.quantityUpperLimit)){\n        callback(new Error('库存量区间必须是数字'));\n        return\n      }\n      if(this.formData.quantityLowerLimit && this.formData.quantityUpperLimit && this.formData.quantityLowerLimit >= this.formData.quantityUpperLimit){\n        callback(new Error('库存量区间下限应小于上限'));\n      }else {\n        callback();\n      }\n    },\n    // 获取商品分类数据\n    getClassData(){\n      //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\n      this.$common.getClassSelect(this,1).then(res =>{\n        this.classData=res.ztree;\n        this.classList=res.list;\n      })\n    },\n    // 商品分类Change\n    classChange(e){\n      if(e.length === 0){\n        this.formData.cateIdentifier = '';\n        return;\n      }\n      let cateId  = JSON.parse(JSON.stringify(e)).pop();\n      let obj = this.classList.find((item)=>(item.id == cateId));\n      this.formData.cateIdentifier = obj.identifier;\n    },\n    // 获取设计商\n    getDesignCompanyOptions(){\n      this.request(this.api.product.designCompany_list, {}).then(data => {\n        this.designCompanyOptions=data.data;\n      });\n    },\n    // 获取品牌\n    getBrandOptions(){\n      this.request(this.api.product.productBrand_list,{}).then(data => {\n        this.brandOptions= data.data;\n      });\n    }\n    /**\n     * 搜索商品参数下拉数据--end\n     */\n  },\n  // 计算属性\n  computed: {},\n  // 监听数据变化\n  watch: {}\n}\n",{"version":3,"sources":["channel_edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"channel_edit.vue","sourceRoot":"src/views/scb/channel","sourcesContent":["<style lang=\"less\" scoped>\r\n  .transfer-slip-add-goods{display: flex;\r\n    .upload-goods-btn{display: inline-block;margin-left: 15px;}\r\n    .side{width: 320px;background: #fff;margin-left: 8px;line-height: 24px;\r\n      .tabs{margin-top: 10px;}\r\n\r\n    }\r\n    .table-list{flex: 1;background: #fff;margin-top: 0;\r\n      .goods-list{\r\n        .type-list{padding-top: 0;padding-bottom: 0;}\r\n      }\r\n      .check-goods-list{\r\n\r\n      }\r\n    }\r\n    .page-more{border-top: 1px solid #e6e8ed;margin-top: 10px;\r\n      div.btn{\r\n        width: 120px;border: 1px solid #e6e8ed;border-top: 1px solid #fff;margin: -1px auto 0;text-align: center;font-size: 12px;cursor: pointer;line-height: 30px;\r\n      }\r\n    }\r\n    .index-goods-table{padding-top: 0;}\r\n  }\r\n  .transfer-slip-add-goods /deep/ .el-table__expanded-cell[class*=cell]{padding: 0;}\r\n  .transfer-slip-add-goods .txt-red /deep/ .el-input__inner{color: red;}\r\n</style>\r\n<template>\r\n  <div class=\"transfer-slip-add-goods\">\r\n    <el-dialog width=\"835px\" title=\"修改收货信息\" :visible.sync=\"dialogTableVisible\">\r\n      <el-form ref=\"addFormData\" :model=\"transferSlipAddInfo\" label-width=\"120px\" :rules=\"rules\" class=\"item-form\" size=\"small\">\r\n        <el-form-item label=\"收货人：\" prop=\"receiveMan\">\r\n          <el-input v-model=\"transferSlipAddInfo.receiveMan\" placeholder=\"请输入内容\" class=\"input-w-2\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"联系电话：\" prop=\"phone\">\r\n          <el-input v-model=\"transferSlipAddInfo.phone\" placeholder=\"请输入内容\" class=\"input-w-2\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"所在地区：\" prop=\"divisionId\">\r\n          <division v-model=\"transferSlipAddInfo.divisionId\" @set-division=\"setDivision\" width-class=\"input-w\" ref=\"division\"></division>\r\n        </el-form-item>\r\n        <el-form-item label=\"\" prop=\"addressInfo\">\r\n          <el-input v-model=\"transferSlipAddInfo.addressInfo\" placeholder=\"请输入详细地址\" class=\"input-w-2\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"\">\r\n          <el-button  size=\"small\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"changeAddress\" size=\"small\">确认</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-dialog>\r\n    <!--左侧-->\r\n    <div class=\"side\">\r\n      <div class=\"item-cont\">\r\n        <el-button size=\"small\" type=\"primary\" @click=\"settleQuery_findSettle\">已选核销商品</el-button>\r\n        <el-upload class=\"upload-goods-btn\" :action=\"uploadGoodsUrl\" :show-file-list=\"false\" :auto-upload=\"false\" :on-change=\"uploadGoodsChange\">\r\n          <el-button size=\"small\" type=\"primary\" plain>导入核销商品</el-button>\r\n        </el-upload>\r\n        <el-tabs v-model=\"activeName\" class=\"tabs\" :before-leave=\"handleBeforeClick\" type=\"card\">\r\n          <el-tab-pane label=\"结算客户\" name=\"outStoreInfo\">\r\n            <store-info :storeType=\"false\" :store-info=\"outStoreInfo\"></store-info>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </div>\r\n    </div>\r\n    <!--右侧-->\r\n    <div class=\"table-list item-margin\">\r\n      <!--商品主列表-->\r\n      <div class=\"goods-list\" v-if=\"!checkedGoodsShow\">\r\n        <!--商品主列表查询条件-->\r\n        <div>\r\n          <el-form class=\"item-form\" :model=\"formData\" label-width=\"90px\" size=\"small\" ref=\"searchForm\" inline :rules=\"rules\">\r\n            <el-form-item label=\"模糊查询：\" prop=\"searchWords\">\r\n              <el-input class=\"input-w\" placeholder=\"款号/货号/商品名称\" v-model=\"formData.filter\"></el-input>\r\n            </el-form-item>\r\n            <!-- 商品颜色 -->\r\n            <el-form-item prop=\"colorCode\" label=\"颜色：\">\r\n               <el-cascader\r\n                  class=\"input-w\"\r\n                  :options=\"colorOptions\"\r\n                  @change=\"colorCodeGet\"\r\n                  :show-all-levels=\"false\"\r\n                  :props=\"colorProps\"\r\n                  change-on-select\r\n                  ref=\"goodsColor\"\r\n               ></el-cascader>\r\n            </el-form-item>\r\n            <el-form-item label=\"品牌：\" prop=\"brandId\">\r\n              <el-select class=\"input-w\" placeholder=\"请选择\" v-model=\"formData.brandId\" clearable filterable>\r\n                <el-option v-for=\"item in brandOptions\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n           <el-form-item label=\"季节：\" prop=\"brandId\">\r\n              <el-select class=\"input-w\" placeholder=\"请选择\" v-model=\"formData.seasonalStyleCode\" clearable filterable>\r\n                <el-option v-for=\"item in codeItem_list_get.data\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"货主：\" prop=\"brandId\">\r\n              <el-select class=\"input-w\" placeholder=\"请选择\" v-model=\"formData.ownerId\" clearable filterable>\r\n                <el-option v-for=\"item in warehouseBase_goodsOwner_data.data\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button @click=\"searchTableData\" type=\"primary\" plain>搜索</el-button>\r\n              <el-button @click=\"initFormData\" plain>重置</el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div class=\"type-list item-cont\">\r\n            <!-- <check-tags :checked-data=\"formData.collocationTagIdList\"></check-tags> -->\r\n          </div>\r\n        </div>\r\n        <div class=\"item-cont index-goods-table\">\r\n          <page-table :form-data=\"formData\" :get-data=\"getTableData\" :table-data=\"tableData\">\r\n            <el-table :data=\"tableData.data\" style=\"width: 100%\" @expand-change=\"tableDataExpandChange\">\r\n              <el-table-column type=\"expand\" width=\"50\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-table :data=\"scope.row._skuList\" style=\"width: 100%\" :show-header=\"false\">\r\n                    <el-table-column label=\"占位\" width=\"50\"></el-table-column>\r\n                    <el-table-column prop=\"goodsCode\" label=\"商品款号\" width=\"200\"></el-table-column>\r\n                    <el-table-column prop=\"goodsName\" label=\"名称\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n                    <el-table-column label=\"商品图片\">\r\n                      <template slot-scope=\"scope\">\r\n                        <image-popover :img-src=\"scope.row.image\"></image-popover>\r\n                      </template>\r\n                    </el-table-column>\r\n                    <el-table-column prop=\"color\" label=\"颜色\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n                    <el-table-column prop=\"size\" label=\"规格\"></el-table-column>\r\n                    <el-table-column prop=\"brandName\" label=\"品牌\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n                    <!-- <el-table-column prop=\"fullCateName\" label=\"品类\" :show-overflow-tooltip=\"true\"></el-table-column> -->\r\n                    <el-table-column prop=\"priceTag\" label=\"吊牌价\"></el-table-column>\r\n                    <el-table-column prop=\"stock\" label=\"未核销数量\"></el-table-column>\r\n                    <el-table-column label=\"操作\" width=\"150\">\r\n                      <template slot-scope=\"scope\">\r\n                        <el-input-number v-model=\"scope.row.quantity\"  @input.native=\"goodsQuantityInput($event, scope.row)\" @change=\"goodsQuantityChange(scope.row)\" :min=\"0\" label=\"选择的数量\" size=\"mini\" :class=\"{'txt-red' : scope.row.stock < scope.row.quantity}\"></el-input-number>\r\n                      </template>\r\n                    </el-table-column>\r\n                  </el-table>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"productCode\" label=\"商品款号\"  width=\"200\"></el-table-column>\r\n              <el-table-column prop=\"goodsName\" label=\"名称\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n              <el-table-column label=\"商品图片\">\r\n                <template slot-scope=\"scope\">\r\n                  <image-popover :img-src=\"scope.row.image\"></image-popover>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column label=\"颜色\"></el-table-column>\r\n              <el-table-column label=\"规格\"></el-table-column>\r\n              <el-table-column prop=\"brandName\" label=\"品牌\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n              <!-- <el-table-column prop=\"fullCateName\" label=\"品类\" :show-overflow-tooltip=\"true\"></el-table-column> -->\r\n              <el-table-column prop=\"defaultPrice\" label=\"吊牌价\"></el-table-column>\r\n              <el-table-column prop=\"quantity\" label=\"未核销数量\"></el-table-column>\r\n              <el-table-column label=\"操作\" width=\"150\">\r\n\r\n              </el-table-column>\r\n            </el-table>\r\n          </page-table>\r\n        </div>\r\n      </div>\r\n      <!--选中的商品-->\r\n      <div class=\"check-goods-list\" v-if=\"checkedGoodsShow\">\r\n        <transfer-slip-goods-table :checked-goods-show.sync=\"checkedGoodsShow\" :table-data=\"checkedSKUTableData\" :transfer-slip-add-info=\"transferSlipAddInfo\" ref=\"transferSlipGoodsTable\"></transfer-slip-goods-table>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\n  // TODO 临时解决上传文件\r\n  import axios from 'axios'\r\n  import { getToken } from \"@/utils/auth\";\r\n\r\n\r\n  import PageTable from \"@/views/collocation/components/PageTable\";\r\n  import treeDept from '@/components/treeDept'\r\n  import CheckTags from \"@/views/collocation/components/CheckTags\";\r\n  import StoreInfo from \"../components/channelStoreInfo\";\r\n  import TransferSlipGoodsTable from \"../components/channelTransferSlipGoodsTable\";\r\n  import division from \"@/components/division\";\r\n  import ImagePopover from \"@/views/collocation/components/ImagePopover\";\r\n  import { filter } from 'minimatch';\r\n  import { get } from 'http';\r\n  export default {\r\n    // 组件\r\n    components: {\r\n      PageTable,\r\n      TransferSlipGoodsTable,\r\n      CheckTags,\r\n      StoreInfo,\r\n      ImagePopover,\r\n      division,\r\n      treeDept\r\n    },\r\n    // 数据\r\n    data() {\r\n      return {\r\n        colorOptions: [],\r\n        colorList:[],\r\n        // 选择商品颜色相关参数\r\n        colorProps: {\r\n          value: \"code\",\r\n          label: \"name\",\r\n          children: \"children\",\r\n          checkStrictly: true\r\n        },\r\n        dialogTableVisible:false,\r\n        codeItem_list_get:{},\r\n        warehouseBase_goodsOwner_data:[],\r\n        addFormData: {\r\n          // 发货人\r\n          allotMan: '',\r\n          // 发货人直属机构\r\n          organizationId: '',\r\n          organizationName: '',\r\n          // 订单类型\r\n          // orderType: '0203',\r\n          // 发货门店\r\n          outStoreId: '',\r\n          outStoreName: '',\r\n          // 收货门店\r\n          inStoreId: '',\r\n          inStoreName: '',\r\n          // 收货人\r\n          receiveMan: '',\r\n          // 电话\r\n          phone: '',\r\n          // 省市区信息\r\n          provinceName: '',\r\n          provinceCode: '',\r\n          cityName: '',\r\n          cityCode: '',\r\n          areaName: '',\r\n          areaCode: '',\r\n          divisionId: '',\r\n          // 地址\r\n          addressInfo: ''\r\n        },\r\n        // 路由参数\r\n        _orderSn: null,\r\n        _outStoreId: null,\r\n\r\n        // 默认显示门店信息 outStoreInfo: 发货门店     inStoreInfo: 收货门店\r\n        activeName: 'outStoreInfo',\r\n        // 发货门店详情\r\n        outStoreInfo: null,\r\n        // 收货门店详情\r\n        inStoreInfo: null,\r\n        // 导入商品地址\r\n        uploadGoodsUrl: this.api.FN_ALLPATH(this.api.retailStore.storeProduct_importOrderItem),\r\n        // 导入是否可点\r\n        uploadGoodsDisabled: false,\r\n        // 导入附带参数\r\n        uploadGoodsParams: {\r\n          storeId: ''\r\n        },\r\n        // 最终保存提交信息\r\n        transferSlipAddInfo: {},\r\n        // 选择的商品列表\r\n        checkedSKUTableData: [],\r\n\r\n        // 是否显示选中的\r\n        checkedGoodsShow: false,\r\n        // 查询商品参数\r\n        formData: {\r\n           // 综合搜索\r\n          filter: '',\r\n          // 颜色\r\n          color:null,\r\n          // 品牌\r\n          brandId: '',\r\n          // 季节\r\n          seasonalStyleCode:null,\r\n          // 货主\r\n          ownerId:null,\r\n          // 标签\r\n          collocationTagIdList: [],\r\n          // 当前页码\r\n          pageIndex: 1,\r\n          // 每页数量\r\n          pageSize: 10\r\n        },\r\n        // 商品主表格数据\r\n        tableData: {},\r\n\r\n        /**\r\n         * 商品查询辅助数据\r\n         */\r\n        // 验证\r\n        rules: {\r\n          money: [\r\n            { required: false, validator: this.moneyRule, trigger: 'blur'}\r\n          ],\r\n          count: [\r\n            { required: false, validator: this.countRule, trigger: 'blur'}\r\n          ]\r\n        },\r\n        // 分类映射\r\n        props:{\r\n          value: 'id',\r\n          label: 'name',\r\n          children: 'children'\r\n        },\r\n        // 分类数据\r\n        classData:[],\r\n        classList:[],\r\n        // 选中的分类\r\n        cateArr:[],\r\n        // 品牌\r\n        brandOptions:[],\r\n        // 设计商\r\n        designCompanyOptions:[]\r\n        /**\r\n         * 商品查询辅助数据--end\r\n         */\r\n      }\r\n    },\r\n    created(){\r\n      this.transferSlipAddInfo.outStoreId = this.$route.query.outStoreId;\r\n      this.codeItem_list();\r\n      this.getWarehouseList();\r\n      this.getColorOptions();\r\n    },\r\n    // 初始化数据\r\n    mounted() {\r\n      this.init();\r\n    },\r\n    // 方法\r\n    methods: {\r\n      /**\r\n       * 选择颜色\r\n       */\r\n      colorCodeGet(e) {\r\n         let color  = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.colorList.find((item)=>(item.code == color));\r\n         if(obj.parentCode ===null){\r\n            this.formData.colorSeries = obj.name;\r\n            this.formData.color = null;\r\n         }else{\r\n            this.formData.colorSeries = null;\r\n            this.formData.color =obj.name;\r\n         }\r\n      },\r\n      /**\r\n       * 获取颜色\r\n       */\r\n      getColorOptions() {\r\n        // console.log(\"从computed中获取颜色\");\r\n        let codeSet = this.$store.getters.codeData;\r\n        let treeList = [];\r\n        let codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\r\n        function toTree(data, parentCode) {\r\n          var tree = [];\r\n          var temp;\r\n          for (var i = 0; i < data.length; i++) {\r\n              if (data[i].parentCode == parentCode) {\r\n              var obj = data[i];\r\n              temp = toTree(data, data[i].code);\r\n              if (temp.length > 0) {\r\n                obj.children = temp;\r\n              }\r\n              tree.push(obj);\r\n              }\r\n          }\r\n          return tree;\r\n        }\r\n        treeList = toTree(codeList, null);\r\n        this.colorList = codeList;\r\n        this.colorOptions = treeList;\r\n      },\r\n      /**\r\n       * （获取货主）\r\n       */\r\n      getWarehouseList(item) {\r\n        const that = this;\r\n\r\n        this.request(\r\n          this.api.warehouse.warehouseBase_goodsOwner_list,\r\n        ).then(res => {\r\n          that.warehouseBase_goodsOwner_data = res;\r\n        });\r\n      },\r\n      /**\r\n       * （获取季节）\r\n       */\r\n      codeItem_list(item) {\r\n        const that = this;\r\n\r\n        this.request(\r\n          this.api.market.codeItem_list,\r\n          {\r\n            codeSetId:'06b11574-ef82-4ae4-a8a9-a25f903083df'\r\n          },\r\n          true\r\n        ).then(res => {\r\n          that.codeItem_list_get = res;\r\n        });\r\n      },\r\n      /**\r\n       * 获取返货单已选商品列表（为了获取调入结算单价）\r\n       */\r\n      settleQuery_findSettle(){\r\n        this.checkedGoodsShow = true;\r\n      },\r\n      /**\r\n       * 修改收货地址\r\n       */\r\n      changeAddress() {\r\n        console.log(this.transferSlipAddInfo)\r\n      },\r\n      // 获取省市信息\r\n      setDivision(division){\r\n        this.transferSlipAddInfo.provinceName =  division.province;\r\n        this.transferSlipAddInfo.provinceCode =  division.provinceCode;\r\n        this.transferSlipAddInfo.cityName =  division.municipality;\r\n        this.transferSlipAddInfo.cityCode =  division.municipalityCode;\r\n        this.transferSlipAddInfo.areaName =  division.area;\r\n        this.transferSlipAddInfo.areaCode =  division.areaCode;\r\n        this.transferSlipAddInfo.divisionId =  division.divisionId;\r\n      },\r\n      // 初始化\r\n      init(){\r\n        // 获取上页面参数\r\n        this.getQueryParams();\r\n        // 获取发货门店详情\r\n        this.getStoreInfo(this.transferSlipAddInfo.outStoreId, 'outStoreInfo');\r\n        // 获取设计商列表\r\n        this.getDesignCompanyOptions();\r\n        // 获取品牌列表\r\n        this.getBrandOptions();\r\n        // 获取商品分类列表\r\n        this.getClassData();\r\n        // 获取表格数据\r\n        this.getTableData();\r\n      },\r\n      // 获取上页面参数\r\n      getQueryParams() {\r\n        this._orderSn = this.$route.query.orderSn;\r\n        this._outStoreId = this.$route.query.outStoreId;\r\n        if(this._orderSn && this._outStoreId){\r\n          this.getStoreAllotOrderProductInfoList(this._orderSn, this._outStoreId)\r\n        }\r\n      },\r\n      // 获取商品详情\r\n      getStoreAllotOrderProductInfoList(orderSn, outStoreId){\r\n        this.request(this.api.order.storeAllotOrderProductInfo_list, {orderSn ,outStoreId}).then(data => {\r\n          this.checkedSKUTableData = data.data;\r\n        });\r\n      },\r\n      /**\r\n       * 获取门店详情\r\n       * @param id {String} 门店id\r\n       * @param type {String} outStoreInfo: 发货门店 inStoreInfo: 收货门店\r\n       */\r\n      getStoreInfo(id, type){\r\n        if(!this[type]){\r\n          this.request(this.api.retailStore.storeBasic_get, {id: id}).then(data => {\r\n            this[type] = data;\r\n          });\r\n        }\r\n      },\r\n      /**\r\n       * 导入商品\r\n       * @param file 上传的文件\r\n       */\r\n      uploadGoodsChange(file){\r\n        const str = file.name.split('.')[1].toLowerCase();\r\n        // 判断类型\r\n        if (!str.match(/xlsx|xls/)) {\r\n          this.$message.error('文件格式只能是 xlsx | xls格式!');\r\n          return false\r\n        }\r\n        let formData = new FormData();\r\n        let token = getToken();\r\n        formData.set('file', file.raw );\r\n        formData.set('storeId', this.transferSlipAddInfo.outStoreId );\r\n        axios({\r\n          method: \"POST\",\r\n          url: this.api.FN_ALLPATH(this.api.retailStore.storeProduct_importOrderItem),\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            accessToken: token\r\n          },\r\n          data: formData\r\n        }).then(res => {\r\n          let data = res.data;\r\n          // 合并导入的数据和已选择的数据\r\n          if(data.code && data.code == 200){\r\n            let goodsData = data.data;\r\n            if(goodsData && goodsData.length > 0){\r\n              for(let n = 0; n < goodsData.length; n++){\r\n                let goodsIndex = this.checkedSKUTableData.findIndex(item => {\r\n                  return item.goodsCode === goodsData[n].goodsCode\r\n                });\r\n                if(goodsIndex !== -1){\r\n                  this.checkedSKUTableData[goodsIndex].quantity = goodsData[n].quantity + this.checkedSKUTableData[goodsIndex].quantity;\r\n                }else {\r\n                  goodsData[n].allotPrice = goodsData[n].retailPrice;\r\n                  this.checkedSKUTableData.push(goodsData[n])\r\n                }\r\n              }\r\n            }\r\n            this.checkedGoodsShow = true;\r\n            this.$nextTick(() => {\r\n              this.$refs.transferSlipGoodsTable.init();\r\n            })\r\n          }else {\r\n            this.$notify.error({ title: '错误',message: data.message});\r\n          }\r\n        })\r\n\r\n      },\r\n      /**\r\n       * 左侧门店类型切换\r\n       * @param activeName {String} 选择的门店类型名称\r\n       */\r\n      handleBeforeClick(activeName) {\r\n        this.getStoreInfo(this.transferSlipAddInfo.inStoreId, activeName);\r\n      },\r\n      // 点击搜索\r\n      searchTableData(){\r\n        this.formData.pageIndex = 1;\r\n        this.getTableData();\r\n      },\r\n      /**\r\n       * 重置查询条件\r\n       * @param formName {String} 表单的节点ref的值\r\n       */\r\n      initFormData(formName){\r\n        Object.assign(this.formData, {\r\n          // 综合搜索\r\n          filter: '',\r\n          // 颜色\r\n          color:null,\r\n          // 品牌\r\n          brandId: '',\r\n          // 季节\r\n          seasonalStyleCode:null,\r\n          // 货主\r\n          ownerId:null,\r\n          // 标签\r\n          collocationTagIdList: [],\r\n          // 当前页码\r\n          pageIndex: 1,\r\n          // 每页数量\r\n          pageSize: 10\r\n        })\r\n        // 将商品颜色重置为空\r\n        this.$refs.goodsColor.$el.children[0].children[0].value = null;\r\n        this.$refs.goodsColor.checkedValue = [];\r\n      },\r\n      // 获取spu商品数据\r\n      getTableData() {\r\n        this.$nextTick(() => {\r\n          setTimeout(()=> {\r\n            this.$refs.searchForm.validate((valid) => {\r\n              if (valid) {\r\n                let params = JSON.parse(JSON.stringify(this.formData));\r\n                params.storeId = this.transferSlipAddInfo.outStoreId;\r\n                if(params.collocationTagIdList.length === 0){\r\n                  params.collocationTagIdList = null\r\n                }\r\n                this.request(this.api.scb.movingAveragePrice_productList, params).then(data => {\r\n                  if(data.data && data.data.length){\r\n                    data.data.forEach(item => {\r\n                      item._skuList = [];\r\n                    });\r\n                    this.tableData = data;\r\n                  }else {\r\n                    this.tableData = {};\r\n                  }\r\n                });\r\n              } else {\r\n                return false;\r\n              }\r\n            });\r\n          },0)\r\n        })\r\n      },\r\n      /**\r\n       * 点击左侧三角 获取sku商品\r\n       * @param row {Object} 表格行数据\r\n       * @param expandedRows {Array} 表格行数据\r\n       */\r\n      tableDataExpandChange(row, expandedRows){\r\n        if(row._skuList.length) return;\r\n        let params = {\r\n          productCode: row.productCode,\r\n          storeId: this.transferSlipAddInfo.outStoreId\r\n        };\r\n        this.request(this.api.scb.movingAveragePrice_list, params).then(data => {\r\n          if(data.data && data.data.length){\r\n            data.data.forEach(item => {\r\n              // 新增提交需要的字段\r\n              // item.designCompanyCode = row.designCompanyCode;\r\n              // item.designCompanyName = row.designCompanyName;\r\n              // 由于导入商品字段和查询字段不同  重新赋值\r\n              // item.allotPrice = item.retailPrice;\r\n              item.stock = item.quantity;\r\n              item.quantity = 0;\r\n              // item.productType = item.fullCateName;\r\n              // item.goodsName = item.name;\r\n              // item.brandName = item.productBrandName;\r\n              // item.brandCode = item.productBrandCode;\r\n              if(this.checkedSKUTableData.length > 0){\r\n                for(let i = 0; i < this.checkedSKUTableData.length; i++){\r\n                  if(this.checkedSKUTableData[i].goodsCode === item.goodsCode){\r\n                    item.quantity = this.checkedSKUTableData[i].quantity;\r\n                  }\r\n                }\r\n              }\r\n            });\r\n            row._skuList = data.data;\r\n          }\r\n        });\r\n      },\r\n      /**\r\n       * 输入修改商品数量\r\n       * @param $event {Object} event\r\n       * @param row {Object} 表格行数据\r\n       */\r\n      goodsQuantityInput($event, row){\r\n        this.$nextTick(()=>{\r\n          let val = $event.target.value;\r\n          row.planBackQuantity = $event.target.value = val.replace(/[^\\d.]/g,'');\r\n          this.goodsQuantityChange(row);\r\n        })\r\n      },\r\n      /**\r\n       * + -修改商品数量\r\n       * @param row {Object} 表格行数据\r\n       */\r\n      goodsQuantityChange(row){\r\n        let index = this.checkedSKUTableData.findIndex(item => {\r\n          return item.goodsCode === row.goodsCode;\r\n        });\r\n        if(index !== -1){\r\n          if(row.quantity == 0){\r\n            this.checkedSKUTableData.splice(index, 1);\r\n          }else{\r\n            this.checkedSKUTableData[index].quantity = row.quantity;\r\n          }\r\n        }else {\r\n          this.checkedSKUTableData.push(row);\r\n        }\r\n      },\r\n\r\n\r\n      /**\r\n       * 搜索商品参数下拉数据及验证\r\n       */\r\n      // 验证价格区间\r\n      moneyRule(rule, value,callback) {\r\n        const reg = /^[0-9]*$/;\r\n        if(!reg.test(this.formData.retailPriceLowerLimit) || !reg.test(this.formData.retailPriceUpperLimit)){\r\n          callback(new Error('价格区间必须是数字'));\r\n          return\r\n        }\r\n        if(this.formData.retailPriceLowerLimit && this.formData.retailPriceUpperLimit && this.formData.retailPriceLowerLimit >= this.formData.retailPriceUpperLimit){\r\n          callback(new Error('价格区间下限应小于上限'));\r\n        }else {\r\n          callback();\r\n        }\r\n      },\r\n      // 验证数量区间\r\n      countRule(rule, value,callback) {\r\n        const reg = /^[0-9]*$/;\r\n        if(!reg.test(this.formData.quantityLowerLimit) || !reg.test(this.formData.quantityUpperLimit)){\r\n          callback(new Error('库存量区间必须是数字'));\r\n          return\r\n        }\r\n        if(this.formData.quantityLowerLimit && this.formData.quantityUpperLimit && this.formData.quantityLowerLimit >= this.formData.quantityUpperLimit){\r\n          callback(new Error('库存量区间下限应小于上限'));\r\n        }else {\r\n          callback();\r\n        }\r\n      },\r\n      // 获取商品分类数据\r\n      getClassData(){\r\n        //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\r\n        this.$common.getClassSelect(this,1).then(res =>{\r\n          this.classData=res.ztree;\r\n          this.classList=res.list;\r\n        })\r\n      },\r\n      // 商品分类Change\r\n      classChange(e){\r\n        if(e.length === 0){\r\n          this.formData.cateIdentifier = '';\r\n          return;\r\n        }\r\n        let cateId  = JSON.parse(JSON.stringify(e)).pop();\r\n        let obj = this.classList.find((item)=>(item.id == cateId));\r\n        this.formData.cateIdentifier = obj.identifier;\r\n      },\r\n      // 获取设计商\r\n      getDesignCompanyOptions(){\r\n        this.request(this.api.product.designCompany_list, {}).then(data => {\r\n          this.designCompanyOptions=data.data;\r\n        });\r\n      },\r\n      // 获取品牌\r\n      getBrandOptions(){\r\n        this.request(this.api.product.productBrand_list,{}).then(data => {\r\n          this.brandOptions= data.data;\r\n        });\r\n      }\r\n      /**\r\n       * 搜索商品参数下拉数据--end\r\n       */\r\n    },\r\n    // 计算属性\r\n    computed: {},\r\n    // 监听数据变化\r\n    watch: {}\r\n  }\r\n</script>\r\n"]}]}