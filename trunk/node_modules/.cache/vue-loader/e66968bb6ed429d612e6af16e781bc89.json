{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\components\\el_upload_img_multi.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\components\\el_upload_img_multi.vue","mtime":1576239318080},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport { getToken } from \"@/utils/auth\";\r\nimport draggable from 'vuedraggable';\r\nimport Sortable from 'sortablejs';\r\nlet token = getToken();\r\n\r\nexport default {\r\n  props: {\r\n    // 请求参数\r\n    CatalogName:[String],\r\n    // 回显数据\r\n    EchoDisplayImages:[Array,String],\r\n    // 描述\r\n    describe:[String],\r\n    // 上传个数\r\n    LssUpimgLimit:[Number],\r\n    // 是否禁止\r\n    disabled:[Boolean],\r\n    // 上传图片路径\r\n    imgApi:[String, Object]\r\n  },\r\n  model:{\r\n    event:'parentRef'\r\n  },\r\n  data() {\r\n    return {\r\n      // 上传文件列表\r\n      imageArr: [],\r\n      // 头部请求token\r\n      tokenHeaders: {accessToken: token},\r\n      // 预览图片地址\r\n      dialogImageUrl: '',\r\n      // 预览图片是否显示\r\n      dialogVisible: false,\r\n      // 上传的参数\r\n      uploadData:{},\r\n      // 上传图标是否显示\r\n      isHideUpload:false\r\n    };\r\n  },\r\n  components: {\r\n    draggable\r\n  },\r\n  created() {\r\n    this.uploadData = {\r\n      catalog: this.CatalogName\r\n    };  \r\n    this.imageArr = this.EchoDisplayImages;\r\n  },\r\n  mounted(){\r\n  this.$nextTick(() => {\r\n      // 初始行拖拽\r\n      this.rowDrop()\r\n      })\r\n  },\r\n  watch: {\r\n    imageArr(){\r\n      this.isHideUpload = this.imageArr.length >= this.LssUpimgLimit;\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 表格行拖拽\r\n     */ \r\n    rowDrop() {\r\n      const tbody = this.$refs.dragTable.$el.querySelector('.el-upload-list')\r\n      const _this = this\r\n      Sortable.create(tbody, {\r\n        onEnd({ newIndex, oldIndex }) {\r\n          if(newIndex === oldIndex) return\r\n          const currRow = _this.imageArr.splice(oldIndex, 1)[0]\r\n          _this.imageArr.splice(newIndex, 0, currRow)\r\n          let listData = _this.imageArr.map((item,index) => {\r\n            return {\r\n              id: item.id,\r\n              sort: ++index\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 获取上传图片请求地址\r\n     * @return { String } 请求路径\r\n     */\r\n    imgAction() {\r\n      return this.api.FN_ALLPATH(this.imgApi);\r\n    },\r\n    /**\r\n     * 文件上传之前调用做一些拦截限制\r\n     * @param { Object } file 上传的文件信息\r\n     */\r\n    beforeAvatarUpload(file) {\r\n      const isJPG = true;\r\n      const isLtM = file.size / 1024 / 1024 < 0.2;\r\n      if (!isLtM) {\r\n        this.$message.error('上传图片大小不能超过200kb!');\r\n      }\r\n      return isJPG && isLtM;\r\n    },\r\n    /**\r\n     * 预览图片\r\n     * @param { Object } file 预览的文件信息\r\n     */\r\n    handlePictureCardPreview(file) {\r\n      this.dialogImageUrl = file.url;\r\n      this.dialogVisible = true;\r\n    },\r\n    /**\r\n     * 删除图片时调用\r\n     * @param { Object } file 删除的文件信息\r\n     * @param { Array } fileList 文件列表\r\n     */\r\n    handleRemove(file, fileList) {\r\n      this.imageArr = fileList;\r\n      this.$emit('parentRef',this.imageArr);\r\n    },\r\n    /**\r\n     * 上传图片成功时调用\r\n     * @param { Object } res 上传图片成功消息体\r\n     * @param { Object } file 删除的文件信息\r\n     * @param { Array } fileList 文件列表\r\n     */\r\n    handleAvatarSuccess(res, file, fileList) {\r\n      file.url = res.data.URL || res.data.url;\r\n      this.imageArr = fileList;\r\n      this.$emit('parentRef',this.imageArr);\r\n    },\r\n    /**\r\n     * 上传图片失败时调用\r\n     */\r\n    imgUploadError() {\r\n      this.$message.error(\"上传图片失败!\");\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["el_upload_img_multi.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"el_upload_img_multi.vue","sourceRoot":"src/views/scb/components","sourcesContent":["<template>\r\n  <div>\r\n    <el-upload\r\n      ref=\"dragTable\"\r\n      :class=\"{hide:isHideUpload}\"\r\n      :action=\"imgAction()\"\r\n      list-type=\"picture-card\"\r\n      accept=\"image/*\"\r\n      :limit=\"LssUpimgLimit\"\r\n      :headers=\"tokenHeaders\"\r\n      :file-list=\"imageArr\"\r\n      :on-preview=\"handlePictureCardPreview\"\r\n      :on-remove=\"handleRemove\"\r\n      :on-success=\"handleAvatarSuccess\"\r\n      :data=\"uploadData\"\r\n      :before-upload=\"beforeAvatarUpload\"\r\n      :on-error=\"imgUploadError\"\r\n      :disabled=\"disabled\"\r\n    >\r\n    <i class=\"el-icon-plus\"></i>\r\n    </el-upload>\r\n    <p class=\"img-tips\" v-if=\"describe\">{{ describe }}</p>\r\n    <el-dialog :visible.sync=\"dialogVisible\" append-to-body>\r\n      <img width=\"100%\" :src=\"dialogImageUrl\" alt>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nimport { getToken } from \"@/utils/auth\";\r\nimport draggable from 'vuedraggable';\r\nimport Sortable from 'sortablejs';\r\nlet token = getToken();\r\n\r\nexport default {\r\n  props: {\r\n    // 请求参数\r\n    CatalogName:[String],\r\n    // 回显数据\r\n    EchoDisplayImages:[Array,String],\r\n    // 描述\r\n    describe:[String],\r\n    // 上传个数\r\n    LssUpimgLimit:[Number],\r\n    // 是否禁止\r\n    disabled:[Boolean],\r\n    // 上传图片路径\r\n    imgApi:[String, Object]\r\n  },\r\n  model:{\r\n    event:'parentRef'\r\n  },\r\n  data() {\r\n    return {\r\n      // 上传文件列表\r\n      imageArr: [],\r\n      // 头部请求token\r\n      tokenHeaders: {accessToken: token},\r\n      // 预览图片地址\r\n      dialogImageUrl: '',\r\n      // 预览图片是否显示\r\n      dialogVisible: false,\r\n      // 上传的参数\r\n      uploadData:{},\r\n      // 上传图标是否显示\r\n      isHideUpload:false\r\n    };\r\n  },\r\n  components: {\r\n    draggable\r\n  },\r\n  created() {\r\n    this.uploadData = {\r\n      catalog: this.CatalogName\r\n    };  \r\n    this.imageArr = this.EchoDisplayImages;\r\n  },\r\n  mounted(){\r\n  this.$nextTick(() => {\r\n      // 初始行拖拽\r\n      this.rowDrop()\r\n      })\r\n  },\r\n  watch: {\r\n    imageArr(){\r\n      this.isHideUpload = this.imageArr.length >= this.LssUpimgLimit;\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 表格行拖拽\r\n     */ \r\n    rowDrop() {\r\n      const tbody = this.$refs.dragTable.$el.querySelector('.el-upload-list')\r\n      const _this = this\r\n      Sortable.create(tbody, {\r\n        onEnd({ newIndex, oldIndex }) {\r\n          if(newIndex === oldIndex) return\r\n          const currRow = _this.imageArr.splice(oldIndex, 1)[0]\r\n          _this.imageArr.splice(newIndex, 0, currRow)\r\n          let listData = _this.imageArr.map((item,index) => {\r\n            return {\r\n              id: item.id,\r\n              sort: ++index\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 获取上传图片请求地址\r\n     * @return { String } 请求路径\r\n     */\r\n    imgAction() {\r\n      return this.api.FN_ALLPATH(this.imgApi);\r\n    },\r\n    /**\r\n     * 文件上传之前调用做一些拦截限制\r\n     * @param { Object } file 上传的文件信息\r\n     */\r\n    beforeAvatarUpload(file) {\r\n      const isJPG = true;\r\n      const isLtM = file.size / 1024 / 1024 < 0.2;\r\n      if (!isLtM) {\r\n        this.$message.error('上传图片大小不能超过200kb!');\r\n      }\r\n      return isJPG && isLtM;\r\n    },\r\n    /**\r\n     * 预览图片\r\n     * @param { Object } file 预览的文件信息\r\n     */\r\n    handlePictureCardPreview(file) {\r\n      this.dialogImageUrl = file.url;\r\n      this.dialogVisible = true;\r\n    },\r\n    /**\r\n     * 删除图片时调用\r\n     * @param { Object } file 删除的文件信息\r\n     * @param { Array } fileList 文件列表\r\n     */\r\n    handleRemove(file, fileList) {\r\n      this.imageArr = fileList;\r\n      this.$emit('parentRef',this.imageArr);\r\n    },\r\n    /**\r\n     * 上传图片成功时调用\r\n     * @param { Object } res 上传图片成功消息体\r\n     * @param { Object } file 删除的文件信息\r\n     * @param { Array } fileList 文件列表\r\n     */\r\n    handleAvatarSuccess(res, file, fileList) {\r\n      file.url = res.data.URL || res.data.url;\r\n      this.imageArr = fileList;\r\n      this.$emit('parentRef',this.imageArr);\r\n    },\r\n    /**\r\n     * 上传图片失败时调用\r\n     */\r\n    imgUploadError() {\r\n      this.$message.error(\"上传图片失败!\");\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  .hide /deep/ .el-upload--picture-card {\r\n      display: none;\r\n  }\r\n  .imgdisabled /deep/ .el-upload-list__item-delete {\r\n      display: none !important;\r\n  }\r\n</style>\r\n\r\n"]}]}