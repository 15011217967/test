{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\router\\config.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\router\\config.vue","mtime":1578298135680},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 数字补0操作\nfunction addZero(num) {\n  return num < 10 ? '0' + num : num;\n}\n\nexport default {\n  name: 'router_config',\n  // 组件\n  components: {},\n  // 数据\n  data() {\n    return {\n      // 表格数据\n      tableList: [],\n      // 新增还是编辑\n      isAddItem: true,\n      // 是否显示弹窗\n      dialogVisible: false,\n      // 操作的行数据\n      checkedRowData: {},\n      // 新增或编辑参数\n      addAndEditFormData: {},\n      // 新增或编辑的类型\n      addAntEditType: ''\n    }\n  },\n  // 初始化数据\n  mounted() {\n    this.$nextTick(() => {\n      this.getAppData()\n    })\n  },\n  // 方法\n  methods: {\n    // 获取顶级中台列表\n    getAppData(){\n      this.request(this.api.system.application_List, {}).then(data => {\n        if(data.data && data.data.length) {\n          data.data.forEach(item => {\n            item.hasChildren = true\n          });\n          this.tableList = data.data;\n        }else {\n          this.tableList = [];\n        }\n      });\n    },\n    // 加载子菜单\n    tableLoad(tree, treeNode, resolve) {\n      // 判断是否动态子集\n      if(tree.code){\n        resolve(tree.sublist)\n      }else {\n        let appId = tree.id;\n        this.request(this.api.system.menu_getListMap, {appId: appId}).then(data => {\n          if(data && data.length) {\n            this.tableDataInit(data);\n            resolve(data)\n          }else {\n            resolve([])\n          }\n        });\n      }\n    },\n    // 子菜单初始化 增加hasChildren\n    tableDataInit(data){\n      if(data && data.length) {\n        data.forEach(item => {\n          if(item.sublist && item.sublist.length){\n            item.hasChildren = true;\n            this.tableDataInit(item.sublist);\n          }else {\n            item.sublist = [];\n            item.hasChildren = false;\n          }\n        })\n      }\n    },\n    /**\n     * 新增\n     * @param type   新增类型  app -> 顶级菜单   menu -> 左侧菜单   auth -> 页面按钮\n     * @param row    点击的当前父级行   如果没有为新增顶级\n     */\n    async addItem(type, row) {\n      // 保存点击的行数据\n      if(row){\n        this.checkedRowData = row;\n      }\n      this.isAddItem = true;\n      this.dialogVisible = true;\n      this.addAntEditType = type;\n      switch (type) {\n        case 'app':\n          this.addAndEditFormData = {\n            name: '',\n            routePath: '',\n            modulePath: '',\n            meta: '',\n          };\n          break;\n        case 'menu':\n          // 获取用户信息\n          let userInfo = await this.request(this.api.user.get_userinfo, {}, true);\n          this.addAndEditFormData = {\n            name: '',\n            code: '',\n            routePath: '',\n            modulePath: '',\n            meta: '',\n            type: 0,\n            appId: row.appId || row.id,\n            parentId: '',\n            parentCode: '',\n            tenantId: userInfo.tenantId\n          };\n          // 判断是否是menu的最大一级 app是父级时没有code\n          if(!row.code){\n            // 获取menu最大值\n            this.request(this.api.system.menu_getMaxMenuCode, {}).then(data => {\n              this.addAndEditFormData.code = Number(data) + 1\n            });\n          }else {\n            this.addAndEditFormData.parentId = row.id;\n            this.addAndEditFormData.parentCode = row.code;\n            if(row.sublist && row.sublist.length === 0){\n              this.addAndEditFormData.code = row.code + '.01'\n            }\n            if(row.sublist && row.sublist.length > 0){\n              // 取最大值\n              let code = '0';\n              row.sublist.forEach(item => {\n                let numAry = item.code.split('.');\n                let maxAry = code.split('.');\n                let num = Number(numAry[numAry.length - 1]);\n                let max = Number(maxAry[maxAry.length - 1]);\n                if(num >= max) {\n                  numAry[numAry.length - 1] = addZero(num + 1);\n                  code = numAry.join('.');\n                }\n              });\n              this.addAndEditFormData.code = code;\n            }\n          }\n          break;\n        case 'auth':\n          this.addAndEditFormData = {\n            menuId: row.id,\n            code: '',\n            name: '',\n            routePath: '',\n            modulePath: '',\n            meta: ''\n          };\n          if(!row.authlist) {\n            this.$set(row, 'authlist', []);\n          }\n          if(row.authlist && row.authlist.length === 0){\n            this.addAndEditFormData.code = '01'\n          }\n          if(row.authlist && row.authlist.length > 0){\n            // 取最大值\n            let max = '0';\n            row.authlist.forEach(item => {\n              let num = Number(item.code);\n              if(num >= Number(max)) {\n                max = addZero(num + 1);\n              }\n            });\n            this.addAndEditFormData.code = max;\n          }\n          break;\n      }\n    },\n    /**\n     * 编辑\n     * @param type   新增类型  app -> 顶级菜单   menu -> 左侧菜单   auth -> 页面按钮\n     * @param row    点击的当前父级行\n     */\n    editItem(type, row) {\n      this.checkedRowData = row;\n      this.isAddItem = false;\n      this.dialogVisible = true;\n      this.addAntEditType = type;\n      this.addAndEditFormData = JSON.parse(JSON.stringify(row))\n    },\n    /**\n     * 保存\n     */\n    dialogVisibleSub() {\n      let url = '';\n      switch (this.addAntEditType) {\n        case 'app':\n          url = this.api.system.application_save;\n          break;\n        case 'menu':\n          url = this.api.system.menu_save;\n          break;\n        case 'auth':\n          url = this.api.system.auth_save;\n          break;\n      }\n      this.request(url, this.addAndEditFormData).then(data => {\n        this.$notify.success({ title: '成功',message: '操作成功'});\n        switch (this.addAntEditType) {\n          case 'app':\n            this.getAppData();\n            break;\n          case 'menu':\n            // 判断是新增还是编辑  提交表单有id视为编辑\n            if(this.addAndEditFormData.id) { // 编辑\n              this.checkedRowData.name = data.name;\n              this.checkedRowData.code = data.code;\n              this.checkedRowData.routePath = data.routePath;\n              this.checkedRowData.modulePath = data.modulePath;\n              this.checkedRowData.meta = data.meta;\n              this.checkedRowData.type = data.type;\n            }else { // 新增\n              const id = this.checkedRowData.id;\n              data.sublist = [];\n              data.hasChildren = false;\n              if(this.$refs.table.store.states.lazyTreeNodeMap[id]) {\n                this.$refs.table.store.states.lazyTreeNodeMap[id].push(data);\n              }else {\n                this.checkedRowData.hasChildren = true;\n                if(this.checkedRowData.sublist){\n                  this.checkedRowData.sublist.push(data)\n                }\n              }\n            }\n            break;\n          case 'auth':\n            // 判断是新增还是编辑  提交表单有id视为编辑\n            if(this.addAndEditFormData.id) { // 编辑\n              this.checkedRowData.name = data.name;\n              this.checkedRowData.code = data.code;\n              this.checkedRowData.routePath = data.routePath;\n              this.checkedRowData.modulePath = data.modulePath;\n              this.checkedRowData.meta = data.meta;\n            }else { // 新增\n              this.checkedRowData.authlist.push(data);\n            }\n            break;\n        }\n        this.dialogVisible = false;\n      });\n    }\n  },\n  // 计算属性\n  computed: {},\n  // 监听数据变化\n  watch: {}\n}\n",{"version":3,"sources":["config.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"config.vue","sourceRoot":"src/views/router","sourcesContent":["<style lang=\"less\" scoped></style>\r\n<template>\r\n  <div class=\"router-config\">\r\n    <div class=\"item-cont\">\r\n      <div class=\"item-cont\">\r\n        <el-button size=\"small\" type=\"primary\" @click=\"addItem('app')\">新增APP</el-button>\r\n      </div>\r\n      <el-table ref=\"table\" :data=\"tableList\" style=\"width: 100%;\" row-key=\"id\" size=\"mini\" border lazy :load=\"tableLoad\" :tree-props=\"{children: 'sublist', hasChildren: 'hasChildren'}\">\r\n        <el-table-column prop=\"name\" label=\"名称\"></el-table-column>\r\n        <el-table-column prop=\"code\" label=\"编码\" width=\"120\"></el-table-column>\r\n        <el-table-column prop=\"routePath\" label=\"路由地址\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n        <el-table-column prop=\"modulePath\" label=\"模块地址\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n        <el-table-column prop=\"meta\" label=\"元信息\" :show-overflow-tooltip=\"true\"></el-table-column>\r\n        <el-table-column label=\"按钮权限\">\r\n          <template slot-scope=\"scope\" v-if=\"scope.row.authlist && scope.row.authlist.length\">\r\n            <el-button type=\"text\" size=\"small\" @click=\"editItem('auth', item)\" v-for=\"item in scope.row.authlist\" :key=\"item.id\">{{ item.name }}</el-button>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"250\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button type=\"text\" size=\"small\" @click=\"editItem('menu', scope.row)\" v-if=\"scope.row.code\">编辑</el-button>\r\n            <el-button type=\"text\" size=\"small\" @click=\"editItem('app', scope.row)\" v-else>编辑</el-button>\r\n            <el-button type=\"text\" size=\"small\" @click=\"addItem('menu', scope.row)\">新增子菜单</el-button>\r\n            <el-button type=\"text\" size=\"small\" @click=\"addItem('auth', scope.row)\" v-if=\"(!scope.row.sublist || scope.row.sublist.length === 0) && scope.row.code\">新增按钮</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n    <!--弹窗-->\r\n    <el-dialog :title=\"isAddItem ? '新增' : '编辑' \" :visible.sync=\"dialogVisible\" width=\"500px\" :close-on-click-modal=\"false\">\r\n      <el-form ref=\"form\" :model=\"addAndEditFormData\" label-width=\"80px\">\r\n        <el-form-item label=\"编码\" v-if=\"addAntEditType != 'app'\">\r\n          <el-input v-model=\"addAndEditFormData.code\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"名称\">\r\n          <el-input v-model=\"addAndEditFormData.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\">\r\n          <el-input v-model=\"addAndEditFormData.type\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"路由地址\">\r\n          <el-input type=\"textarea\" v-model=\"addAndEditFormData.routePath\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"模块地址\">\r\n          <el-input type=\"textarea\" v-model=\"addAndEditFormData.modulePath\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"元信息\">\r\n          <el-input type=\"textarea\" v-model=\"addAndEditFormData.meta\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"\">\r\n          <el-button type=\"primary\" @click=\"dialogVisibleSub\" size=\"small\">确定</el-button>\r\n          <el-button @click=\"dialogVisible = false\" size=\"small\">取消</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\n  // 数字补0操作\r\n  function addZero(num) {\r\n    return num < 10 ? '0' + num : num;\r\n  }\r\n\r\n  export default {\r\n    name: 'router_config',\r\n    // 组件\r\n    components: {},\r\n    // 数据\r\n    data() {\r\n      return {\r\n        // 表格数据\r\n        tableList: [],\r\n        // 新增还是编辑\r\n        isAddItem: true,\r\n        // 是否显示弹窗\r\n        dialogVisible: false,\r\n        // 操作的行数据\r\n        checkedRowData: {},\r\n        // 新增或编辑参数\r\n        addAndEditFormData: {},\r\n        // 新增或编辑的类型\r\n        addAntEditType: ''\r\n      }\r\n    },\r\n    // 初始化数据\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.getAppData()\r\n      })\r\n    },\r\n    // 方法\r\n    methods: {\r\n      // 获取顶级中台列表\r\n      getAppData(){\r\n        this.request(this.api.system.application_List, {}).then(data => {\r\n          if(data.data && data.data.length) {\r\n            data.data.forEach(item => {\r\n              item.hasChildren = true\r\n            });\r\n            this.tableList = data.data;\r\n          }else {\r\n            this.tableList = [];\r\n          }\r\n        });\r\n      },\r\n      // 加载子菜单\r\n      tableLoad(tree, treeNode, resolve) {\r\n        // 判断是否动态子集\r\n        if(tree.code){\r\n          resolve(tree.sublist)\r\n        }else {\r\n          let appId = tree.id;\r\n          this.request(this.api.system.menu_getListMap, {appId: appId}).then(data => {\r\n            if(data && data.length) {\r\n              this.tableDataInit(data);\r\n              resolve(data)\r\n            }else {\r\n              resolve([])\r\n            }\r\n          });\r\n        }\r\n      },\r\n      // 子菜单初始化 增加hasChildren\r\n      tableDataInit(data){\r\n        if(data && data.length) {\r\n          data.forEach(item => {\r\n            if(item.sublist && item.sublist.length){\r\n              item.hasChildren = true;\r\n              this.tableDataInit(item.sublist);\r\n            }else {\r\n              item.sublist = [];\r\n              item.hasChildren = false;\r\n            }\r\n          })\r\n        }\r\n      },\r\n      /**\r\n       * 新增\r\n       * @param type   新增类型  app -> 顶级菜单   menu -> 左侧菜单   auth -> 页面按钮\r\n       * @param row    点击的当前父级行   如果没有为新增顶级\r\n       */\r\n      async addItem(type, row) {\r\n        // 保存点击的行数据\r\n        if(row){\r\n          this.checkedRowData = row;\r\n        }\r\n        this.isAddItem = true;\r\n        this.dialogVisible = true;\r\n        this.addAntEditType = type;\r\n        switch (type) {\r\n          case 'app':\r\n            this.addAndEditFormData = {\r\n              name: '',\r\n              routePath: '',\r\n              modulePath: '',\r\n              meta: '',\r\n            };\r\n            break;\r\n          case 'menu':\r\n            // 获取用户信息\r\n            let userInfo = await this.request(this.api.user.get_userinfo, {}, true);\r\n            this.addAndEditFormData = {\r\n              name: '',\r\n              code: '',\r\n              routePath: '',\r\n              modulePath: '',\r\n              meta: '',\r\n              type: 0,\r\n              appId: row.appId || row.id,\r\n              parentId: '',\r\n              parentCode: '',\r\n              tenantId: userInfo.tenantId\r\n            };\r\n            // 判断是否是menu的最大一级 app是父级时没有code\r\n            if(!row.code){\r\n              // 获取menu最大值\r\n              this.request(this.api.system.menu_getMaxMenuCode, {}).then(data => {\r\n                this.addAndEditFormData.code = Number(data) + 1\r\n              });\r\n            }else {\r\n              this.addAndEditFormData.parentId = row.id;\r\n              this.addAndEditFormData.parentCode = row.code;\r\n              if(row.sublist && row.sublist.length === 0){\r\n                this.addAndEditFormData.code = row.code + '.01'\r\n              }\r\n              if(row.sublist && row.sublist.length > 0){\r\n                // 取最大值\r\n                let code = '0';\r\n                row.sublist.forEach(item => {\r\n                  let numAry = item.code.split('.');\r\n                  let maxAry = code.split('.');\r\n                  let num = Number(numAry[numAry.length - 1]);\r\n                  let max = Number(maxAry[maxAry.length - 1]);\r\n                  if(num >= max) {\r\n                    numAry[numAry.length - 1] = addZero(num + 1);\r\n                    code = numAry.join('.');\r\n                  }\r\n                });\r\n                this.addAndEditFormData.code = code;\r\n              }\r\n            }\r\n            break;\r\n          case 'auth':\r\n            this.addAndEditFormData = {\r\n              menuId: row.id,\r\n              code: '',\r\n              name: '',\r\n              routePath: '',\r\n              modulePath: '',\r\n              meta: ''\r\n            };\r\n            if(!row.authlist) {\r\n              this.$set(row, 'authlist', []);\r\n            }\r\n            if(row.authlist && row.authlist.length === 0){\r\n              this.addAndEditFormData.code = '01'\r\n            }\r\n            if(row.authlist && row.authlist.length > 0){\r\n              // 取最大值\r\n              let max = '0';\r\n              row.authlist.forEach(item => {\r\n                let num = Number(item.code);\r\n                if(num >= Number(max)) {\r\n                  max = addZero(num + 1);\r\n                }\r\n              });\r\n              this.addAndEditFormData.code = max;\r\n            }\r\n            break;\r\n        }\r\n      },\r\n      /**\r\n       * 编辑\r\n       * @param type   新增类型  app -> 顶级菜单   menu -> 左侧菜单   auth -> 页面按钮\r\n       * @param row    点击的当前父级行\r\n       */\r\n      editItem(type, row) {\r\n        this.checkedRowData = row;\r\n        this.isAddItem = false;\r\n        this.dialogVisible = true;\r\n        this.addAntEditType = type;\r\n        this.addAndEditFormData = JSON.parse(JSON.stringify(row))\r\n      },\r\n      /**\r\n       * 保存\r\n       */\r\n      dialogVisibleSub() {\r\n        let url = '';\r\n        switch (this.addAntEditType) {\r\n          case 'app':\r\n            url = this.api.system.application_save;\r\n            break;\r\n          case 'menu':\r\n            url = this.api.system.menu_save;\r\n            break;\r\n          case 'auth':\r\n            url = this.api.system.auth_save;\r\n            break;\r\n        }\r\n        this.request(url, this.addAndEditFormData).then(data => {\r\n          this.$notify.success({ title: '成功',message: '操作成功'});\r\n          switch (this.addAntEditType) {\r\n            case 'app':\r\n              this.getAppData();\r\n              break;\r\n            case 'menu':\r\n              // 判断是新增还是编辑  提交表单有id视为编辑\r\n              if(this.addAndEditFormData.id) { // 编辑\r\n                this.checkedRowData.name = data.name;\r\n                this.checkedRowData.code = data.code;\r\n                this.checkedRowData.routePath = data.routePath;\r\n                this.checkedRowData.modulePath = data.modulePath;\r\n                this.checkedRowData.meta = data.meta;\r\n                this.checkedRowData.type = data.type;\r\n              }else { // 新增\r\n                const id = this.checkedRowData.id;\r\n                data.sublist = [];\r\n                data.hasChildren = false;\r\n                if(this.$refs.table.store.states.lazyTreeNodeMap[id]) {\r\n                  this.$refs.table.store.states.lazyTreeNodeMap[id].push(data);\r\n                }else {\r\n                  this.checkedRowData.hasChildren = true;\r\n                  if(this.checkedRowData.sublist){\r\n                    this.checkedRowData.sublist.push(data)\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'auth':\r\n              // 判断是新增还是编辑  提交表单有id视为编辑\r\n              if(this.addAndEditFormData.id) { // 编辑\r\n                this.checkedRowData.name = data.name;\r\n                this.checkedRowData.code = data.code;\r\n                this.checkedRowData.routePath = data.routePath;\r\n                this.checkedRowData.modulePath = data.modulePath;\r\n                this.checkedRowData.meta = data.meta;\r\n              }else { // 新增\r\n                this.checkedRowData.authlist.push(data);\r\n              }\r\n              break;\r\n          }\r\n          this.dialogVisible = false;\r\n        });\r\n      }\r\n    },\r\n    // 计算属性\r\n    computed: {},\r\n    // 监听数据变化\r\n    watch: {}\r\n  }\r\n</script>\r\n"]}]}