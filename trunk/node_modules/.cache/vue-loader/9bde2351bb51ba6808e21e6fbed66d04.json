{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\data\\goods_sell_list.vue?vue&type=style&index=0&id=67d9b7e5&lang=less&scoped=true&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\data\\goods_sell_list.vue","mtime":1572415124730},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\css-loader\\index.js","mtime":1558492728478},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1558492728890},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\postcss-loader\\src\\index.js","mtime":1558492728823},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\less-loader\\dist\\cjs.js","mtime":1566193719488},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["\n.goods-sell-list{\n  .chart-list {height: 400px;padding-top: 20px;\n    .chart-bar {width: 60%;height: 100%;float: left;}\n    .chart-pig {width: 40%;height: 100%;float: left;}\n    .input-w-2 {width: 300px;}\n  }\n  .time-check{position: relative;}\n}\n",{"version":3,"sources":["goods_sell_list.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"goods_sell_list.vue","sourceRoot":"src/views/store/data","sourcesContent":["<style lang=\"less\" scoped>\r\n  .goods-sell-list{\r\n    .chart-list {height: 400px;padding-top: 20px;\r\n      .chart-bar {width: 60%;height: 100%;float: left;}\r\n      .chart-pig {width: 40%;height: 100%;float: left;}\r\n      .input-w-2 {width: 300px;}\r\n    }\r\n    .time-check{position: relative;}\r\n  }\r\n</style>\r\n<template>\r\n  <div class=\"goods-sell-list\">\r\n    <div class=\"item-margin\">\r\n      <el-form class=\"item-form\" :model=\"formData\" label-width=\"90px\" size=\"small\" ref=\"formData\" inline>\r\n        <el-form-item label=\"指标：\" prop=\"dimension\">\r\n          <el-select placeholder=\"请选择\" class=\"input-w\" v-model=\"formData.dimension\" ref=\"dimension\" @change=\"getChartData\">\r\n            <el-option v-for=\"item in goodsType\" :key=\"item.status\" :label=\"item.name\" :value=\"item.status\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"筛选门店：\" prop=\"storeIdList\">\r\n          <el-select placeholder=\"请选择\" class=\"input-w-5\" v-model=\"formData.storeIdList\" filterable clearable multiple\r\n                     :multiple-limit=\"3\" @change=\"getChartData\">\r\n            <el-option v-for=\"item in storeList\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n<!--        <el-form-item>-->\r\n<!--          <el-button @click=\"getChartData\" type=\"primary\" plain>搜索</el-button>-->\r\n<!--        </el-form-item>-->\r\n      </el-form>\r\n    </div>\r\n    <div class=\"item-margin item-cont\">\r\n      <select-date @changeDate=\"changeDate\" @selectChart=\"selectChart\" :isMonthSelect=\"false\"></select-date>\r\n      <div class=\"chart-list clearfix\">\r\n        <div class=\"chart-bar\" ref=\"chartBar\"></div>\r\n        <div class=\"chart-pig\" ref=\"chartPie\" v-show=\"formData.dimension != 5\"></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"item-margin item-cont\">\r\n      <div>\r\n        <el-button size=\"small\" type=\"primary\" @click=\"exportExcel\">导出</el-button>\r\n      </div>\r\n      <el-table :data=\"tableData\" style=\"width: 100%\" row-key=\"id\" id=\"table-data\">\r\n        <el-table-column prop=\"storeName\" label=\"门店名称\" :show-overflow-tooltip=\"true\" fixed=\"left\"></el-table-column>\r\n        <el-table-column prop=\"dimension\" label=\"指标\" :show-overflow-tooltip=\"true\" fixed=\"left\"></el-table-column>\r\n        <el-table-column :prop=\"item.prop\" :label=\"item.name\" :show-overflow-tooltip=\"true\" v-for=\"(item, index) in tableThList\" :key=\"item.prop\"></el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  import selectDate from '../components/selectDate';\r\n  // 引入基本模板\r\n  let eCharts = require('echarts/lib/echarts');\r\n  // 引入柱状图组件\r\n  require('echarts/lib/chart/bar');\r\n  // 引入饼状图图组件\r\n  require('echarts/lib/chart/pie');\r\n  // 引入提示框和title组件\r\n  require('echarts/lib/component/tooltip');\r\n  require('echarts/lib/component/title');\r\n  // 引入legend组件\r\n  require(\"echarts/lib/component/legend\");\r\n  require(\"echarts/lib/component/dataZoom\");\r\n  export default {\r\n    name: '',\r\n    // 数据\r\n    data() {\r\n      return {\r\n        colorList: ['#2eddc1','#FCCE10','#E87C25','#277bbb','#E87fff','#277aaa','#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\r\n        // 图表类型 0 分布图 1 汇总图\r\n        chartType: 0,\r\n        // 参数\r\n        formData: {\r\n          dimension: 1,\r\n          storeIdList: [],\r\n          startTime: '',\r\n          endTime: '',\r\n          productType: ''\r\n        },\r\n        // 动态表格\r\n        tableThList: [],\r\n        // 门店列表\r\n        storeList: [],\r\n        // 表格数据\r\n        tableData: [],\r\n        // 商品类型\r\n        goodsType: [\r\n          {status: 1, name: '商品品类'},\r\n          {status: 2, name: '商品颜色'},\r\n          {status: 3, name: '商品尺码'},\r\n          {status: 4, name: '商品价格'},\r\n          {status: 5, name: '商品品牌'}\r\n        ],\r\n        goodsTypeParams: {\r\n          1: 'productType',\r\n          2: 'color',\r\n          3: 'size',\r\n          4: 'priceRange',\r\n          5: 'brandName'\r\n        },\r\n        // 柱状图dom\r\n        chartBar: {\r\n          dom: null,\r\n          checked: null,\r\n          legendData: null,\r\n          xData: null,\r\n          seriesList: null\r\n        }\r\n      }\r\n    },\r\n    // 组件\r\n    components: {\r\n      selectDate\r\n    },\r\n    // 初始化数据\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        // 柱状图准备\r\n        this.chartBarBefore();\r\n        // 获取门店\r\n        this.getStoreList();\r\n      })\r\n    },\r\n    // 方法\r\n    methods: {\r\n      // 导出\r\n      exportExcel() {\r\n        require.ensure([], () => {\r\n          let {export_json_to_excel} = require(\"@/vendor/Export2Excel\");\r\n          let tHeader = [\r\n            \"门店名称\",\r\n            \"指标\",\r\n          ];\r\n          // 上面设置Excel的表格第一行的标题\r\n          let filterVal = [\r\n            \"storeName\",\r\n            \"dimension\"\r\n          ];\r\n          this.tableThList.forEach(item => {\r\n            tHeader.push(item.name);\r\n            filterVal.push(item.prop)\r\n          });\r\n          // 上面的index、nickName、name是tableData里对象的属性\r\n          let list = this.tableData; //把data里的tableData存到list\r\n          let data = this.formatJson(filterVal, list);\r\n          export_json_to_excel(tHeader, data, \"销售商品结构分析\");\r\n        });\r\n      },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => v[j]));\r\n      },\r\n      // 获取门店数据\r\n      getStoreList() {\r\n        this.request(this.api.store.storeBasic_list, {}).then(data => {\r\n          this.storeList = data.data;\r\n        });\r\n      },\r\n      // 改变日期\r\n      changeDate(val) {\r\n        if(!val) return;\r\n        this.formData.startTime = val[0];\r\n        this.formData.endTime = val[1];\r\n        // 获取数据\r\n        this.getChartData();\r\n      },\r\n      // 图类型切换\r\n      selectChart(val) {\r\n        if(!val && val !== 0) return;\r\n        this.chartType = val;\r\n        // 获取数据\r\n        this.getChartData();\r\n      },\r\n      // 获取数据\r\n      getChartData() {\r\n        this.chartBar.checked = null;\r\n        this.chartBar.xData = null;\r\n        this.chartBar.seriesList = null;\r\n        this.chartBar.legendData = null;\r\n        this.tableThList = [];\r\n        this.formData.productType = '';\r\n        if(this.chartType === 0){\r\n          this.getStoreDataStatisticsStockDetailed().then(data => {\r\n            this.tableData = data.data;\r\n            this.tableThList = data.tableThList;\r\n            if(this.formData.storeIdList.length > 0){\r\n              this.chartBarInit(data.xData, data.seriesList, data.legendData)\r\n            }\r\n          });\r\n          this.getStoreDataStatisticsStockSummary().then(data => {\r\n            this.chartPieInit(data.pieData);\r\n            if(this.formData.storeIdList.length === 0){\r\n              this.chartBarInit(data.xData, data.seriesList, []);\r\n            }\r\n          });\r\n        }\r\n        if(this.chartType === 1){\r\n          this.getStoreDataStatisticsStockSummary().then(data => {\r\n            console.log(data)\r\n            this.tableData = data.data;\r\n            this.tableThList = data.tableThList;\r\n            this.chartPieInit(data.pieData);\r\n            this.chartBarInit(data.xData, data.seriesList, []);\r\n          });\r\n        }\r\n      },\r\n      // 查询销售订单列表（分布图）\r\n      getStoreDataStatisticsStockDetailed() {\r\n        return new Promise((resolve, reject) => {\r\n          this.request(this.api.store.storeDataStatistics_listSaleProductGoods, this.formData).then(data => {\r\n            // 表格th\r\n            let tableThList = [];\r\n            // x轴数据\r\n            let xData = [];\r\n            // series数据\r\n            let seriesList = [];\r\n            // legend数据\r\n            let legendData = [];\r\n            if(data && data.length){\r\n              data.forEach((store, storeIndex) => {\r\n                store.dimension = this.$refs.dimension.selectedLabel;\r\n                legendData.push(store.storeName)\r\n                if(store.infoList && store.infoList.length){\r\n                  if(this.goodsTypeParams[this.formData.dimension] === 'priceRange'){\r\n                    store.infoList.sort((x, y) => {\r\n                      return x.priceRange - y.priceRange\r\n                    })\r\n                  }\r\n                  let ary = [];\r\n                  store.infoList.forEach((info, infoIndex) => {\r\n                    if(storeIndex === 0){\r\n                      let name = this.priceNameInit(info[this.goodsTypeParams[this.formData.dimension]]);\r\n                      xData.push(name);\r\n                      tableThList.push({\r\n                        name: name,\r\n                        prop: 'value' + infoIndex\r\n                      })\r\n                    }\r\n                    store['value' + infoIndex] = info.quantity;\r\n                    ary.push(info.quantity)\r\n                  });\r\n                  seriesList.push({\r\n                    name: store.storeName,\r\n                    type: 'bar',\r\n                    barMaxWidth: 30,\r\n                    itemStyle: {\r\n                      color: (params) => {\r\n                        if(this.chartBar.checked === params.dataIndex + '' + params.seriesIndex){\r\n                          return 'red'\r\n                        }else {\r\n                          return this.colorList[params.seriesIndex]\r\n                        }\r\n                      },\r\n                    },\r\n                    data: ary\r\n                  })\r\n                }\r\n              });\r\n            }\r\n            resolve({\r\n              data,\r\n              legendData,\r\n              xData,\r\n              seriesList,\r\n              tableThList\r\n            })\r\n          });\r\n        })\r\n      },\r\n      // 查询销售订单列表（汇总图）\r\n      getStoreDataStatisticsStockSummary() {\r\n        return new Promise((resolve, reject) => {\r\n          this.request(this.api.store.storeDataStatistics_listSaleProductGoodsSum, this.formData).then(data => {\r\n            // 表格th\r\n            let tableThList = [];\r\n            let xData = [];\r\n            let tableItem = {\r\n              storeName: '全部门店',\r\n              dimension: this.$refs.dimension.selectedLabel\r\n            };\r\n            let seriesList = [];\r\n            let pieData = [];\r\n            let ary = [];\r\n            if(data && data.length){\r\n              if(this.goodsTypeParams[this.formData.dimension] === 'priceRange'){\r\n                data.sort((x, y) => {\r\n                  return x.priceRange - y.priceRange\r\n                })\r\n              }\r\n              data.forEach((item, index) => {\r\n                ary.push(item.quantity);\r\n                tableItem['value' + index] = item.quantity;\r\n                let name = this.priceNameInit(item[this.goodsTypeParams[this.formData.dimension]]);\r\n                pieData.push({\r\n                  value: item.quantity,\r\n                  name: name\r\n                });\r\n                xData.push(name);\r\n                tableThList.push({\r\n                  name: name,\r\n                  prop: 'value' + index\r\n                })\r\n              });\r\n              seriesList.push({\r\n                name: '',\r\n                type: 'bar',\r\n                barMaxWidth: 30,\r\n                itemStyle: {\r\n                  color: (params) => {\r\n                    if(this.chartBar.checked === params.dataIndex + '' + params.seriesIndex){\r\n                      return 'red'\r\n                    }else {\r\n                      return this.colorList[params.seriesIndex]\r\n                    }\r\n                  },\r\n                },\r\n                data: ary\r\n              });\r\n            }\r\n            resolve({\r\n              data: [tableItem],\r\n              xData,\r\n              seriesList,\r\n              pieData,\r\n              tableThList\r\n            })\r\n          });\r\n        });\r\n      },\r\n      // 销售商品--根据商品类型统计分类明细\r\n      getStoreDataStatisticsStockCategoryDetailed(urlConfig, storeName) {\r\n        let params = {};\r\n        if(storeName){\r\n          let store = this.storeList.find(item => {\r\n            return item.name === storeName\r\n          });\r\n          params = JSON.parse(JSON.stringify(this.formData));\r\n          params.storeIdList = [store.id]\r\n        }else{\r\n          params = this.formData\r\n        }\r\n        this.request(urlConfig, params).then(data => {\r\n          let pieData = [];\r\n          if(data && data.length){\r\n            data.forEach( item => {\r\n              let name = this.priceNameInit(item[this.goodsTypeParams[this.formData.dimension]]);\r\n              pieData.push({\r\n                name: name,\r\n                value: item.quantity\r\n              })\r\n            })\r\n          }\r\n          this.chartPieInit(pieData);\r\n        });\r\n      },\r\n      // 初始价格区间\r\n      priceNameInit(name){\r\n        let newName;\r\n        if(this.goodsTypeParams[this.formData.dimension] === 'priceRange'){\r\n          switch(name) {\r\n            case '499':\r\n              newName = '0-499';\r\n              break;\r\n            case '999':\r\n              newName = '500-999';\r\n              break;\r\n            case '1499':\r\n              newName = '1000-1499';\r\n              break;\r\n            case '1999':\r\n              newName = '1500-1999';\r\n              break;\r\n            case '2999':\r\n              newName = '2000-2999';\r\n              break;\r\n            case '3000':\r\n              newName = '3000及以上';\r\n              break;\r\n            default:\r\n              newName = name\r\n          }\r\n        }else {\r\n          newName = name\r\n        }\r\n        return newName\r\n      },\r\n      // 因echarts 重复渲染click事件重复添加 暂时解决 先获取dom添加click事件\r\n      chartBarBefore(){\r\n        this.chartBar.dom = eCharts.init(this.$refs.chartBar);\r\n        this.chartBar.dom.on('click',params => {\r\n          if(this.formData.dimension === 3 || this.formData.dimension === 4) return;\r\n          let storeName = params.seriesName;\r\n          this.chartBar.checked = params.dataIndex + '' + params.seriesIndex;\r\n          this.chartBarInit(this.chartBar.xData, this.chartBar.seriesList, this.chartBar.legendData);\r\n          if(this.formData.dimension === 1){\r\n            this.formData.productType = params.name;\r\n            let urlConfig = this.api.store.storeDataStatistics_saleProductGoodsTypeDetailed;\r\n            this.getStoreDataStatisticsStockCategoryDetailed(urlConfig, storeName)\r\n          }\r\n          if(this.formData.dimension === 2){\r\n            this.formData.color = params.name;\r\n            let urlConfig = this.api.store.storeDataStatistics_saleProductGoodsColorDetailed;\r\n            this.getStoreDataStatisticsStockCategoryDetailed(urlConfig, storeName)\r\n          }\r\n        });\r\n      },\r\n      /**\r\n       * 门店信息柱状图显示\r\n       * @param xData   x轴data\r\n       * @param seriesList series数据\r\n       * @param legendData legend数据\r\n       */\r\n      chartBarInit(xData, seriesList, legendData) {\r\n        this.chartBar.xData = xData;\r\n        this.chartBar.legendData = legendData;\r\n        this.chartBar.seriesList = seriesList;\r\n        let option = {\r\n          animation: false,\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {            // 坐标轴指示器，坐标轴触发有效\r\n              type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'\r\n            }\r\n          },\r\n          dataZoom: [\r\n            {\r\n              type: 'slider',\r\n              show: true,\r\n              xAxisIndex: [0],\r\n              start: 0,\r\n              end: 100\r\n            },\r\n            {\r\n              type: 'inside',\r\n              xAxisIndex: [0],\r\n              start: 0,\r\n              end: 100\r\n            }\r\n          ],\r\n          legend: {\r\n            data: legendData\r\n          },\r\n          grid: {\r\n            top: '6%',\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '12%',\r\n            containLabel: true\r\n          },\r\n          xAxis: [\r\n            {\r\n              type: 'category',\r\n              // 坐标轴轴线相关设置\r\n              axisLine: {\r\n                lineStyle: {\r\n                  color: '#dcdfe6'\r\n                }\r\n              },\r\n              // 坐标轴刻度相关设置\r\n              axisTick: {\r\n                show: false\r\n              },\r\n              // 坐标轴在 grid 区域中的分隔线\r\n              splitLine: {\r\n                show: false\r\n              },\r\n              // 坐标轴刻度标签的相关设置\r\n              axisLabel: {\r\n                show: true,\r\n                color: '#555'\r\n              },\r\n              data: xData\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: 'value',\r\n              // 坐标轴轴线相关设置\r\n              axisLine: {\r\n                show: false,\r\n                lineStyle: {\r\n                  color: '#dcdfe6'\r\n                }\r\n              },\r\n              // 坐标轴刻度相关设置\r\n              axisTick: {\r\n                show: false\r\n              },\r\n              // 坐标轴在 grid 区域中的分隔线\r\n              splitLine: {\r\n                show: true,\r\n                lineStyle: {\r\n                  type: 'solid'\r\n                }\r\n              },\r\n              // 坐标轴刻度标签的相关设置\r\n              axisLabel: {\r\n                show: true,\r\n                color: '#555'\r\n              },\r\n            }\r\n          ],\r\n          series: seriesList\r\n        };\r\n        this.chartBar.dom.clear();\r\n        this.chartBar.dom.setOption(option);\r\n      },\r\n      /**\r\n       * 门店信息饼状图显示\r\n       * @param data 显示数据\r\n       */\r\n      chartPieInit(data) {\r\n        let chartPie = eCharts.init(this.$refs.chartPie);\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'item'\r\n          },\r\n          series: [\r\n            {\r\n              type: 'pie',\r\n              radius: '55%',\r\n              center: ['50%', '60%'],\r\n              data: data,\r\n              label: {\r\n                formatter: '{b}: {d}%'\r\n              },\r\n              itemStyle: {\r\n                emphasis: {\r\n                  shadowBlur: 10,\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          color: this.colorList\r\n        };\r\n        chartPie.clear();\r\n        chartPie.setOption(option);\r\n      }\r\n    },\r\n    // 计算属性\r\n    computed: {},\r\n    // 监听数据变化\r\n    watch: {}\r\n  }\r\n</script>\r\n"]}]}