{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\customAttribute\\series_dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\customAttribute\\series_dialog.vue","mtime":1574160264350},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/** 已选数据 */\r\nlet selectedSeriesList=[];\r\nexport default {\r\n  name: \"tp-series-dialog\",\r\n  data() {\r\n    return {\r\n      filtersData: {\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        cateIdentifier:\"\",\r\n        searchWords: \"\",\r\n        valid: true\r\n      },\r\n      seriesDialogVisible: false,\r\n      tableListData: [],\r\n      total: 0,\r\n      logType: \"\",\r\n      cateName:\"\",\r\n      parentDataIndex:0,\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n\r\n  },\r\n  methods: {\r\n    init(){\r\n      this.filtersData= {\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        cateIdentifier:\"\",\r\n        searchWords: \"\",\r\n        valid: true\r\n      }\r\n      this.tableListData=[];\r\n      this.parentDataIndex=0;\r\n      this.cateName='';\r\n      this.logType='';\r\n      selectedSeriesList=[];\r\n    },\r\n    popupInit(_item, _index,dialogType) {\r\n      this.parentDataIndex=_index;\r\n      this.logType = dialogType;\r\n      this.filtersData.cateIdentifier =_item.cateIdentifier;\r\n      this.cateName=_item.cateName;\r\n      selectedSeriesList=_item.customizedSetProductGoodses;\r\n      this.getTableList();\r\n      this.seriesDialogVisible = true;\r\n    },\r\n    getTableList() {\r\n      this.request(\r\n        this.api.product.customizedProduct_list,\r\n        this.filtersData\r\n      ).then(data => {\r\n        let _data = data.data,\r\n          _dataLen = _data.length;\r\n        for (let i = 0; i < _dataLen; i++) {\r\n          _data[i].isShow = true;\r\n          _data[i].isType = 1;\r\n          _data[i]._cid = \"\";\r\n        }\r\n        this.tableListData = _data;\r\n        this.total = data.totalCount;\r\n      });\r\n    },\r\n    //改变状态  先弃用 父组件传入数据触发\r\n    selectedArr() {\r\n      if (this.tableListData.length <= 0) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < this.tableListData.length; i++) {\r\n        this.tableListData[i]._checkbox = false;\r\n      }\r\n      let listData = selectedSeriesList;\r\n      for (let k = 0; k < listData.length; k++) {\r\n        for (let j = 0; j < this.tableListData.length; j++) {\r\n          if (listData[k].materialId == this.tableListData[j].materialId) {\r\n            this.tableListData[j]._checkbox = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 单选发生改变\r\n     * 当单选发生改变时 把新增的勾选 放入数组中\r\n     *\r\n     */\r\n    tableChangeCheckbox(elem, row) {\r\n      let index = selectedSeriesList.findIndex(\r\n        item => item.customizedProductGoodsId  == row.customizedProductGoodsId\r\n      );\r\n      if (elem) {\r\n        if(selectedSeriesList.length >= 9){\r\n          this.$message.error('已超过最大选择数量9')\r\n          row._checkbox = false;\r\n          return false\r\n        }\r\n        //新增\r\n        if (index == -1) {\r\n          selectedSeriesList.push(row);\r\n        }\r\n      } else {\r\n        //删除\r\n        this.removeList(index);\r\n      }\r\n    },\r\n    removeList(_index) {\r\n      if (_index != -1) {\r\n        selectedSeriesList.splice(_index, 1);\r\n      }\r\n    },\r\n    //搜索\r\n    handleSearch() {\r\n      this.filtersData.pageIndex = 1;\r\n      this.getTableList();\r\n    },\r\n    //清空重置\r\n    handleResetFilters(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n    //当前页数修改时发生改变\r\n    handleCurrentChange(val) {\r\n      this.filtersData.pageIndex = val;\r\n      this.getTableList();\r\n    },\r\n    // 每页显示多少条时发生改变\r\n    handleSizeChange(val) {\r\n      this.filtersData.pageSize = val;\r\n      this.getTableList();\r\n    },\r\n    /**\r\n     * 修改保存\r\n     * 数据新增 或者删除\r\n     * 向父组件传入数据\r\n     */\r\n    submitForm() {\r\n      let selectedSerie= this.$common.deepCopy(selectedSeriesList);\r\n      let setParaentData=[];\r\n      for (let i = 0; i < selectedSerie.length; i++) {\r\n        setParaentData.push({\r\n          customizedProductGoodsId:selectedSerie[i].customizedProductGoodsId,\r\n          customizedProductGoodsName:selectedSerie[i].customizedProductGoodsName,\r\n          customizedProductId:selectedSerie[i].productId,\r\n          customizedProductName:selectedSerie[i].productName,\r\n          cateId:selectedSerie[i].cateId,\r\n          defaultStatus:selectedSerie[i].defaultStatus == true?selectedSerie[i].defaultStatus:false,\r\n          price:selectedSerie[i].price,\r\n          image:selectedSerie[i].image\r\n        })\r\n      }\r\n      this.$emit(\r\n        \"setParentSeriesData\",\r\n        this.$common.deepCopy(setParaentData),\r\n         this.parentDataIndex\r\n      );\r\n     this.closeDialog();\r\n    },\r\n    //点击获取子元素插入数组\r\n    childrenIsShow(row) {\r\n      let _id = row.id; //当前数据ID\r\n      let _type = row.isType; //状态 1 关闭 0 打开\r\n      if (_type == \"1\") {\r\n        //当前为关闭状态 需请求接口获取子元素\r\n        row.isType = 0;\r\n        this.getChildData(row, _id);\r\n      } else {\r\n        //当前为打开状态 需删除子元素\r\n        row.isType = 1;\r\n        this.removeChildData(row);\r\n      }\r\n    },\r\n    //获取子集\r\n    getChildData(row, _id) {\r\n      let _index = this.tableListData.findIndex(\r\n        item => item.id == _id\r\n      );\r\n      if (!row._chilren) {\r\n        this.request(\r\n          this.api.product.customizedSetProductGoods_list,\r\n          {productId:row.id,valid: true}\r\n        ).then(res => {\r\n            console.log(res);\r\n          let _data = res.data;\r\n          let _dataLen =_data.length;\r\n                //全部勾选false\r\n          for (let i = 0; i < _dataLen; i++) {\r\n            // _data[i]._subset = true;\r\n            _data[i]._checkbox = false;\r\n            _data[i].customizedProductGoodsId= _data[i].id;\r\n            _data[i].customizedProductGoodsName= _data[i].name;\r\n            _data[i].defaultStatus=false;\r\n            _data[i].id=null;\r\n          }\r\n            //获取数据后 从已有列表中找出已勾选分类\r\n            //循环 改变勾选状态\r\n            let listData = selectedSeriesList;\r\n            //找到已有的 改成true\r\n            if (listData.length >= 0) {\r\n              for (let k = 0; k < listData.length; k++) {\r\n                for (let j = 0; j < _dataLen; j++) {\r\n                  if (listData[k].customizedProductGoodsId == _data[j].customizedProductGoodsId) {\r\n                    _data[j]._checkbox = true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          row._chilren = _data;\r\n          //根据下标插入进去 获取ID 在数组中的下标\r\n          this.tableListData.splice(_index + 1, 0, ..._data);\r\n          //获取子集id存入 元素属性\r\n          let arr = [];\r\n          for (let { customizedProductGoodsId } of _data) {\r\n            arr.push(customizedProductGoodsId);\r\n          }\r\n          row._cid = arr.join();\r\n        });\r\n      } else {\r\n        this.tableListData.splice(_index + 1, 0, ...row._chilren);\r\n      }\r\n    },\r\n    //删除子集\r\n    removeChildData(row) {\r\n      let cid = row._cid;\r\n      let cidArr = cid.split(\",\");\r\n      let _table = this.tableListData,\r\n        tableLen = _table.length;\r\n      for (let i = 0; i < cidArr.length; i++) {\r\n        for (let j = 0; j < this.tableListData.length; j++) {\r\n          if (cidArr[i] == this.tableListData[j].customizedProductGoodsId) {\r\n            this.tableListData.splice(j, 1);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //关闭\r\n    closeDialog() {\r\n      this.seriesDialogVisible = false;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["series_dialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"series_dialog.vue","sourceRoot":"src/components/customAttribute","sourcesContent":["<template>\r\n  <el-dialog\r\n    v-if=\"seriesDialogVisible\"\r\n    title=\"选择SKU\"\r\n    :visible.sync=\"seriesDialogVisible\"\r\n    class=\"alarmPopup\"\r\n    width=\"1000px\"\r\n    append-to-body\r\n  >\r\n    <div class=\"dialog-search\">\r\n      <el-form\r\n        class=\"item-form\"\r\n        :model=\"filtersData\"\r\n        label-width=\"90px\"\r\n        size=\"small\"\r\n        ref=\"filtersForm\"\r\n        inline\r\n      >\r\n        <el-form-item prop=\"materialCateIdentifier\" label=\"分类：\">\r\n          <el-input class=\"input-w\" disabled  v-model=\"cateName\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"searchWords\" label=\"综合搜索：\">\r\n          <el-input class=\"input-w\" placeholder=\"请输入内容\" v-model=\"filtersData.searchWords\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button @click=\"handleSearch\" type=\"primary\" plain>搜索</el-button>\r\n          <el-button @click=\"handleResetFilters('filtersForm')\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n    <div>\r\n      <el-table\r\n        :data=\"tableListData\"\r\n        stripe\r\n        empty-text=\"暂无数据\"\r\n        header-align=\"center\"\r\n        header-row-class-name=\"item-table-header\"\r\n        :highlight-current-row=\"true\"\r\n        height=\"400\"\r\n      >\r\n        <el-table-column align=\"center\" width=\"50\">\r\n          <template slot-scope=\"scope\">\r\n            <i\r\n              @click=\"childrenIsShow(scope.row)\"\r\n              v-if=\"scope.row.isShow\"\r\n              :class=\"scope.row.isType == 1 ?'el-icon-circle-plus-outline i-cursor' : 'el-icon-remove-outline i-cursor'\"\r\n            ></i>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"cateName\" align=\"center\" label=\"商品分类\" min-width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"name\" align=\"center\" label=\"名称\" min-width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"image\" align=\"center\" label=\"图片\" min-width=\"100\">\r\n            <template slot-scope=\"scope\">\r\n                  <img class=\"table-img-wh\" :src=\"scope.row.image\" alt>\r\n                </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"price\" align=\"center\" label=\"价格\" min-width=\"100\"></el-table-column>\r\n        <el-table-column\r\n          fixed=\"right\"\r\n          label-class-name=\"text-center\"\r\n          class-name=\"text-center\"\r\n          align=\"center\"\r\n          label=\"操作\"\r\n          width=\"100\"\r\n        >\r\n          <template slot-scope=\"scope\">\r\n            <el-checkbox\r\n              v-if=\"!scope.row.isShow\"\r\n              @change=\"tableChangeCheckbox($event,scope.row)\"\r\n              v-model=\"scope.row._checkbox\"\r\n            ></el-checkbox>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <div class=\"pagination mt-10 mb-20\">\r\n        <el-pagination\r\n          class=\"mr-20\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n          :current-page=\"filtersData.pageIndex\"\r\n          :page-sizes=\"[10,20,30,40,50]\"\r\n          :page-size=\"filtersData.pageSize\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n        ></el-pagination>\r\n      </div>\r\n    </div>\r\n    <div class=\"item-right\">\r\n      <el-button size=\"small\" @click=\"closeDialog\">取消</el-button>\r\n      <el-button size=\"small\" @click=\"submitForm()\" type=\"primary\">确定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\n/** 已选数据 */\r\nlet selectedSeriesList=[];\r\nexport default {\r\n  name: \"tp-series-dialog\",\r\n  data() {\r\n    return {\r\n      filtersData: {\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        cateIdentifier:\"\",\r\n        searchWords: \"\",\r\n        valid: true\r\n      },\r\n      seriesDialogVisible: false,\r\n      tableListData: [],\r\n      total: 0,\r\n      logType: \"\",\r\n      cateName:\"\",\r\n      parentDataIndex:0,\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n\r\n  },\r\n  methods: {\r\n    init(){\r\n      this.filtersData= {\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        cateIdentifier:\"\",\r\n        searchWords: \"\",\r\n        valid: true\r\n      }\r\n      this.tableListData=[];\r\n      this.parentDataIndex=0;\r\n      this.cateName='';\r\n      this.logType='';\r\n      selectedSeriesList=[];\r\n    },\r\n    popupInit(_item, _index,dialogType) {\r\n      this.parentDataIndex=_index;\r\n      this.logType = dialogType;\r\n      this.filtersData.cateIdentifier =_item.cateIdentifier;\r\n      this.cateName=_item.cateName;\r\n      selectedSeriesList=_item.customizedSetProductGoodses;\r\n      this.getTableList();\r\n      this.seriesDialogVisible = true;\r\n    },\r\n    getTableList() {\r\n      this.request(\r\n        this.api.product.customizedProduct_list,\r\n        this.filtersData\r\n      ).then(data => {\r\n        let _data = data.data,\r\n          _dataLen = _data.length;\r\n        for (let i = 0; i < _dataLen; i++) {\r\n          _data[i].isShow = true;\r\n          _data[i].isType = 1;\r\n          _data[i]._cid = \"\";\r\n        }\r\n        this.tableListData = _data;\r\n        this.total = data.totalCount;\r\n      });\r\n    },\r\n    //改变状态  先弃用 父组件传入数据触发\r\n    selectedArr() {\r\n      if (this.tableListData.length <= 0) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < this.tableListData.length; i++) {\r\n        this.tableListData[i]._checkbox = false;\r\n      }\r\n      let listData = selectedSeriesList;\r\n      for (let k = 0; k < listData.length; k++) {\r\n        for (let j = 0; j < this.tableListData.length; j++) {\r\n          if (listData[k].materialId == this.tableListData[j].materialId) {\r\n            this.tableListData[j]._checkbox = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 单选发生改变\r\n     * 当单选发生改变时 把新增的勾选 放入数组中\r\n     *\r\n     */\r\n    tableChangeCheckbox(elem, row) {\r\n      let index = selectedSeriesList.findIndex(\r\n        item => item.customizedProductGoodsId  == row.customizedProductGoodsId\r\n      );\r\n      if (elem) {\r\n        if(selectedSeriesList.length >= 9){\r\n          this.$message.error('已超过最大选择数量9')\r\n          row._checkbox = false;\r\n          return false\r\n        }\r\n        //新增\r\n        if (index == -1) {\r\n          selectedSeriesList.push(row);\r\n        }\r\n      } else {\r\n        //删除\r\n        this.removeList(index);\r\n      }\r\n    },\r\n    removeList(_index) {\r\n      if (_index != -1) {\r\n        selectedSeriesList.splice(_index, 1);\r\n      }\r\n    },\r\n    //搜索\r\n    handleSearch() {\r\n      this.filtersData.pageIndex = 1;\r\n      this.getTableList();\r\n    },\r\n    //清空重置\r\n    handleResetFilters(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n    //当前页数修改时发生改变\r\n    handleCurrentChange(val) {\r\n      this.filtersData.pageIndex = val;\r\n      this.getTableList();\r\n    },\r\n    // 每页显示多少条时发生改变\r\n    handleSizeChange(val) {\r\n      this.filtersData.pageSize = val;\r\n      this.getTableList();\r\n    },\r\n    /**\r\n     * 修改保存\r\n     * 数据新增 或者删除\r\n     * 向父组件传入数据\r\n     */\r\n    submitForm() {\r\n      let selectedSerie= this.$common.deepCopy(selectedSeriesList);\r\n      let setParaentData=[];\r\n      for (let i = 0; i < selectedSerie.length; i++) {\r\n        setParaentData.push({\r\n          customizedProductGoodsId:selectedSerie[i].customizedProductGoodsId,\r\n          customizedProductGoodsName:selectedSerie[i].customizedProductGoodsName,\r\n          customizedProductId:selectedSerie[i].productId,\r\n          customizedProductName:selectedSerie[i].productName,\r\n          cateId:selectedSerie[i].cateId,\r\n          defaultStatus:selectedSerie[i].defaultStatus == true?selectedSerie[i].defaultStatus:false,\r\n          price:selectedSerie[i].price,\r\n          image:selectedSerie[i].image\r\n        })\r\n      }\r\n      this.$emit(\r\n        \"setParentSeriesData\",\r\n        this.$common.deepCopy(setParaentData),\r\n         this.parentDataIndex\r\n      );\r\n     this.closeDialog();\r\n    },\r\n    //点击获取子元素插入数组\r\n    childrenIsShow(row) {\r\n      let _id = row.id; //当前数据ID\r\n      let _type = row.isType; //状态 1 关闭 0 打开\r\n      if (_type == \"1\") {\r\n        //当前为关闭状态 需请求接口获取子元素\r\n        row.isType = 0;\r\n        this.getChildData(row, _id);\r\n      } else {\r\n        //当前为打开状态 需删除子元素\r\n        row.isType = 1;\r\n        this.removeChildData(row);\r\n      }\r\n    },\r\n    //获取子集\r\n    getChildData(row, _id) {\r\n      let _index = this.tableListData.findIndex(\r\n        item => item.id == _id\r\n      );\r\n      if (!row._chilren) {\r\n        this.request(\r\n          this.api.product.customizedSetProductGoods_list,\r\n          {productId:row.id,valid: true}\r\n        ).then(res => {\r\n            console.log(res);\r\n          let _data = res.data;\r\n          let _dataLen =_data.length;\r\n                //全部勾选false\r\n          for (let i = 0; i < _dataLen; i++) {\r\n            // _data[i]._subset = true;\r\n            _data[i]._checkbox = false;\r\n            _data[i].customizedProductGoodsId= _data[i].id;\r\n            _data[i].customizedProductGoodsName= _data[i].name;\r\n            _data[i].defaultStatus=false;\r\n            _data[i].id=null;\r\n          }\r\n            //获取数据后 从已有列表中找出已勾选分类\r\n            //循环 改变勾选状态\r\n            let listData = selectedSeriesList;\r\n            //找到已有的 改成true\r\n            if (listData.length >= 0) {\r\n              for (let k = 0; k < listData.length; k++) {\r\n                for (let j = 0; j < _dataLen; j++) {\r\n                  if (listData[k].customizedProductGoodsId == _data[j].customizedProductGoodsId) {\r\n                    _data[j]._checkbox = true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          row._chilren = _data;\r\n          //根据下标插入进去 获取ID 在数组中的下标\r\n          this.tableListData.splice(_index + 1, 0, ..._data);\r\n          //获取子集id存入 元素属性\r\n          let arr = [];\r\n          for (let { customizedProductGoodsId } of _data) {\r\n            arr.push(customizedProductGoodsId);\r\n          }\r\n          row._cid = arr.join();\r\n        });\r\n      } else {\r\n        this.tableListData.splice(_index + 1, 0, ...row._chilren);\r\n      }\r\n    },\r\n    //删除子集\r\n    removeChildData(row) {\r\n      let cid = row._cid;\r\n      let cidArr = cid.split(\",\");\r\n      let _table = this.tableListData,\r\n        tableLen = _table.length;\r\n      for (let i = 0; i < cidArr.length; i++) {\r\n        for (let j = 0; j < this.tableListData.length; j++) {\r\n          if (cidArr[i] == this.tableListData[j].customizedProductGoodsId) {\r\n            this.tableListData.splice(j, 1);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //关闭\r\n    closeDialog() {\r\n      this.seriesDialogVisible = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.dialog-search {\r\n  border-bottom: 1px solid #eeeeee;\r\n  .item-form {\r\n    padding: 0;\r\n  }\r\n}\r\n</style>\r\n"]}]}