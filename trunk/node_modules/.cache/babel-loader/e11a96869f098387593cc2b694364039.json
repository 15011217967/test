{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\goods\\lib\\dragTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\scb\\goods\\lib\\dragTreeTable.vue","mtime":1578650543571},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.string.fixed\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport row from \"./row\";\nimport column from \"./column\";\nimport space from \"./space\";\nimport func from \"./func\";\n\ndocument.body.ondrop = function (event) {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nexport default {\n  name: \"dragTreeTable\",\n  components: {\n    row: row,\n    column: column,\n    space: space\n  },\n  computed: {\n    bodyStyle: function bodyStyle() {\n      return {\n        overflow: this.fixed !== undefined && this.fixed !== false ? 'auto' : 'hidden'\n      };\n    }\n  },\n  props: {\n    isdraggable: {\n      type: Boolean,\n      default: true\n    },\n    data: Object,\n    onDrag: Function,\n    fixed: String | Boolean,\n    height: String | Number,\n    border: String,\n    onlySameLevelCanDrag: String,\n    hightRowChange: String,\n    resize: String,\n    beforeDragOver: Function\n  },\n  data: function data() {\n    return {\n      dragX: 0,\n      dragY: 0,\n      dragId: '',\n      targetId: '',\n      whereInsert: '',\n      isDraing: false,\n      custom_field: {\n        id: 'id',\n        parent_id: 'parent_id',\n        order: 'order',\n        lists: 'lists',\n        open: 'open',\n        checked: 'checked',\n        highlight: 'highlight'\n      },\n      onCheckChange: null,\n      isContainChildren: false,\n      mouse: {\n        status: 0,\n        startX: 0,\n        curColWidth: 0,\n        curIndex: 0\n      }\n    };\n  },\n  methods: {\n    draging: function draging(e) {\n      this.isDraing = true;\n      if (e.pageX == this.dragX && e.pageY == this.dragY) return;\n      this.dragX = e.pageX;\n      this.dragY = e.clientY;\n      this.filter(e.pageX, e.clientY);\n\n      if (e.clientY < 100) {\n        window.scrollTo(0, scrollY - 6);\n      } else if (e.clientY > document.body.clientHeight - 160) {\n        window.scrollTo(0, scrollY + 6);\n      }\n    },\n    drop: function drop(event) {\n      func.clearHoverStatus();\n      this.resetTreeData();\n      this.isDraing = false;\n\n      if (this.targetId !== undefined) {\n        if (this.hightRowChange !== undefined) {\n          this.$nextTick(function () {\n            var rowEle = document.querySelector(\"[tree-id='\" + window.dragId + \"']\");\n            rowEle.style.backgroundColor = 'rgba(64,158,255,0.5)';\n            setTimeout(function () {\n              rowEle.style.backgroundColor = 'rgba(64,158,255,0)';\n            }, 2000);\n          });\n        }\n      }\n    },\n    // 查找匹配的行，处理拖拽样式\n    filter: function filter(x, y) {\n      var rows = document.querySelectorAll('.tree-row');\n      this.targetId = undefined;\n      var dragRect = window.dragParentNode.getBoundingClientRect();\n      var dragW = dragRect.left + window.dragParentNode.clientWidth;\n      var dragH = dragRect.top + window.dragParentNode.clientHeight;\n\n      if (x >= dragRect.left && x <= dragW && y >= dragRect.top && y <= dragH) {\n        // 当前正在拖拽原始块不允许插入\n        return;\n      }\n\n      var hoverBlock = undefined;\n      var targetId = undefined;\n      var whereInsert = '';\n\n      for (var i = 0; i < rows.length; i++) {\n        var _row = rows[i];\n\n        var rect = _row.getBoundingClientRect();\n\n        var rx = rect.left;\n        var ry = rect.top;\n        var rw = _row.clientWidth;\n        var rh = _row.clientHeight;\n\n        if (x > rx && x < rx + rw && y > ry && y < ry + rh) {\n          var diffY = y - ry;\n\n          var pId = _row.getAttribute('tree-p-id'); // 不允许改变层级结构，只能改变上下顺序逻辑\n\n\n          if (this.onlySameLevelCanDrag !== undefined && pId !== window.dragPId) {\n            return;\n          }\n\n          targetId = _row.getAttribute('tree-id');\n          hoverBlock = _row.children[_row.children.length - 1];\n          var rowHeight = _row.offsetHeight;\n\n          if (diffY / rowHeight > 3 / 4) {\n            whereInsert = 'bottom';\n          } else if (diffY / rowHeight > 1 / 4) {\n            // if ( this.onlySameLevelCanDrag !== undefined) {\n            if (1) {\n              // 不允许改变层级结构，只能改变上下顺序逻辑\n              return;\n            }\n\n            whereInsert = 'center';\n          } else {\n            whereInsert = 'top';\n          }\n\n          break;\n        }\n      }\n\n      if (targetId === undefined) {\n        // 匹配不到清空上一个状态\n        func.clearHoverStatus();\n        var _whereInsert = '';\n        return;\n      }\n\n      var canDrag = true;\n\n      if (this.beforeDragOver) {\n        var curRow = this.getItemById(this.data.lists, window.dragId);\n        var targetRow = this.getItemById(this.data.lists, targetId);\n        canDrag = this.beforeDragOver(curRow, targetRow, whereInsert);\n      }\n\n      if (canDrag == false) return;\n      hoverBlock.style.display = 'block';\n      var rowHeight = row.offsetHeight;\n\n      if (whereInsert == 'bottom') {\n        if (hoverBlock.children[2].style.opacity !== '0.5') {\n          func.clearHoverStatus();\n          hoverBlock.children[2].style.opacity = 0.5;\n        }\n      } else if (whereInsert == 'center') {\n        if (hoverBlock.children[1].style.opacity !== '0.5') {\n          func.clearHoverStatus();\n          hoverBlock.children[1].style.opacity = 0.5;\n        }\n      } else {\n        if (hoverBlock.children[0].style.opacity !== '0.5') {\n          func.clearHoverStatus();\n          hoverBlock.children[0].style.opacity = 0.5;\n        }\n      }\n\n      this.targetId = targetId;\n      this.whereInsert = whereInsert;\n    },\n    resetTreeData: function resetTreeData() {\n      var _this2 = this;\n\n      // return;\n      if (this.targetId === undefined) return;\n      var listKey = this.custom_field.lists;\n      var parentIdKey = this.custom_field.parent_id;\n      var idKey = this.custom_field.id;\n      var newList = [];\n      var curList = this.data.lists;\n\n      var _this = this;\n\n      var curDragItem = null;\n      var taggetItem = null;\n\n      function pushData(curList, needPushList) {\n        for (var i = 0; i < curList.length; i++) {\n          var item = curList[i];\n          var obj = func.deepClone(item);\n          obj[listKey] = [];\n\n          if (_this.targetId == item[idKey]) {\n            curDragItem = _this.getItemById(_this.data.lists, window.dragId);\n            taggetItem = _this.getItemById(_this.data.lists, _this.targetId);\n\n            if (_this.whereInsert === 'top') {\n              curDragItem[parentIdKey] = item[parentIdKey];\n              needPushList.push(curDragItem);\n              needPushList.push(obj);\n            } else if (_this.whereInsert === 'center') {\n              curDragItem[parentIdKey] = item[idKey];\n              obj.open = true;\n              obj[listKey].push(curDragItem);\n              needPushList.push(obj);\n            } else {\n              curDragItem[parentIdKey] = item[parentIdKey];\n              needPushList.push(obj);\n              needPushList.push(curDragItem);\n            }\n          } else {\n            if (window.dragId != item[idKey]) {\n              needPushList.push(obj);\n            }\n          }\n\n          if (item[listKey] && item[listKey].length) {\n            pushData(item[listKey], obj[listKey]);\n          }\n        }\n      }\n\n      pushData(curList, newList);\n      this.resetOrder(newList);\n      if (curDragItem.parentName != taggetItem.parentName) return;\n      var sortVO = [];\n      newList.forEach(function (item, index) {\n        sortVO.push({\n          id: item.id,\n          sort: index + 1\n        });\n      }); // 排列顺序\n\n      this.request(this.api.scb.categories_sort, {\n        sortVO: sortVO\n      }, true).then(function (res) {\n        _this2.warn('操作成功！'); // 操作dom\n\n\n        _this2.onDrag(newList, curDragItem, taggetItem, _this.whereInsert);\n      });\n    },\n\n    /**\n     * 提示\n     * @param { String } message 提示文案\n     * @param { String } type 提示类型\n     */\n    warn: function warn(message, type) {\n      this.$message({\n        message: message,\n        type: type || \"success\"\n      });\n    },\n    // 重置所有数据的顺序order\n    resetOrder: function resetOrder(list) {\n      var listKey = this.custom_field.lists;\n\n      for (var i = 0; i < list.length; i++) {\n        list[i][this.custom_field.order] = i;\n\n        if (list[i][listKey] && list[i][listKey].length) {\n          this.resetOrder(list[i][listKey]);\n        }\n      }\n    },\n    // 根据id获取当前行\n    getItemById: function getItemById(lists, id) {\n      var curItem = null;\n      var listKey = this.custom_field.lists;\n      var idKey = this.custom_field.id;\n\n      function getchild(curList) {\n        for (var i = 0; i < curList.length; i++) {\n          var item = curList[i];\n\n          if (item[idKey] == id) {\n            curItem = JSON.parse(JSON.stringify(item));\n            break;\n          } else if (item[listKey] && item[listKey].length) {\n            getchild(item[listKey]);\n          }\n        }\n      }\n\n      getchild(lists);\n      return curItem;\n    },\n    // 对外暴漏\n    DelById: function DelById(id) {\n      var listKey = this.custom_field.lists;\n      var orderKey = this.custom_field.order;\n      var idKey = this.custom_field.id;\n      var newList = [];\n      var curList = this.data.lists;\n\n      function pushData(curList, needPushList) {\n        var order = 0;\n\n        for (var i = 0; i < curList.length; i++) {\n          var item = curList[i];\n\n          if (item[idKey] != id) {\n            var obj = func.deepClone(item);\n            obj[orderKey] = order;\n            obj[listKey] = [];\n            needPushList.push(obj);\n            order++;\n\n            if (item[listKey] && item[listKey].length) {\n              pushData(item[listKey], obj[listKey]);\n            }\n          }\n        }\n      }\n\n      pushData(curList, newList);\n      return newList;\n    },\n    // 递归设置属性,只允许设置组件内置属性\n    deepSetAttr: function deepSetAttr(key, val, list, ids) {\n      var listKey = this.custom_field.lists;\n\n      for (var i = 0; i < list.length; i++) {\n        if (ids !== undefined) {\n          if (ids.includes(list[i][this.custom_field['id']])) {\n            list[i][this.custom_field[key]] = val;\n          }\n        } else {\n          list[i][this.custom_field[key]] = val;\n        }\n\n        if (list[i][listKey] && list[i][listKey].length) {\n          this.deepSetAttr(key, val, list[i][listKey], ids);\n        }\n      }\n    },\n    ZipAll: function ZipAll(id) {\n      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var list = func.deepClone(this.data.lists);\n      this.deepSetAttr('open', false, list);\n      this.data.lists = list;\n    },\n    OpenAll: function OpenAll(id) {\n      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var list = func.deepClone(this.data.lists);\n      this.deepSetAttr('open', true, list);\n      this.data.lists = list;\n    },\n    GetLevelById: function GetLevelById(id) {\n      var row = this.$refs.table.querySelector('[tree-id=\"' + id + '\"]');\n      var level = row.getAttribute('data-level') * 1;\n      return level;\n    },\n    HighlightRow: function HighlightRow(id) {\n      var isHighlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var list = func.deepClone(this.data.lists);\n      var ids = [id];\n\n      if (deep == true) {\n        ids = ids.concat(this.GetChildIds(id, true));\n      }\n\n      this.deepSetAttr('highlight', isHighlight, list, ids);\n      this.data.lists = list;\n    },\n    GetChildIds: function GetChildIds(id) {\n      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var ids = [];\n\n      var _this = this;\n\n      function getChilds(list, id) {\n        var listKey = _this.custom_field.lists;\n\n        for (var i = 0; i < list.length; i++) {\n          var currentPid = '';\n          var pid = list[i][_this.custom_field['parent_id']];\n\n          if (id == pid) {\n            currentPid = list[i][_this.custom_field['id']];\n            ids.push(currentPid);\n          } else {\n            currentPid = id;\n          }\n\n          if (deep == true || id == currentPid) {\n            if (list[i][listKey] && list[i][listKey].length) {\n              getChilds(list[i][listKey], currentPid);\n            }\n          }\n        }\n      }\n\n      getChilds(this.data.lists, id);\n      return ids;\n    },\n    // 全选按钮事件\n    onCheckAll: function onCheckAll(evt, func) {\n      this.setAllCheckData(this.data.lists, !!evt.target.checked);\n      var checkedList = this.getCheckedList(this.data.lists);\n      func && func(checkedList);\n    },\n    // 单个CheckBox勾选触发\n    onSingleCheckChange: function onSingleCheckChange() {\n      var checkedList = this.getCheckedList(this.data.lists);\n      this.onCheckChange && this.onCheckChange(checkedList);\n    },\n    // 根据flag批量处理数据\n    setAllCheckData: function setAllCheckData(curList, flag) {\n      var listKey = this.custom_field.lists;\n\n      for (var i = 0; i < curList.length; i++) {\n        var item = curList[i];\n        this.$set(item, 'checked', flag);\n\n        if (item[listKey] && item[listKey].length) {\n          this.setAllCheckData(item[listKey], flag);\n        }\n      }\n    },\n    // 获取所有选中的行\n    getCheckedList: function getCheckedList(lists) {\n      var listKey = this.custom_field.lists;\n      var checkedList = [];\n      var deepList = func.deepClone(lists);\n\n      function getchild(curList) {\n        for (var i = 0; i < curList.length; i++) {\n          var item = curList[i];\n\n          if (item.checked && item.isShowCheckbox != false) {\n            checkedList.push(item);\n          }\n\n          if (item[listKey] && item[listKey].length) {\n            getchild(item[listKey]);\n          }\n        }\n      }\n\n      getchild(deepList);\n      return checkedList;\n    },\n    mousedown: function mousedown(curIndex, e) {\n      var startX = e.target.getBoundingClientRect().x;\n      var curColWidth = e.target.parentElement.offsetWidth;\n      this.mouse = {\n        status: 1,\n        startX: startX,\n        curIndex: curIndex,\n        curColWidth: curColWidth\n      };\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    if (this.data.custom_field) {\n      this.custom_field = Object.assign({}, this.custom_field, this.data.custom_field);\n    }\n\n    setTimeout(function () {\n      _this3.data.columns.map(function (item) {\n        if (item.type == 'checkbox') {\n          _this3.onCheckChange = item.onChange;\n          _this3.isContainChildren = item.isContainChildren;\n        }\n      });\n    }, 100);\n    window.addEventListener('mouseup', function (e) {\n      if (_this3.mouse.status) {\n        var curX = e.clientX;\n        var line = document.querySelector('.drag-line');\n        line.style.left = '-10000px';\n        _this3.mouse.status = 0;\n        var curWidth = _this3.mouse.curColWidth;\n        var subWidth = curX - _this3.mouse.startX;\n        var lastWidth = curWidth + subWidth;\n        var cols = document.querySelectorAll('.colIndex' + _this3.mouse.curIndex);\n\n        for (var index = 0; index < cols.length; index++) {\n          var element = cols[index];\n          element.style.width = lastWidth + 'px';\n        } // 更新数据源\n\n\n        _this3.data.columns[_this3.mouse.curIndex].width = lastWidth;\n      }\n    });\n    window.addEventListener('mousemove', function (e) {\n      if (_this3.mouse.status) {\n        var endX = e.clientX;\n        var tableLeft = document.querySelector('.drag-tree-table').getBoundingClientRect().left;\n        var line = document.querySelector('.drag-line');\n        line.style.left = endX - tableLeft + 'px';\n      }\n    });\n  }\n};",{"version":3,"sources":["dragTreeTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"drag-tree-table\" ref=\"table\" v-bind:class=\"{border:border !== undefined}\">\n        <div class=\"drag-tree-table-header\">\n          <column\n            v-for=\"(item, index) in data.columns\"\n            :width=\"item.width\"\n            :flex=\"item.flex\"\n            :border=\"border === undefined ? resize : border\"\n            v-bind:class=\"['align-' + item.titleAlign, 'colIndex' + index]\"\n            :key=\"index\" >\n            <input\n              v-if=\"item.type == 'checkbox'\"\n              class=\"checkbox\"\n              type=\"checkbox\"\n              @click=\"onCheckAll($event, item.onChange)\">\n            <span v-else v-html=\"item.title\">\n            </span>\n            <div class=\"resize-line\" @mousedown=\"mousedown(index, $event)\" v-show=\"resize!== undefined\">\n\n            </div>\n          </column>\n        </div>\n        <div class=\"drag-tree-table-body\"\n          v-bind:style=\"bodyStyle\"\n          @dragover=\"draging\"\n          @dragend=\"drop\"\n          :class=\"isDraing ? 'is-draging' : '' \">\n          <row depth=\"0\" :columns=\"data.columns\" :isdraggable=\"isdraggable\"\n            :model=\"item\"\n            v-for=\"(item, index) in data.lists\"\n            :custom_field=\"custom_field\"\n            :onCheck=\"onSingleCheckChange\"\n            :border=\"border === undefined ? resize : border\"\n            :isContainChildren=\"isContainChildren\"\n            :key=\"index\">\n        </row>\n        </div>\n        <div class=\"drag-line\">\n        </div>\n    </div>\n</template>\n\n<script>\n  import row from './row'\n  import column from './column'\n  import space from './space';\n  import func from './func';\n\n  document.body.ondrop = function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  export default {\n    name: \"dragTreeTable\",\n    components: {\n        row,\n        column,\n        space\n    },\n    computed: {\n      bodyStyle(){\n        return {\n          overflow: (this.fixed !== undefined && this.fixed !== false) ? 'auto': 'hidden',\n        }\n      }\n    },\n    props: {\n      isdraggable: {\n        type: Boolean,\n        default: true\n      },\n      data: Object,\n      onDrag: Function,\n      fixed: String | Boolean,\n      height: String | Number,\n      border: String,\n      onlySameLevelCanDrag: String,\n      hightRowChange: String,\n      resize: String,\n      beforeDragOver: Function\n    },\n    data() {\n      return {\n        dragX: 0,\n        dragY: 0,\n        dragId: '',\n        targetId: '',\n        whereInsert: '',\n        isDraing: false,\n        custom_field: {\n          id: 'id',\n          parent_id: 'parent_id',\n          order: 'order',\n          lists: 'lists',\n          open: 'open',\n          checked: 'checked',\n          highlight: 'highlight'\n        },\n        onCheckChange: null,\n        isContainChildren: false,\n        mouse: {\n          status: 0,\n          startX: 0,\n          curColWidth: 0,\n          curIndex: 0\n        }\n      }\n    },\n    methods: {\n      draging(e) {\n        this.isDraing = true;\n        if (e.pageX == this.dragX && e.pageY == this.dragY) return\n        this.dragX = e.pageX;\n        this.dragY = e.clientY;\n        this.filter(e.pageX, e.clientY)\n        if (e.clientY < 100) {\n          window.scrollTo(0, scrollY - 6)\n        } else if (e.clientY > (document.body.clientHeight - 160)) {\n          window.scrollTo(0, scrollY + 6)\n        }\n      },\n      drop(event) {\n        func.clearHoverStatus()\n        this.resetTreeData()\n        this.isDraing = false;\n        if (this.targetId !== undefined) {\n          if (this.hightRowChange !== undefined) {\n            this.$nextTick(()=> {\n              var rowEle = document.querySelector(\"[tree-id='\"+window.dragId+\"']\");\n              rowEle.style.backgroundColor = 'rgba(64,158,255,0.5)';\n              setTimeout(() => {\n                rowEle.style.backgroundColor = 'rgba(64,158,255,0)';\n              }, 2000);\n            })\n          }\n        }\n      },\n      // 查找匹配的行，处理拖拽样式\n      filter(x,y) {\n\n        var rows = document.querySelectorAll('.tree-row')\n        this.targetId = undefined;\n        const dragRect = window.dragParentNode.getBoundingClientRect();\n        const dragW = dragRect.left + window.dragParentNode.clientWidth;\n        const dragH = dragRect.top + window.dragParentNode.clientHeight;\n        if (x >= dragRect.left && x <= dragW && y >= dragRect.top && y <= dragH) {\n          // 当前正在拖拽原始块不允许插入\n          return\n        }\n        let hoverBlock = undefined;\n        let targetId = undefined;\n        let whereInsert = '';\n\n        for(let i=0; i < rows.length; i++) {\n          const row = rows[i];\n          const rect = row.getBoundingClientRect();\n          const rx = rect.left;\n          const ry = rect.top;\n          const rw = row.clientWidth;\n          const rh = row.clientHeight;\n          if (x > rx && x < (rx + rw) && y > ry && y < (ry + rh)) {\n            const diffY = y - ry\n            const pId = row.getAttribute('tree-p-id');\n            // 不允许改变层级结构，只能改变上下顺序逻辑\n            if ( this.onlySameLevelCanDrag !== undefined && pId !== window.dragPId) {\n              return;\n            }\n            targetId = row.getAttribute('tree-id');\n            hoverBlock = row.children[row.children.length - 1]\n            var rowHeight = row.offsetHeight\n            if (diffY/rowHeight > 3/4) {\n              whereInsert = 'bottom'\n            } else if (diffY/rowHeight > 1/4) {\n              // if ( this.onlySameLevelCanDrag !== undefined) {\n              if (1) {\n                // 不允许改变层级结构，只能改变上下顺序逻辑\n                return;\n              }\n              whereInsert = 'center'\n            } else {\n              whereInsert = 'top'\n            }\n            break;\n          }\n        }\n        if (targetId === undefined) {\n          // 匹配不到清空上一个状态\n          func.clearHoverStatus();\n          let whereInsert = '';\n          return;\n        }\n\n        let canDrag = true;\n        if (this.beforeDragOver) {\n          const curRow = this.getItemById(this.data.lists, window.dragId);\n          const targetRow = this.getItemById(this.data.lists, targetId);\n          canDrag = this.beforeDragOver(curRow, targetRow, whereInsert);\n        }\n        if (canDrag == false) return;\n        hoverBlock.style.display = 'block'\n        var rowHeight = row.offsetHeight\n        if (whereInsert == 'bottom') {\n          if (hoverBlock.children[2].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[2].style.opacity = 0.5\n          }\n        } else if (whereInsert == 'center') {\n          if (hoverBlock.children[1].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[1].style.opacity = 0.5\n          }\n        } else {\n          if (hoverBlock.children[0].style.opacity !== '0.5') {\n            func.clearHoverStatus()\n            hoverBlock.children[0].style.opacity = 0.5\n          }\n        }\n\n\n        this.targetId = targetId;\n        this.whereInsert = whereInsert;\n      },\n      resetTreeData() {\n        // return;\n        if (this.targetId === undefined) return\n        const listKey = this.custom_field.lists\n        const parentIdKey = this.custom_field.parent_id\n        const idKey = this.custom_field.id\n        const newList = [];\n        const curList = this.data.lists;\n        const _this = this;\n        let curDragItem = null;\n        let taggetItem = null;\n        function pushData(curList, needPushList) {\n          for( let i = 0; i < curList.length; i++) {\n            const item = curList[i]\n            var obj = func.deepClone(item);\n            obj[listKey] = []\n            if (_this.targetId == item[idKey]) {\n              curDragItem = _this.getItemById(_this.data.lists, window.dragId);\n              taggetItem =  _this.getItemById(_this.data.lists, _this.targetId);\n              if (_this.whereInsert === 'top') {\n                curDragItem[parentIdKey] = item[parentIdKey]\n                needPushList.push(curDragItem)\n                needPushList.push(obj)\n              } else if (_this.whereInsert === 'center'){\n                curDragItem[parentIdKey] = item[idKey];\n                obj.open = true;\n                obj[listKey].push(curDragItem)\n                needPushList.push(obj)\n\n              } else {\n                curDragItem[parentIdKey] = item[parentIdKey]\n                needPushList.push(obj)\n                needPushList.push(curDragItem)\n              }\n            } else {\n              if (window.dragId != item[idKey]){\n                needPushList.push(obj)\n              }\n            }\n            if (item[listKey] && item[listKey].length) {\n              pushData(item[listKey], obj[listKey])\n            }\n          }\n        }\n        pushData(curList, newList)\n        this.resetOrder(newList)\n        if(curDragItem.parentName != taggetItem.parentName) return;\n        var sortVO = [];\n        newList.forEach((item, index) => {\n          sortVO.push({\n            id:item.id,\n            sort:index + 1\n          })\n        });\n        // 排列顺序\n        this.request(\n          this.api.scb.categories_sort,\n          {\n            sortVO\n          },\n          true\n        ).then(res => {\n          this.warn('操作成功！');\n          // 操作dom\n          this.onDrag(newList, curDragItem, taggetItem, _this.whereInsert);\n        });\n      },\n      /**\n       * 提示\n       * @param { String } message 提示文案\n       * @param { String } type 提示类型\n       */\n      warn(message, type) {\n        this.$message({\n          message: message,\n          type: type || \"success\"\n        });\n      },\n      // 重置所有数据的顺序order\n      resetOrder(list) {\n        const listKey = this.custom_field.lists;\n        for (var i = 0; i< list.length; i++) {\n            list[i][this.custom_field.order] = i;\n            if (list[i][listKey] && list[i][listKey].length) {\n                this.resetOrder(list[i][listKey])\n            }\n        }\n      },\n      // 根据id获取当前行\n      getItemById(lists, id) {\n        var curItem = null\n        const listKey = this.custom_field.lists\n        const idKey = this.custom_field.id\n        function getchild(curList) {\n          for( let i = 0; i < curList.length; i++) {\n            var item = curList[i]\n            if (item[idKey] == id) {\n              curItem = JSON.parse(JSON.stringify(item))\n              break\n            } else if (item[listKey] && item[listKey].length) {\n              getchild(item[listKey])\n            }\n          }\n        }\n        getchild(lists)\n        return curItem;\n      },\n      // 对外暴漏\n      DelById(id) {\n        const listKey = this.custom_field.lists\n        const orderKey = this.custom_field.order\n        const idKey = this.custom_field.id\n        const newList = [];\n        const curList = this.data.lists;\n        function pushData(curList, needPushList) {\n          let order = 0;\n          for( let i = 0; i < curList.length; i++) {\n            const item = curList[i];\n            if (item[idKey] != id) {\n              var obj = func.deepClone(item);\n              obj[orderKey] = order;\n              obj[listKey] = [];\n              needPushList.push(obj);\n              order++;\n              if (item[listKey] && item[listKey].length) {\n                pushData(item[listKey], obj[listKey])\n              }\n            }\n          }\n        }\n        pushData(curList, newList)\n        return newList;\n      },\n      // 递归设置属性,只允许设置组件内置属性\n      deepSetAttr(key, val, list, ids) {\n        const listKey = this.custom_field.lists;\n        for (var i = 0; i< list.length; i++) {\n            if (ids !== undefined) {\n              if (ids.includes(list[i][this.custom_field['id']])) {\n                list[i][this.custom_field[key]] = val;\n              }\n            } else {\n              list[i][this.custom_field[key]] = val;\n            }\n            if (list[i][listKey] && list[i][listKey].length) {\n                this.deepSetAttr(key, val, list[i][listKey], ids)\n            }\n        }\n      },\n      ZipAll(id, deep=true) {\n        let list = func.deepClone(this.data.lists);\n        this.deepSetAttr('open', false, list);\n        this.data.lists = list;\n      },\n      OpenAll(id, deep=true) {\n        let list = func.deepClone(this.data.lists);\n        this.deepSetAttr('open', true, list);\n        this.data.lists = list;\n      },\n      GetLevelById(id) {\n        var row = this.$refs.table.querySelector('[tree-id=\"'+id+'\"]');\n        var level = row.getAttribute('data-level') * 1;\n        return level\n      },\n      HighlightRow(id, isHighlight=true, deep=false) {\n        let list = func.deepClone(this.data.lists);\n        let ids = [id];\n        if (deep == true){\n          ids = ids.concat(this.GetChildIds(id, true));\n        }\n        this.deepSetAttr('highlight', isHighlight, list, ids);\n        this.data.lists = list\n      },\n      GetChildIds(id, deep=true) {\n        let ids = []\n        const _this = this;\n        function getChilds(list, id) {\n          const listKey = _this.custom_field.lists;\n          for (var i = 0; i< list.length; i++) {\n            let currentPid = '';\n            let pid = list[i][_this.custom_field['parent_id']];\n            if (id == pid) {\n              currentPid = list[i][_this.custom_field['id']]\n              ids.push(currentPid)\n            } else {\n              currentPid = id\n            }\n            if (deep == true || id == currentPid) {\n              if (list[i][listKey] && list[i][listKey].length) {\n                getChilds(list[i][listKey], currentPid)\n              }\n            }\n          }\n        }\n        getChilds(this.data.lists, id);\n        return ids\n      },\n      // 全选按钮事件\n      onCheckAll(evt, func) {\n        this.setAllCheckData(this.data.lists, !!evt.target.checked);\n        const checkedList = this.getCheckedList(this.data.lists)\n        func && func(checkedList)\n      },\n      // 单个CheckBox勾选触发\n      onSingleCheckChange() {\n        const checkedList = this.getCheckedList(this.data.lists)\n        this.onCheckChange && this.onCheckChange(checkedList)\n      },\n      // 根据flag批量处理数据\n      setAllCheckData (curList, flag) {\n        const listKey = this.custom_field.lists;\n        for( let i = 0; i < curList.length; i++) {\n          var item = curList[i];\n          this.$set(item, 'checked', flag);\n          if (item[listKey] && item[listKey].length) {\n            this.setAllCheckData(item[listKey], flag);\n          }\n        }\n      },\n      // 获取所有选中的行\n      getCheckedList(lists) {\n        const listKey = this.custom_field.lists;\n        var checkedList = [];\n        const deepList = func.deepClone(lists)\n        function getchild(curList) {\n          for( let i = 0; i < curList.length; i++) {\n            var item = curList[i]\n            if (item.checked && item.isShowCheckbox != false) {\n              checkedList.push(item)\n            }\n            if (item[listKey] && item[listKey].length) {\n              getchild(item[listKey])\n            }\n          }\n        }\n        getchild(deepList)\n        return checkedList;\n      },\n      mousedown(curIndex, e){\n        const startX = e.target.getBoundingClientRect().x;\n        const curColWidth = e.target.parentElement.offsetWidth;\n        this.mouse = {\n          status: 1,\n          startX,\n          curIndex,\n          curColWidth\n        }\n      }\n    },\n    mounted() {\n      if(this.data.custom_field) {\n        this.custom_field = Object.assign({}, this.custom_field, this.data.custom_field)\n      }\n      setTimeout(() => {\n        this.data.columns.map((item) => {\n          if(item.type == 'checkbox') {\n            this.onCheckChange = item.onChange;\n            this.isContainChildren = item.isContainChildren;\n          }\n        })\n      }, 100);\n      window.addEventListener('mouseup', e => {\n        if (this.mouse.status) {\n          const curX = e.clientX;\n          var line = document.querySelector('.drag-line');\n          line.style.left = '-10000px';\n          this.mouse.status = 0;\n          const curWidth = this.mouse.curColWidth;\n          const subWidth = curX - this.mouse.startX;\n          const lastWidth = curWidth + subWidth;\n          const cols = document.querySelectorAll('.colIndex' + this.mouse.curIndex);\n          for (let index = 0; index < cols.length; index++) {\n            const element = cols[index];\n            element.style.width = lastWidth + 'px';\n          }\n          // 更新数据源\n          this.data.columns[this.mouse.curIndex].width = lastWidth;\n        }\n      });\n      window.addEventListener('mousemove', e => {\n        if (this.mouse.status) {\n          const endX = e.clientX;\n          const tableLeft = document.querySelector('.drag-tree-table').getBoundingClientRect().left;\n          var line = document.querySelector('.drag-line');\n          line.style.left = endX - tableLeft + 'px';\n        }\n      });\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .drag-tree-table{\n    position: relative;\n    margin: 20px 0;\n    color: #606266;\n    font-size: 12px;\n    &.border{\n      border: 1px solid #eee;\n      border-right: none;\n    }\n  }\n  .drag-line{\n    position:absolute;\n    top: 0;\n    left: -1000px;\n    height: 100%;\n    width: 1px;\n    background: #ccc;\n  }\n  .drag-tree-table-header{\n    display: flex;\n    // padding: 15px 10px;\n    background: #f5f7fa;\n    height: 66px;\n    line-height: 36px;\n    box-sizing: border-box;\n    font-weight: 600;\n    .align-left{\n        text-align: left;\n    }\n    .align-right{\n        text-align: right;\n    }\n    .align-center{\n        text-align: center;\n    }\n    .tree-column{\n      user-select: none;\n    }\n  }\n  .tree-icon-hidden{\n    visibility: hidden;\n  }\n  .is-draging .tree-row:hover{\n    background: transparent !important;\n  }\n  .tree-row{\n    background-color: rgba(64,158,255,0);\n    transition: background-color 0.5s linear;\n  }\n</style>\n"],"sourceRoot":"src/views/scb/goods/lib"}]}