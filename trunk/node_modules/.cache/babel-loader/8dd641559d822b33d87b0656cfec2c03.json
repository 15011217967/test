{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\components\\selectDate.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\components\\selectDate.vue","mtime":1572415124703},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getToken } from \"@/utils/auth\";\nvar token = getToken();\nvar timeOptionRange = null;\nexport default {\n  props: {\n    // 是否按照月份筛选\n    isMonthSelect: [Boolean]\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      value: '',\n      minDate: '',\n      maxDate: '',\n      // this.nowNum == 1时不包含当前日期， this.nowNum == 0时包含当前日期\n      nowNum: 0,\n      pickerOptions: {\n        onPick: function onPick(_ref) {\n          var maxDate = _ref.maxDate,\n              minDate = _ref.minDate;\n          _this.maxDate = maxDate;\n          _this.minDate = minDate;\n        },\n        disabledDate: function disabledDate(date) {\n          var maxDate = _this.maxDate;\n          var minDate = _this.minDate;\n          var endTime = '';\n\n          if (minDate) {\n            var val = Date.now() - (new Date(_this.minDate).valueOf() + 31 * 24 * 60 * 60 * 1000);\n\n            if (val < 0) {\n              endTime = Date.now() - _this.nowNum * 24 * 60 * 60 * 1000;\n            } else {\n              endTime = new Date(_this.minDate).valueOf() + 31 * 24 * 60 * 60 * 1000;\n            }\n\n            if (minDate && maxDate) {\n              return date && date.valueOf() > endTime;\n            }\n\n            return date && (date.valueOf() > endTime || date.valueOf() < minDate.valueOf() - 31 * 24 * 60 * 60 * 1000);\n          } else {\n            return date && date.valueOf() > Date.now() - _this.nowNum * 24 * 60 * 60 * 1000;\n          }\n        }\n      },\n      // 选中筛选日期下标\n      checkDate_index: 0,\n      // 选中筛选图表下标\n      checkChart_index: 0,\n      // 筛选日期列表\n      filtersDate_list: [{\n        name: '今日',\n        type: '1'\n      }, {\n        name: '近7日',\n        type: '7'\n      }, {\n        name: '近30日',\n        type: '30'\n      }, {\n        name: '本月',\n        type: 'current'\n      }],\n      // 筛选日期列表\n      filtersDates_list: [{\n        name: '本月',\n        type: 'current'\n      }, {\n        name: '上月',\n        type: 's'\n      }, {\n        name: '上上月',\n        type: 'ss'\n      }],\n      // 筛选图表列表\n      filtersChart_list: [{\n        name: '趋势图',\n        type: 0\n      }, {\n        name: '汇总图',\n        type: 1\n      }]\n    };\n  },\n  created: function created() {\n    // 按月筛选从本月开始，具体期限从近30天开始\n    var type = this.isMonthSelect ? 'current' : '1';\n    this.$emit('changeDate', this.initDate(type));\n  },\n  mounted: function mounted() {},\n  watch: {},\n  methods: {\n    /**\r\n     * 日期筛选时\r\n     */\n    selectDate: function selectDate(dateArr) {\n      if (!dateArr) {\n        this.minDate = '';\n        this.maxDate = '';\n        return;\n      } // 重置日期选择下标\n\n\n      if (dateArr instanceof Array) {\n        this.checkDate_index = null; // this.$emit('clickDate',dateArr);\n\n        this.$emit('changeDate', dateArr);\n      } else {\n        var oDate = new Date(dateArr);\n        var resultDate = new Date(oDate.setMonth(oDate.getMonth() + 1, 0));\n        this.checkDate_index = null; // this.$emit('clickDate',[dateArr,resultDate]);\n\n        this.$emit('changeDate', [dateArr, resultDate]);\n      }\n\n      ;\n    },\n\n    /**\r\n     * 获取焦点\r\n     */\n    selectDateFocus: function selectDateFocus() {\n      this.minDate = '';\n      this.maxDate = '';\n    },\n\n    /**\r\n    * 选择筛选日期\r\n    */\n    handleFiltersDate: function handleFiltersDate(index, type) {\n      this.checkDate_index = index; // this.$emit('clickDate',this.initDate(type));\n\n      this.$emit('changeDate', this.initDate(type));\n      this.value = '';\n    },\n\n    /**\r\n     * 选择筛选图表\r\n     */\n    handleFiltersChart: function handleFiltersChart(index, type) {\n      this.checkChart_index = index;\n      this.$emit('selectChart', type);\n    },\n\n    /**\r\n     * 格式化日期\r\n     * @param { String } type 日期类型\r\n     */\n    initDate: function initDate(type) {\n      // 获取日期对象\n      var oDate = new Date(); // 将时间设置为00点00分00秒\n\n      var currentDate = new Date(oDate.toLocaleDateString()); // 集合\n\n      var dateArr = [];\n\n      switch (type) {\n        // 今日\n        case '1':\n          dateArr = [currentDate, currentDate];\n          break;\n        // 近7日\n\n        case '7':\n          var oDate = new Date(); // 获取7天前日期 如：13\n\n          var date = oDate.getDate() - 6; // 获取7天前GMT格式日期\n\n          var disDate = new Date(oDate.setDate(date)); // 将时间设置为00点00分00秒\n\n          var resultDate = new Date(disDate.toLocaleDateString());\n          dateArr = [resultDate, currentDate];\n          break;\n        // 近30日\n\n        case '30':\n          var oDate = new Date(); // 获取30天前日期 如：30\n\n          var date = oDate.getDate() - 29; // 获取30天前GMT格式日期\n\n          var disDate = new Date(oDate.setDate(date)); // 将时间设置为00点00分00秒\n\n          var resultDate = new Date(disDate.toLocaleDateString());\n          dateArr = [resultDate, currentDate];\n          break;\n        // 本月\n\n        case 'current':\n          var oDate = new Date(); // 获取本月1号GMT格式日期\n\n          var disDate = new Date(oDate.setDate(1)); // 将时间设置为00点00分00秒\n\n          var resultDate = new Date(disDate.toLocaleDateString());\n          dateArr = [resultDate, currentDate];\n          break;\n        // 上月\n\n        case 's':\n          var oDate = new Date(); // 获取上个月月份\n\n          var getMonth = oDate.getMonth() - 1; // 将日期设置为1号\n\n          oDate.setMonth(getMonth, 1); // 获取上个月1号日期\n\n          var startDate = new Date(oDate.toLocaleDateString()); // 重置日期对象\n\n          var oDate = new Date(); // 获取上个月最后一天\n\n          var getDate = new Date(oDate.setDate(0)).getDate(); // 将日期设置为最后一天\n\n          oDate.setMonth(getMonth, getDate); // 获取上个月最后一天日期\n\n          var endDate = new Date(oDate.toLocaleDateString());\n          dateArr = [startDate, endDate];\n          break;\n        // 上上月\n\n        case 'ss':\n          var oDate = new Date(); // 获取上个月月份\n\n          var getMon = oDate.getMonth() - 1; // 获取上上个月月份\n\n          var getMonth = oDate.getMonth() - 2; // 将日期设置为1号\n\n          oDate.setMonth(getMonth, 1); // 获取上上个月1号日期\n\n          var startDate = new Date(oDate.toLocaleDateString()); // 重置日期对象\n\n          var oDate = new Date(); // 获取上上个月最后一天\n\n          var getDate = new Date(oDate.setMonth(getMon, 0)).getDate(); // 将日期设置为最后一天\n\n          oDate.setMonth(getMonth, getDate); // 获取上个月最后一天日期\n\n          var endDate = new Date(oDate.toLocaleDateString());\n          dateArr = [startDate, endDate];\n          break;\n      }\n\n      ;\n      return dateArr;\n    }\n  }\n};",{"version":3,"sources":["selectDate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"chart-filters\">\r\n    <!-- 时间筛选 -->\r\n    <div>\r\n      <span\r\n        :class=\"{'filters-check':checkDate_index == index}\"\r\n        :key=\"index\"\r\n        v-for=\"(item, index) in isMonthSelect ? filtersDates_list : filtersDate_list\"\r\n        @click=\"handleFiltersDate(index, item.type)\"\r\n        >{{ item.name }}\r\n      </span>\r\n      <span>\r\n        <!-- 按日筛选 -->\r\n        <template v-if=\"!isMonthSelect\">\r\n            <div class=\"block\">\r\n              <span class=\"demonstration\">时间筛选：</span>\r\n              <el-date-picker\r\n                  size=\"mini\"\r\n                  v-model=\"value\"\r\n                  @change=\"selectDate\"\r\n                  @focus=\"selectDateFocus\"\r\n                  type=\"daterange\"\r\n                  range-separator=\"至\"\r\n                  value-format=\"\"\r\n                  start-placeholder=\"开始日期\"\r\n                  :picker-options=\"pickerOptions\"\r\n                  end-placeholder=\"结束日期\">\r\n              </el-date-picker>\r\n            </div>\r\n        </template>\r\n        <!-- 按月筛选 -->\r\n        <template v-else>\r\n          <div class=\"block\">\r\n            <span class=\"demonstration\">时间筛选：</span>\r\n            <el-date-picker\r\n              v-model=\"value\"\r\n              size=\"mini\"\r\n              @change=\"selectDate\"\r\n              type=\"month\"\r\n              placeholder=\"选择月\">\r\n            </el-date-picker>\r\n          </div>\r\n        </template>\r\n      </span>\r\n    </div>\r\n    <!-- 图表筛选 -->\r\n    <div class=\"chart-classify\">\r\n        <span\r\n          :class=\"{'chart-classify-check':checkChart_index == index}\"\r\n          :key=\"index\"\r\n          v-for=\"(item, index) in filtersChart_list\"\r\n          @click=\"handleFiltersChart(index, item.type)\"\r\n        >{{ item.name }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nimport { getToken } from \"@/utils/auth\";\r\nlet token = getToken();\r\nlet timeOptionRange = null;\r\nexport default {\r\n  props: {\r\n    // 是否按照月份筛选\r\n    isMonthSelect:[Boolean],\r\n  },\r\n  data() {\r\n    return {\r\n      value:'',\r\n      minDate: '',\r\n      maxDate: '',\r\n      // this.nowNum == 1时不包含当前日期， this.nowNum == 0时包含当前日期\r\n      nowNum: 0,\r\n      pickerOptions:{\r\n        onPick: ({ maxDate, minDate }) => {\r\n          this.maxDate = maxDate;\r\n          this.minDate = minDate;\r\n        },\r\n        disabledDate: (date) => {\r\n          let maxDate = this.maxDate;\r\n          let minDate = this.minDate;\r\n\r\n          let endTime = '';\r\n          if (minDate) {\r\n            let val = Date.now() - (new Date(this.minDate).valueOf() + 31 * 24 * 60 * 60 * 1000);\r\n            if (val < 0) {\r\n              endTime = Date.now() - this.nowNum * 24 * 60 * 60 * 1000;\r\n            } else {\r\n              endTime = (new Date(this.minDate).valueOf() + 31 * 24 * 60 * 60 * 1000);\r\n            }\r\n            if (minDate && maxDate) {\r\n              return date && (date.valueOf() > endTime)\r\n            }\r\n            return date && (date.valueOf() > endTime || date.valueOf() < minDate.valueOf() - 31 * 24 * 60 * 60 * 1000)\r\n          } else {\r\n            return date && (date.valueOf() > Date.now() - this.nowNum * 24 * 60 * 60 * 1000)\r\n          }\r\n        },\r\n      },\r\n      // 选中筛选日期下标\r\n      checkDate_index:0,\r\n      // 选中筛选图表下标\r\n      checkChart_index:0,\r\n      // 筛选日期列表\r\n      filtersDate_list:[\r\n        {\r\n          name:'今日',\r\n          type:'1'\r\n        },{\r\n          name:'近7日',\r\n          type:'7'\r\n        },{\r\n          name:'近30日',\r\n          type:'30'\r\n        },{\r\n          name:'本月',\r\n          type:'current'\r\n        }],\r\n      // 筛选日期列表\r\n      filtersDates_list:[\r\n        {\r\n          name:'本月',\r\n          type:'current'\r\n        },{\r\n          name:'上月',\r\n          type:'s'\r\n        },{\r\n          name:'上上月',\r\n          type:'ss'\r\n        }\r\n      ],\r\n      // 筛选图表列表\r\n      filtersChart_list:[\r\n        {\r\n          name:'趋势图',\r\n          type:0\r\n        },{\r\n          name:'汇总图',\r\n          type:1\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  created() {\r\n    // 按月筛选从本月开始，具体期限从近30天开始\r\n    var type = this.isMonthSelect ? 'current' : '1';\r\n    this.$emit('changeDate',this.initDate(type));\r\n  },\r\n  mounted(){\r\n\r\n  },\r\n  watch: {\r\n\r\n  },\r\n  methods: {\r\n    /**\r\n     * 日期筛选时\r\n     */\r\n    selectDate(dateArr) {\r\n      if(!dateArr){\r\n        this.minDate = '';\r\n        this.maxDate = '';\r\n        return;\r\n      }\r\n      // 重置日期选择下标\r\n      if(dateArr instanceof Array) {\r\n        this.checkDate_index = null;\r\n        // this.$emit('clickDate',dateArr);\r\n        this.$emit('changeDate',dateArr);\r\n      }else{\r\n        var oDate = new Date(dateArr);\r\n        var resultDate = new Date(oDate.setMonth(oDate.getMonth() + 1,0));\r\n        this.checkDate_index = null;\r\n        // this.$emit('clickDate',[dateArr,resultDate]);\r\n        this.$emit('changeDate',[dateArr,resultDate]);\r\n      };\r\n    },\r\n    /**\r\n     * 获取焦点\r\n     */\r\n    selectDateFocus() {\r\n      this.minDate = '';\r\n      this.maxDate = '';\r\n    },\r\n     /**\r\n     * 选择筛选日期\r\n     */\r\n    handleFiltersDate(index, type) {\r\n        this.checkDate_index = index;\r\n\r\n        // this.$emit('clickDate',this.initDate(type));\r\n        this.$emit('changeDate',this.initDate(type));\r\n        this.value = '';\r\n    },\r\n    /**\r\n     * 选择筛选图表\r\n     */\r\n    handleFiltersChart(index, type) {\r\n        this.checkChart_index = index;\r\n        this.$emit('selectChart', type);\r\n    },\r\n    /**\r\n     * 格式化日期\r\n     * @param { String } type 日期类型\r\n     */\r\n    initDate(type) {\r\n      // 获取日期对象\r\n      var oDate = new Date();\r\n      // 将时间设置为00点00分00秒\r\n      var currentDate = new Date(oDate.toLocaleDateString());\r\n      // 集合\r\n      var dateArr = [];\r\n\r\n      switch(type) {\r\n        // 今日\r\n        case '1':\r\n          dateArr = [currentDate, currentDate];\r\n        break;\r\n        // 近7日\r\n        case '7':\r\n          var oDate = new Date();\r\n          // 获取7天前日期 如：13\r\n          var date = oDate.getDate()-6;\r\n          // 获取7天前GMT格式日期\r\n          var disDate = new Date(oDate.setDate(date));\r\n          // 将时间设置为00点00分00秒\r\n          var resultDate = new Date(disDate.toLocaleDateString());\r\n\r\n          dateArr = [resultDate, currentDate];\r\n        break;\r\n        // 近30日\r\n        case '30':\r\n          var oDate = new Date();\r\n          // 获取30天前日期 如：30\r\n          var date = oDate.getDate()-29;\r\n          // 获取30天前GMT格式日期\r\n          var disDate = new Date(oDate.setDate(date));\r\n          // 将时间设置为00点00分00秒\r\n          var resultDate = new Date(disDate.toLocaleDateString());\r\n\r\n          dateArr = [resultDate, currentDate];\r\n        break;\r\n        // 本月\r\n        case 'current':\r\n          var oDate = new Date();\r\n          // 获取本月1号GMT格式日期\r\n          var disDate = new Date(oDate.setDate(1));\r\n          // 将时间设置为00点00分00秒\r\n          var resultDate = new Date(disDate.toLocaleDateString());\r\n\r\n          dateArr = [resultDate, currentDate];\r\n        break;\r\n        // 上月\r\n        case 's':\r\n          var oDate = new Date();\r\n          // 获取上个月月份\r\n          var getMonth = oDate.getMonth()-1;\r\n          // 将日期设置为1号\r\n          oDate.setMonth(getMonth, 1);\r\n          // 获取上个月1号日期\r\n          var startDate = new Date(oDate.toLocaleDateString());\r\n          // 重置日期对象\r\n          var oDate = new Date();\r\n          // 获取上个月最后一天\r\n          var getDate = new Date(oDate.setDate(0)).getDate();\r\n          // 将日期设置为最后一天\r\n          oDate.setMonth(getMonth, getDate);\r\n          // 获取上个月最后一天日期\r\n          var endDate = new Date(oDate.toLocaleDateString());\r\n\r\n          dateArr = [startDate, endDate];\r\n        break;\r\n        // 上上月\r\n        case 'ss':\r\n          var oDate = new Date();\r\n          // 获取上个月月份\r\n          var getMon = oDate.getMonth()-1;\r\n          // 获取上上个月月份\r\n          var getMonth = oDate.getMonth()-2;\r\n          // 将日期设置为1号\r\n          oDate.setMonth(getMonth, 1);\r\n          // 获取上上个月1号日期\r\n          var startDate = new Date(oDate.toLocaleDateString());\r\n          // 重置日期对象\r\n          var oDate = new Date();\r\n          // 获取上上个月最后一天\r\n          var getDate = new Date(oDate.setMonth(getMon, 0)).getDate();\r\n          // 将日期设置为最后一天\r\n          oDate.setMonth(getMonth, getDate);\r\n          // 获取上个月最后一天日期\r\n          var endDate = new Date(oDate.toLocaleDateString());\r\n\r\n          dateArr = [startDate, endDate];\r\n        break;\r\n      };\r\n      return dateArr;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n // 图表筛选条件\r\n  .chart-filters{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    cursor: pointer;\r\n  }\r\n  .chart-classify span{\r\n    padding: 5px 10px;\r\n    margin:0 10px;\r\n    font-weight: bold;\r\n    font-size: 15px;\r\n  }\r\n  .chart-classify .chart-classify-check{\r\n    color: #409EFF;\r\n  }\r\n  span{\r\n    padding: 5px 10px;\r\n    margin:0 10px;\r\n    display: inline-block;\r\n    text-align: center;\r\n  }\r\n  .filters-check{\r\n    background: #f1f1f1;\r\n    color: #409EFF;\r\n    border-radius: 5px;\r\n    font-weight: 400;\r\n  }\r\n</style>\r\n\r\n"],"sourceRoot":"src/views/store/components"}]}