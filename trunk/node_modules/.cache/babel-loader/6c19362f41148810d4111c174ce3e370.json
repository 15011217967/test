{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\components\\tagMatching.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\components\\tagMatching.vue","mtime":1572415123946},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar allTags = [];\nvar flag = true;\nvar tagFlag = false,\n    groupFlag = false,\n    tagIds = [];\nexport default {\n  name: \"tag-group-list\",\n  data: function data() {\n    return {\n      wholeGroups: [],\n      //全部分组\n      //全部标签分组\n      allTagGroups: [],\n      //新\n      defaultProps: {\n        children: \"collocationTagItems\",\n        label: \"name\"\n      },\n      selectTags: [],\n      //已选标签\n      filterText: ''\n    };\n  },\n  created: function created() {\n    this.init();\n    this.getAllGroupData();\n  },\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    },\n    selectTags: function selectTags(val) {\n      //console.log(val);\n      //productId tagId tagName\n      if (val.length > 0) {\n        var tags = this.$common.deepCopy(val);\n        var arr = [];\n\n        for (var i = 0; i < tags.length; i++) {\n          arr.push({\n            tagId: tags[i].tagId,\n            tagName: tags[i].tagName\n          });\n        }\n\n        this.$emit('input', arr);\n        tags = null;\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      this.wholeGroups = [];\n      this.allTagGroups = [];\n      this.selectTags = [];\n      this.filterText = '';\n      flag = true;\n      allTags = [];\n      tagFlag = false;\n      groupFlag = false;\n      tagIds = [];\n    },\n    //获取全部分组\n    getAllGroupData: function getAllGroupData() {\n      var _this = this;\n\n      this.request(this.api.collocation.collocationTagGroup_list, {\n        subset: true,\n        valid: true\n      }).then(function (res) {\n        //  console.log(res);\n        var _data = res.data;\n        var tagList = [];\n\n        for (var i = 0; i < _data.length; i++) {\n          // _data[i]._id = _data[i].id;\n          var items = _data[i].collocationTagItems;\n\n          for (var k = 0; k < items.length; k++) {\n            items[k].name = items[k].tagName; // items[k]._id = items[k].tagId;\n\n            tagList.push(items[k]);\n          }\n        } //console.log(_data);\n        //拿到全部的 数组及标签 进行set 处理\n\n\n        _this.allTagGroups = _data; //全部\n        //存储下全部的标签 只有标签 会有重复 但无关紧要\n\n        allTags = _this.$common.deepCopy(tagList); //处理回显\n\n        groupFlag = true;\n\n        _this.handleEcho();\n      });\n    },\n    //回显数据 从父组件获取  先这么写 后期优化  抬走下一位\n    propInit: function propInit(_ids) {\n      if (_ids.length > 0) {\n        tagFlag = true;\n        tagIds = _ids;\n        this.handleEcho();\n      }\n    },\n    handleEcho: function handleEcho() {\n      if (tagFlag && groupFlag) {\n        this.setCheckedKeys(tagIds); //已经懵逼了 再写个方法处理向右边放入数据\n\n        this.setSelectTags(tagIds);\n      }\n    },\n    //节点选中状态发生变化时的回调\n    handleCheckChange: function handleCheckChange(data, checked, indeterminate) {\n      console.log(data, checked, indeterminate);\n      flag = checked;\n      var _ids = [];\n\n      if (!checked) {\n        if (!!data.tagId) {\n          console.log(1); //拿到已选的数据中的值\n\n          var tags = this.selectTags;\n\n          for (var i = 0; i < tags.length; i++) {\n            if (tags[i].tagId != data.tagId) {\n              _ids.push(tags[i].id);\n            }\n          } // this.$refs.tree.setCheckedKeys(_ids);\n\n        }\n      }\n    },\n    //节点发生改变触发回调 当复选框被点击的时候触发\n    handleCheck: function handleCheck(data, obj) {\n      // console.log(data);\n      console.log(obj);\n\n      if (obj.checkedKeys.length > 0) {\n        this.handleKeyGetTagData(obj.checkedKeys);\n      } else {\n        this.selectTags = [];\n      }\n    },\n    //处理Key 找到属性\n    handleKeyGetTagData: function handleKeyGetTagData(keys) {\n      //此时获取的Key 是ztree 的id\n      // console.log(allTags);\n      var tags = allTags,\n          tagsLen = tags.length;\n      var selectTags = [];\n      var hash = {};\n\n      for (var i = 0; i < keys.length; i++) {\n        for (var k = 0; k < tagsLen; k++) {\n          if (keys[i] == tags[k].id && !!tags[k].tagId) {\n            selectTags.push(tags[k]);\n          }\n        }\n      }\n\n      var newArr = selectTags.reduceRight(function (item, next) {\n        hash[next.tagId] ? \"\" : hash[next.tagId] = true && item.push(next);\n        return item;\n      }, []);\n      this.selectTags = this.$common.deepCopy(newArr); //console.log(this.selectTags);\n      //让其他ztree有当前标签的被选中\n      //TODO 加个状态 如果事件调用顺序变了 会出现问题\n\n      if (flag) {\n        this.setCheckedKeys(newArr);\n      }\n    },\n    //根据TagId 选中 全部Ztree中 已有的标签\n    setCheckedKeys: function setCheckedKeys(tagsList) {\n      var listId = [];\n      var tags = allTags,\n          tagsLen = tags.length;\n\n      for (var i = 0; i < tagsList.length; i++) {\n        for (var k = 0; k < tagsLen; k++) {\n          if (tagsList[i].tagId == tags[k].tagId) {\n            listId.push(tags[k].id);\n          }\n        }\n      }\n\n      this.$refs.tree.setCheckedKeys(listId);\n    },\n    //修改回显时处理右边的数据\n    setSelectTags: function setSelectTags(tagsList) {\n      var list = [];\n      var tags = allTags,\n          tagsLen = tags.length;\n\n      for (var i = 0; i < tagsList.length; i++) {\n        for (var k = 0; k < tagsLen; k++) {\n          if (tagsList[i].tagId == tags[k].tagId) {\n            list.push(tags[k]);\n          }\n        }\n      }\n\n      this.selectTags = list;\n    },\n    //处理过滤函数\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    }\n  }\n};",{"version":3,"sources":["tagMatching.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\r\n * @Description: In User Settings Edit\r\n * @Author: your name\r\n * @Date: 2019-07-06 14:36:41\r\n * @LastEditTime: 2019-08-13 19:03:52\r\n * @LastEditors: Please set LastEditors\r\n -->\r\n<template>\r\n  <ul class=\"tag-wrap\">\r\n    <!-- 分组 -->\r\n    <li>\r\n      <div class=\"check-tab\">\r\n        <span class=\"label\">搜索标签：</span>\r\n        <el-input\r\n        class=\"input-w-2\"\r\n        placeholder=\"请输入标签名称\"\r\n        v-model=\"filterText\">\r\n        </el-input>&nbsp;\r\n        <!-- <el-button type=\"primary\" @click=\"setCheckedKeys\" plain size=\"small\">添加标签</el-button> -->\r\n      </div>\r\n      <div class=\"ztree-wrap\">\r\n        <el-tree\r\n          :data=\"allTagGroups\"\r\n          show-checkbox\r\n          node-key=\"id\"\r\n          ref=\"tree\"\r\n          highlight-current\r\n          :props=\"defaultProps\"\r\n          :filter-node-method=\"filterNode\"\r\n          @check-change=\"handleCheckChange\"\r\n          @check=\"handleCheck\"\r\n        ></el-tree>\r\n      </div>\r\n    </li>\r\n    <!-- 录入标签 -->\r\n    <li>\r\n      <div class=\"select-tabs\">\r\n        <h6 class=\"label\">已选标签：</h6>\r\n        <ul class=\"clearfix\">\r\n          <li v-for=\"(item,index) in selectTags\" :key=\"index\">{{item.tagName}}</li>\r\n        </ul>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nlet allTags = [];\r\nlet flag = true;\r\nlet tagFlag=false,groupFlag=false,tagIds=[];\r\nexport default {\r\n  name: \"tag-group-list\",\r\n  data() {\r\n    return {\r\n      wholeGroups: [], //全部分组\r\n      //全部标签分组\r\n      allTagGroups: [],\r\n      //新\r\n      defaultProps: {\r\n        children: \"collocationTagItems\",\r\n        label: \"name\"\r\n      },\r\n      selectTags: [], //已选标签\r\n      filterText: '',\r\n    };\r\n  },\r\n  created() {\r\n    this.init();\r\n    this.getAllGroupData();\r\n  },\r\n  watch: {\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n    selectTags(val){\r\n      //console.log(val);\r\n      //productId tagId tagName\r\n      if(val.length >0){\r\n        let tags= this.$common.deepCopy(val);\r\n        let arr=[];\r\n        for (let i = 0; i < tags.length; i++) {\r\n          arr.push({tagId:tags[i].tagId,tagName:tags[i].tagName,})\r\n        }\r\n        this.$emit('input',arr);\r\n        tags = null;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.wholeGroups=[];\r\n      this.allTagGroups=[];\r\n      this.selectTags=[];\r\n      this.filterText='';\r\n      flag=true;\r\n      allTags=[];\r\n      tagFlag=false;\r\n      groupFlag=false;\r\n      tagIds=[];\r\n    },\r\n    //获取全部分组\r\n    getAllGroupData() {\r\n      this.request(this.api.collocation.collocationTagGroup_list, {\r\n        subset: true,\r\n        valid: true\r\n      }).then(res => {\r\n        //  console.log(res);\r\n        let _data = res.data;\r\n        let tagList = [];\r\n        for (let i = 0; i < _data.length; i++) {\r\n          // _data[i]._id = _data[i].id;\r\n          let items = _data[i].collocationTagItems;\r\n          for (let k = 0; k < items.length; k++) {\r\n            items[k].name = items[k].tagName;\r\n            // items[k]._id = items[k].tagId;\r\n            tagList.push(items[k]);\r\n          }\r\n        }\r\n        //console.log(_data);\r\n        //拿到全部的 数组及标签 进行set 处理\r\n        this.allTagGroups = _data; //全部\r\n        //存储下全部的标签 只有标签 会有重复 但无关紧要\r\n        allTags = this.$common.deepCopy(tagList);\r\n        //处理回显\r\n        groupFlag=true;\r\n        this.handleEcho();\r\n      });\r\n    },\r\n    //回显数据 从父组件获取  先这么写 后期优化  抬走下一位\r\n    propInit(_ids){\r\n      if(_ids.length > 0){\r\n        tagFlag=true;\r\n        tagIds=_ids;\r\n        this.handleEcho();\r\n      }\r\n    },\r\n    handleEcho(){\r\n      if(tagFlag && groupFlag){\r\n        this.setCheckedKeys(tagIds)\r\n        //已经懵逼了 再写个方法处理向右边放入数据\r\n        this.setSelectTags(tagIds);\r\n      }\r\n    },\r\n    //节点选中状态发生变化时的回调\r\n    handleCheckChange(data, checked, indeterminate) {\r\n      console.log(data, checked, indeterminate);\r\n      flag = checked;\r\n      let _ids = [];\r\n      if (!checked) {\r\n        if (!!data.tagId) {\r\n        console.log(1);\r\n          //拿到已选的数据中的值\r\n          let tags = this.selectTags;\r\n          for (let i = 0; i < tags.length; i++) {\r\n            if (tags[i].tagId != data.tagId) {\r\n              _ids.push(tags[i].id);\r\n            }\r\n          }\r\n         // this.$refs.tree.setCheckedKeys(_ids);\r\n        }\r\n      }\r\n    },\r\n    //节点发生改变触发回调 当复选框被点击的时候触发\r\n    handleCheck(data, obj) {\r\n      // console.log(data);\r\n      console.log(obj);\r\n      if (obj.checkedKeys.length > 0) {\r\n        this.handleKeyGetTagData(obj.checkedKeys);\r\n      } else {\r\n        this.selectTags = [];\r\n      }\r\n    },\r\n    //处理Key 找到属性\r\n    handleKeyGetTagData(keys) {\r\n        //此时获取的Key 是ztree 的id\r\n        // console.log(allTags);\r\n        let tags = allTags,\r\n          tagsLen = tags.length;\r\n        let selectTags = [];\r\n        let hash = {};\r\n        for (let i = 0; i < keys.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (keys[i] == tags[k].id && !!tags[k].tagId) {\r\n              selectTags.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        const newArr = selectTags.reduceRight((item, next) => {\r\n          hash[next.tagId] ? \"\" : (hash[next.tagId] = true && item.push(next));\r\n          return item;\r\n        }, []);\r\n        this.selectTags = this.$common.deepCopy(newArr);\r\n        //console.log(this.selectTags);\r\n        //让其他ztree有当前标签的被选中\r\n        //TODO 加个状态 如果事件调用顺序变了 会出现问题\r\n      if (flag) {\r\n        this.setCheckedKeys(newArr);\r\n      }\r\n    },\r\n    //根据TagId 选中 全部Ztree中 已有的标签\r\n    setCheckedKeys(tagsList) {\r\n      let listId = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n      for (let i = 0; i < tagsList.length; i++) {\r\n        for (let k = 0; k < tagsLen; k++) {\r\n          if (tagsList[i].tagId == tags[k].tagId) {\r\n            listId.push(tags[k].id);\r\n          }\r\n        }\r\n      }\r\n      this.$refs.tree.setCheckedKeys(listId);\r\n    },\r\n    //修改回显时处理右边的数据\r\n    setSelectTags(tagsList){\r\n      let list = [];\r\n      let tags = allTags,\r\n        tagsLen = tags.length;\r\n        for (let i = 0; i < tagsList.length; i++) {\r\n          for (let k = 0; k < tagsLen; k++) {\r\n            if (tagsList[i].tagId == tags[k].tagId) {\r\n              list.push(tags[k]);\r\n            }\r\n          }\r\n        }\r\n        this.selectTags=list;\r\n    },\r\n    //处理过滤函数\r\n    filterNode(value, data) {\r\n        if (!value) return true;\r\n        return data.name.indexOf(value) !== -1;\r\n    },\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.tag-wrap {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  > li {\r\n    min-width: 200px;\r\n    background-color: #fafafa;\r\n    padding: 20px;\r\n  }\r\n  > li:nth-child(1) {\r\n    flex: 1;\r\n  }\r\n  > li:nth-child(2) {\r\n    width: 300px;\r\n    margin-left: 20px;\r\n  }\r\n}\r\n.ztree-wrap {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  margin-top: 10px;\r\n}\r\n.whole-wrap {\r\n  padding: 15px 0 0;\r\n}\r\n.all-wrap {\r\n  padding: 10px 0 0;\r\n}\r\n.common-wrap {\r\n  border-bottom: 1px dashed #aaa;\r\n}\r\n.check-tabs {\r\n  display: flex;\r\n  .label {\r\n    display: inline-block;\r\n    width: 80px;\r\n    line-height: 24px;\r\n    text-align: right;\r\n  }\r\n  ul {\r\n    flex: 1;\r\n    li {\r\n      float: left;\r\n      height: 24px;\r\n      line-height: 24px;\r\n      padding: 0 10px;\r\n      margin: 0 8px 15px;\r\n      cursor: pointer;\r\n      font-size: 12px;\r\n    }\r\n    li.active {\r\n      background-color: rgba(25, 158, 216, 1);\r\n      color: #fff;\r\n      box-shadow: 0 0 5px rgba(34, 144, 232, 1);\r\n    }\r\n  }\r\n}\r\n.select-tabs {\r\n  display: flex;\r\n  .label {\r\n    display: inline-block;\r\n    width: 80px;\r\n    line-height: 24px;\r\n    text-align: right;\r\n  }\r\n  ul {\r\n    flex: 1;\r\n    li {\r\n      float: left;\r\n      height: 24px;\r\n      line-height: 24px;\r\n      margin: 0 3px 8px;\r\n      font-size: 14px;\r\n    }\r\n  }\r\n}\r\n.page-more {\r\n  border-top: 1px solid #e6e8ed;\r\n  margin-top: 10px;\r\n  div.btn {\r\n    width: 120px;\r\n    border: 1px solid #e6e8ed;\r\n    border-top: 1px solid #fff;\r\n    margin: -1px auto 0;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    line-height: 30px;\r\n  }\r\n}\r\n.mt-1 {\r\n  margin-top: 2px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views/product/components"}]}