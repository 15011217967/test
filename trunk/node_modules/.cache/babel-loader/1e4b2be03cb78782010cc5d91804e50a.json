{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\basic_info\\color_list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\product\\basic_info\\color_list.vue","mtime":1574160265236},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar mirrorColorSeriesData = [];\nimport { validateColorCode } from \"@/utils/validate\";\nexport default {\n  data: function data() {\n    return {\n      //颜色Code 验证\n      validateColorCode: validateColorCode,\n      colorSeriesForm: {\n        colorSeriesData: []\n      },\n      colorIsShow: false,\n      colorForm: {\n        colorData: []\n      },\n      colorSeriesLoading: false,\n      colorLoading: false,\n      colorSeriesId: '',\n      colorSeriesValidate: true\n    };\n  },\n  created: function created() {\n    //获取色系\n    this.getColorSeriesData('init');\n  },\n  methods: {\n    //获取色系列表\n    getColorSeriesData: function getColorSeriesData(type) {\n      var _this = this;\n\n      this.colorSeriesLoading = true;\n      this.request(this.api.product.colorSeries_list, {}, true).then(function (res) {\n        var _data = res.data;\n\n        for (var i = 0; i < _data.length; i++) {\n          _data[i]._edit = false;\n        }\n\n        if (_data.length > 0 && type == 'init') {\n          _this.colorIsShow = true;\n          _this.colorSeriesId = _data[0].id;\n\n          _this.getColorData();\n        }\n\n        mirrorColorSeriesData = _this.$common.deepCopy(_data);\n        _this.colorSeriesForm.colorSeriesData = _data;\n        _this.colorSeriesLoading = false;\n\n        _this.$refs['colorSeriesFormRef'].clearValidate();\n      });\n    },\n    //获取颜色\n    getColorData: function getColorData() {\n      var _this2 = this;\n\n      this.colorLoading = true;\n      this.request(this.api.product.color_list, {\n        seriesId: this.colorSeriesId\n      }, true).then(function (res) {\n        var _data = res.data;\n\n        for (var i = 0; i < _data.length; i++) {\n          _data[i]._edit = false;\n        }\n\n        _this2.colorForm.colorData = _data;\n        _this2.colorLoading = false;\n      });\n    },\n    //色系被点击\n    colorSeriesRowClick: function colorSeriesRowClick(row, column, event) {\n      if (!this.colorSeriesValidate) {\n        return;\n      }\n\n      var attrType = event.target.getAttribute('data-type');\n\n      if (attrType != 'noTrigger') {\n        if (!!row.id) {\n          this.colorSeriesId = row.id;\n          this.getColorData();\n        }\n      }\n    },\n    //色系修改\n    editColorSeries: function editColorSeries(row) {\n      row._edit = true;\n    },\n    //色系删除\n    deleteColorSeries: function deleteColorSeries(scope) {\n      var _this3 = this;\n\n      if (!!scope.row.id) {\n        this.request(this.api.product.colorSeries_delete, {\n          id: scope.row.id\n        }).then(function (res) {\n          _this3.$message.success(\"删除成功！\");\n\n          _this3.removeObj(_this3.colorSeriesForm.colorSeriesData, scope.row.id);\n        });\n      } else {\n        this.colorSeriesForm.colorSeriesData.splice(scope.$index, 1);\n      }\n    },\n    //色系失去焦点\n    colorSeriesBlur: function colorSeriesBlur(row) {\n      var colorSeriesData = this.colorSeriesForm.colorSeriesData;\n      var flag = true;\n\n      if (!row.name.replace(/\\s*/g, \"\")) {\n        this.$message.error(\"请输入色系！\");\n        return;\n      } //检查重复\n\n\n      for (var i = 0; i < colorSeriesData.length; i++) {\n        if (colorSeriesData[i].id != row.id && colorSeriesData[i].name.replace(/\\s*/g, \"\") == row.name.replace(/\\s*/g, \"\")) {\n          flag = false;\n          break;\n        }\n      }\n\n      if (!flag) {\n        this.$message.error(\"已有相同色系！\");\n        return;\n      } //根据镜像判断是否修改了字段修改了才提交\n\n\n      for (var _i = 0; _i < mirrorColorSeriesData.length; _i++) {\n        if (mirrorColorSeriesData[_i].name.replace(/\\s*/g, \"\") == row.name.replace(/\\s*/g, \"\") && row.id != null) {\n          row._edit = false;\n          this.handleColorSeriesValidateError();\n          return;\n        }\n      }\n\n      if (flag) {\n        this.colorSeriesSubmit(row);\n      }\n    },\n    //色系保存\n    colorSeriesSubmit: function colorSeriesSubmit(params) {\n      var _this4 = this;\n\n      this.$refs['colorSeriesFormRef'].validate(function (valid) {\n        if (valid) {\n          _this4.request(_this4.api.product.colorSeries_save, params).then(function (res) {\n            params._edit = false;\n\n            _this4.$message.success(\"保存成功\");\n\n            _this4.getColorSeriesData();\n\n            _this4.handleColorSeriesValidateError();\n          });\n        } else {\n          _this4.handleColorSeriesValidateError();\n\n          _this4.$message.error(\"规则验证不通过\");\n        }\n      });\n    },\n    //点击新增色系\n    addColorSeries: function addColorSeries() {\n      var _this5 = this;\n\n      this.handleEmptyColor(this.colorSeriesForm.colorSeriesData, 'colorSeries');\n      this.$nextTick(function () {\n        _this5.tableScrollTop('seriesTableRef', _this5.colorSeriesForm.colorSeriesData);\n      });\n    },\n    //点击新增颜色\n    addColor: function addColor() {\n      var _this6 = this;\n\n      this.handleEmptyColor(this.colorForm.colorData, 'color');\n      this.$nextTick(function () {\n        _this6.tableScrollTop('colorTableRef', _this6.colorForm.colorData);\n      });\n    },\n    //点击新增时跳到指定位置\n    tableScrollTop: function tableScrollTop(_ref, _data) {\n      var tableData = _data;\n      var _el = null;\n\n      if (_ref == 'seriesTableRef') {\n        _el = this.$refs.seriesTableRef;\n      } else {\n        _el = this.$refs.colorTableRef;\n      }\n\n      _el.setCurrentRow(tableData[tableData.length - 1]);\n\n      var targetTop = _el.$el.querySelectorAll('.el-table__body tr')[tableData.length - 1].getBoundingClientRect().top;\n\n      var containerTop = _el.$el.querySelector('.el-table__body').getBoundingClientRect().top;\n\n      var scrollParent = _el.$el.querySelector('.el-table__body-wrapper');\n\n      scrollParent.scrollTop = targetTop - containerTop;\n    },\n    //编辑或保存颜色\n    editOrSubmitColor: function editOrSubmitColor(params) {\n      var _this7 = this;\n\n      //params._edit=!params._edit;\n      if (!!params._edit) {\n        this.$refs['colorFormRef'].validate(function (valid) {\n          if (valid) {\n            params.seriesId = _this7.colorSeriesId;\n\n            _this7.request(_this7.api.product.color_save, params).then(function (res) {\n              params._edit = false;\n\n              _this7.$message.success(\"保存成功\");\n\n              _this7.getColorData();\n            });\n          } else {\n            _this7.$message.error(\"规则验证不通过\");\n          }\n        });\n      } else {\n        params._edit = true;\n      }\n    },\n    //删除颜色\n    deleteColor: function deleteColor(scope) {\n      var _this8 = this;\n\n      if (!!scope.row.id) {\n        this.request(this.api.product.color_delete, {\n          id: scope.row.id\n        }).then(function (res) {\n          _this8.$message.success(\"删除成功！\");\n\n          _this8.removeObj(_this8.colorForm.colorData, scope.row.id);\n        });\n      } else {\n        this.colorForm.colorData.splice(scope.$index, 1);\n      }\n    },\n\n    /**\r\n     * @Date: 2019-11-07 17:02:03\r\n     * @description: 增加延时 处理色系失去焦点时\r\n     * 点击列表 触发右侧列表联动\r\n     * @author: element\r\n     * @param {type} \r\n     * @return: \r\n     */\n    handleColorSeriesValidateError: function handleColorSeriesValidateError() {\n      var _this9 = this;\n\n      this.colorSeriesValidate = false;\n      setTimeout(function () {\n        _this9.colorSeriesValidate = true;\n      }, 2000);\n    },\n\n    /**\r\n     * @Date: 2019-11-07 15:36:02\r\n     * @description: 处理空颜色和色系  有就提示 无增加\r\n     * @author: elephant\r\n     * @param {_arr,type}  _arr 数据源 type 区分色系和颜色\r\n     * @return: \r\n     */\n    handleEmptyColor: function handleEmptyColor(_arr, type) {\n      var flag = true;\n\n      for (var i = 0; i < _arr.length; i++) {\n        if (_arr[i].id == null) {\n          flag = false;\n          break;\n        }\n      }\n\n      if (flag) {\n        var obj = {\n          name: \"\",\n          _edit: true\n        };\n\n        if (type == 'color') {\n          obj.code = \"\";\n        }\n\n        _arr.push(obj);\n      } else {\n        if (type == 'color') {\n          this.$message.error(\"当前颜色未保存！\");\n        } else {\n          this.$message.error(\"当前色系未保存！\");\n        }\n      }\n    },\n\n    /**\r\n     * @Date: 2019-11-07 11:48:28\r\n     * @description: 删除数组中的某一个对象\r\n     * @author: elephant\r\n     * @param {_arr,_obj} 数组 需删除的对象\r\n     * @return: //返回删除后剩余的数组\r\n     */\n    removeObj: function removeObj(_arr, _obj) {\n      var length = _arr.length;\n\n      for (var i = 0; i < length; i++) {\n        if (_arr[i].id == _obj) {\n          if (i == 0) {\n            _arr.shift(); //删除并返回数组的第一个元素\n\n\n            return _arr;\n          } else if (i == length - 1) {\n            _arr.pop(); //删除并返回数组的最后一个元素\n\n\n            return _arr;\n          } else {\n            _arr.splice(i, 1); //删除下标为i的元素\n\n\n            return _arr;\n          }\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["color_list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJA,IAAA,qBAAA,GAAA,EAAA;AACA,SAAA,iBAAA,QAAA,kBAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA;AACA,MAAA,iBAAA,EAAA,iBAFA;AAGA,MAAA,eAAA,EAAA;AACA,QAAA,eAAA,EAAA;AADA,OAHA;AAOA,MAAA,WAAA,EAAA,KAPA;AAQA,MAAA,SAAA,EAAA;AACA,QAAA,SAAA,EAAA;AADA,OARA;AAWA,MAAA,kBAAA,EAAA,KAXA;AAYA,MAAA,YAAA,EAAA,KAZA;AAaA,MAAA,aAAA,EAAA,EAbA;AAcA,MAAA,mBAAA,EAAA;AAdA,KAAA;AAgBA,GAlBA;AAmBA,EAAA,OAnBA,qBAmBA;AACA;AACA,SAAA,kBAAA,CAAA,MAAA;AACA,GAtBA;AAuBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,kBAFA,8BAEA,IAFA,EAEA;AAAA;;AACA,WAAA,kBAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,KAAA,GAAA,CAAA,OAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,KAAA,GAAA,GAAA,CAAA,IAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAA,KAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,IAAA,IAAA,MAAA,EAAA;AACA,UAAA,KAAA,CAAA,WAAA,GAAA,IAAA;AACA,UAAA,KAAA,CAAA,aAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA;;AACA,UAAA,KAAA,CAAA,YAAA;AACA;;AACA,QAAA,qBAAA,GAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,QAAA,KAAA,CAAA,eAAA,CAAA,eAAA,GAAA,KAAA;AACA,QAAA,KAAA,CAAA,kBAAA,GAAA,KAAA;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,aAAA;AACA,OAdA;AAeA,KAnBA;AAoBA;AACA,IAAA,YArBA,0BAqBA;AAAA;;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,KAAA,GAAA,CAAA,OAAA,CAAA,UAAA,EAAA;AAAA,QAAA,QAAA,EAAA,KAAA;AAAA,OAAA,EAAA,IAAA,EACA,IADA,CACA,UAAA,GAAA,EAAA;AACA,YAAA,KAAA,GAAA,GAAA,CAAA,IAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAA,KAAA;AACA;;AACA,QAAA,MAAA,CAAA,SAAA,CAAA,SAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,KAAA;AACA,OARA;AASA,KAhCA;AAiCA;AACA,IAAA,mBAlCA,+BAkCA,GAlCA,EAkCA,MAlCA,EAkCA,KAlCA,EAkCA;AACA,UAAA,CAAA,KAAA,mBAAA,EAAA;AACA;AACA;;AACA,UAAA,QAAA,GAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA,WAAA,CAAA;;AACA,UAAA,QAAA,IAAA,WAAA,EAAA;AACA,YAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA;AACA,eAAA,aAAA,GAAA,GAAA,CAAA,EAAA;AACA,eAAA,YAAA;AACA;AACA;AACA,KA7CA;AA8CA;AACA,IAAA,eA/CA,2BA+CA,GA/CA,EA+CA;AACA,MAAA,GAAA,CAAA,KAAA,GAAA,IAAA;AACA,KAjDA;AAkDA;AACA,IAAA,iBAnDA,6BAmDA,KAnDA,EAmDA;AAAA;;AACA,UAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,EAAA;AACA,aAAA,OAAA,CAAA,KAAA,GAAA,CAAA,OAAA,CAAA,kBAAA,EAAA;AAAA,UAAA,EAAA,EAAA,KAAA,CAAA,GAAA,CAAA;AAAA,SAAA,EAAA,IAAA,CACA,UAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA;;AACA,UAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,eAAA,CAAA,eAAA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,SAJA;AAMA,OAPA,MAOA;AACA,aAAA,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA;AACA;AACA,KA9DA;AA+DA;AACA,IAAA,eAhEA,2BAgEA,GAhEA,EAgEA;AACA,UAAA,eAAA,GAAA,KAAA,eAAA,CAAA,eAAA;AACA,UAAA,IAAA,GAAA,IAAA;;AACA,UAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,QAAA;AACA;AACA,OANA,CAOA;;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,eAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,eAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,eAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,EAAA,KAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA;AACA,UAAA,IAAA,GAAA,KAAA;AACA;AACA;AACA;;AACA,UAAA,CAAA,IAAA,EAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,SAAA;AACA;AACA,OAjBA,CAkBA;;;AACA,WAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,qBAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,YAAA,qBAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,EAAA,KAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,EAAA,CAAA,IAAA,GAAA,CAAA,EAAA,IAAA,IAAA,EAAA;AACA,UAAA,GAAA,CAAA,KAAA,GAAA,KAAA;AACA,eAAA,8BAAA;AACA;AACA;AACA;;AACA,UAAA,IAAA,EAAA;AACA,aAAA,iBAAA,CAAA,GAAA;AACA;AACA,KA7FA;AA8FA;AACA,IAAA,iBA/FA,6BA+FA,MA/FA,EA+FA;AAAA;;AACA,WAAA,KAAA,CAAA,oBAAA,EAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,gBAAA,EAAA,MAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,GAAA,KAAA;;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA;;AACA,YAAA,MAAA,CAAA,kBAAA;;AACA,YAAA,MAAA,CAAA,8BAAA;AACA,WALA;AAMA,SAPA,MAOA;AACA,UAAA,MAAA,CAAA,8BAAA;;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA;AACA;AACA,OAZA;AAaA,KA7GA;AA8GA;AACA,IAAA,cA/GA,4BA+GA;AAAA;;AACA,WAAA,gBAAA,CAAA,KAAA,eAAA,CAAA,eAAA,EAAA,aAAA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,cAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,eAAA,CAAA,eAAA;AACA,OAFA;AAIA,KArHA;AAsHA;AACA,IAAA,QAvHA,sBAuHA;AAAA;;AACA,WAAA,gBAAA,CAAA,KAAA,SAAA,CAAA,SAAA,EAAA,OAAA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,cAAA,CAAA,eAAA,EAAA,MAAA,CAAA,SAAA,CAAA,SAAA;AACA,OAFA;AAGA,KA5HA;AA6HA;AACA,IAAA,cA9HA,0BA8HA,IA9HA,EA8HA,KA9HA,EA8HA;AACA,UAAA,SAAA,GAAA,KAAA;AACA,UAAA,GAAA,GAAA,IAAA;;AACA,UAAA,IAAA,IAAA,gBAAA,EAAA;AACA,QAAA,GAAA,GAAA,KAAA,KAAA,CAAA,cAAA;AACA,OAFA,MAEA;AACA,QAAA,GAAA,GAAA,KAAA,KAAA,CAAA,aAAA;AACA;;AACA,MAAA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;AACA,UAAA,SAAA,GAAA,GAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,oBAAA,EAAA,SAAA,CAAA,MAAA,GAAA,CAAA,EAAA,qBAAA,GAAA,GAAA;;AACA,UAAA,YAAA,GAAA,GAAA,CAAA,GAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,qBAAA,GAAA,GAAA;;AACA,UAAA,YAAA,GAAA,GAAA,CAAA,GAAA,CAAA,aAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,YAAA,CAAA,SAAA,GAAA,SAAA,GAAA,YAAA;AACA,KA3IA;AA4IA;AACA,IAAA,iBA7IA,6BA6IA,MA7IA,EA6IA;AAAA;;AACA;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAAA;AACA,aAAA,KAAA,CAAA,cAAA,EAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,cAAA,KAAA,EAAA;AACA,YAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,aAAA;;AACA,YAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,UAAA,EAAA,MAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,MAAA,CAAA,KAAA,GAAA,KAAA;;AACA,cAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA;;AACA,cAAA,MAAA,CAAA,YAAA;AACA,aAJA;AAKA,WAPA,MAOA;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA;AACA;AACA,SAXA;AAYA,OAbA,MAaA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,IAAA;AACA;AACA,KA/JA;AAgKA;AACA,IAAA,WAjKA,uBAiKA,KAjKA,EAiKA;AAAA;;AACA,UAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,EAAA;AACA,aAAA,OAAA,CAAA,KAAA,GAAA,CAAA,OAAA,CAAA,YAAA,EAAA;AAAA,UAAA,EAAA,EAAA,KAAA,CAAA,GAAA,CAAA;AAAA,SAAA,EAAA,IAAA,CACA,UAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA;;AACA,UAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,SAAA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,SAJA;AAMA,OAPA,MAOA;AACA,aAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA;AACA;AACA,KA5KA;;AA6KA;;;;;;;;AAQA,IAAA,8BArLA,4CAqLA;AAAA;;AACA,WAAA,mBAAA,GAAA,KAAA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,IAAA;AACA,OAFA,EAEA,IAFA,CAAA;AAGA,KA1LA;;AA2LA;;;;;;;AAOA,IAAA,gBAlMA,4BAkMA,IAlMA,EAkMA,IAlMA,EAkMA;AACA,UAAA,IAAA,GAAA,IAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA,KAAA;AACA;AACA;AACA;;AACA,UAAA,IAAA,EAAA;AACA,YAAA,GAAA,GAAA;AACA,UAAA,IAAA,EAAA,EADA;AAEA,UAAA,KAAA,EAAA;AAFA,SAAA;;AAIA,YAAA,IAAA,IAAA,OAAA,EAAA;AACA,UAAA,GAAA,CAAA,IAAA,GAAA,EAAA;AACA;;AACA,QAAA,IAAA,CAAA,IAAA,CAAA,GAAA;AACA,OATA,MASA;AACA,YAAA,IAAA,IAAA,OAAA,EAAA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,UAAA;AACA,SAFA,MAEA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,UAAA;AACA;AACA;AACA,KA1NA;;AA2NA;;;;;;;AAOA,IAAA,SAlOA,qBAkOA,IAlOA,EAkOA,IAlOA,EAkOA;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,IAAA,EAAA;AACA,cAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,KAAA,GADA,CACA;;;AACA,mBAAA,IAAA;AACA,WAHA,MAGA,IAAA,CAAA,IAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,GAAA,GADA,CACA;;;AACA,mBAAA,IAAA;AACA,WAHA,MAGA;AACA,YAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EADA,CACA;;;AACA,mBAAA,IAAA;AACA;AACA;AACA;AACA;AAlPA;AAvBA,CAAA","sourcesContent":["<!--\r\n * @Author: elephant\r\n * @Date: 2019-11-06 11:39:47\r\n * @LastEditTime: 2019-11-15 14:58:58\r\n * @LastEditors: your name\r\n * @Description: 颜色属性维护\r\n * @\r\n -->\r\n<template>\r\n  <div class=\"item-margin color-box\">\r\n    <!-- 左侧色系 -->\r\n    <div class=\"color-left\">\r\n      <div class=\"color-top\">\r\n        <span>色系</span>\r\n        <el-button size=\"mini\" @click=\"addColorSeries\" type=\"primary\">新增</el-button>\r\n      </div>\r\n       <el-form\r\n          :model=\"colorSeriesForm\"\r\n          size=\"small\"\r\n          ref=\"colorSeriesFormRef\"\r\n          inline\r\n          :inline-message=\"true\"\r\n        >\r\n      <el-table\r\n        @row-click=\"colorSeriesRowClick\"\r\n        class=\"color-series\"\r\n        :data=\"colorSeriesForm.colorSeriesData\"\r\n        key=\"colorSeriesData\"\r\n        stripe\r\n        v-loading=\"colorSeriesLoading\"\r\n        empty-text=\"暂无数据\"\r\n        header-align=\"center\"\r\n        header-row-class-name=\"item-table-header\"\r\n        :highlight-current-row=\"true\"\r\n        height=\"750\"\r\n        ref=\"seriesTableRef\"\r\n      >\r\n        <el-table-column prop=\"name\" align=\"left\" label=\"色系名称\">\r\n          <template slot-scope=\"scope\">\r\n            <el-form-item\r\n                :prop=\"'colorSeriesData.' + scope.$index + '.name'\"\r\n                 :rules=\"[\r\n                  { required: true, message: '请输入色系名称',trigger: 'blur'},\r\n                  { min: 1, max: 10, message: '最长不超过10个字符', trigger: 'blur' }\r\n                ]\"\r\n              >\r\n            <el-input\r\n              data-type=\"noTrigger\" \r\n              v-if=\"scope.row._edit\"\r\n              @blur=\"colorSeriesBlur(scope.row)\"\r\n              class=\"color-series-input\"\r\n              v-model=\"scope.row.name\"\r\n            ></el-input>\r\n            <p v-else >{{scope.row.name}}</p>\r\n           </el-form-item>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column\r\n          label-class-name=\"text-center\"\r\n          class-name=\"text-center\"\r\n          align=\"right\"\r\n          width=\"100\"\r\n        >\r\n          <template slot-scope=\"scope\">\r\n            <i class=\"el-icon-edit nav-i\" data-type=\"noTrigger\" @click=\"editColorSeries(scope.row)\"></i>\r\n            <i class=\"el-icon-delete nav-i\" data-type=\"noTrigger\"  @click=\"deleteColorSeries(scope)\"></i>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n       </el-form>\r\n    </div>\r\n    <!-- 左侧色系END -->\r\n    <!-- 右侧颜色 -->\r\n    <div v-if=\"colorIsShow\" class=\"color-right\">\r\n      <div class=\"color-top\">\r\n        <span>关联颜色</span>\r\n        <el-button size=\"mini\" @click=\"addColor\" type=\"primary\">新增</el-button>\r\n      </div>\r\n       <el-form\r\n          :model=\"colorForm\"\r\n          size=\"small\"\r\n          ref=\"colorFormRef\"\r\n          inline\r\n          :inline-message=\"true\"\r\n        >\r\n      <el-table\r\n        class=\"color\"\r\n        :data=\"colorForm.colorData\"\r\n        v-loading=\"colorLoading\"\r\n        stripe\r\n        empty-text=\"暂无数据\"\r\n        header-align=\"center\"\r\n        header-row-class-name=\"item-table-header\"\r\n        :highlight-current-row=\"true\"\r\n         height=\"750\"\r\n        ref=\"colorTableRef\"\r\n      >\r\n        <el-table-column prop=\"name\" align=\"left\" label=\"颜色名称\">\r\n          <template slot-scope=\"scope\">\r\n             <el-form-item\r\n                :prop=\"'colorData.' + scope.$index + '.name'\"\r\n                 :rules=\"[\r\n                  { required: true, message: '请输入颜色名称',trigger: 'blur'},\r\n                  { min: 1, max: 10, message: '最长不超过10个字符', trigger: 'blur' }\r\n                ]\"\r\n              >\r\n            <el-input\r\n              v-show=\"scope.row._edit\"\r\n              class=\"color-series-input\"\r\n              v-model=\"scope.row.name\"\r\n            ></el-input>\r\n            <p v-show=\"!scope.row._edit\">{{scope.row.name}}</p>\r\n             </el-form-item>\r\n          </template>\r\n        </el-table-column>\r\n         <el-table-column prop=\"code\" align=\"left\" label=\"颜色编码\">\r\n          <template slot-scope=\"scope\">\r\n             <el-form-item\r\n                :prop=\"'colorData.' + scope.$index + '.code'\"\r\n                 :rules=\"[\r\n                  { required: true, message: '请输入颜色编码',trigger: 'blur'},\r\n                  {validator: validateColorCode, trigger: 'blur' }\r\n                ]\"\r\n              >\r\n            <el-input\r\n              v-show=\"scope.row._edit\"\r\n              class=\"color-series-input\"\r\n              v-model=\"scope.row.code\"\r\n            ></el-input>\r\n            <p v-show=\"!scope.row._edit\">{{scope.row.code}}</p>\r\n             </el-form-item>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column\r\n          label-class-name=\"text-center\"\r\n          class-name=\"text-center\"\r\n          align=\"right\"\r\n          width=\"100\"\r\n        >\r\n          <template slot-scope=\"scope\">\r\n             <el-button @click=\"editOrSubmitColor(scope.row)\" type=\"text\" size=\"mini\">{{!!scope.row._edit?'保存':'编辑'}}</el-button>\r\n             <el-button @click=\"deleteColor(scope)\" type=\"text\" size=\"mini\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      </el-form>\r\n    </div>\r\n    <!-- 右侧颜色 END-->\r\n  </div>\r\n</template>\r\n<script>\r\nlet mirrorColorSeriesData =[];\r\nimport { validateColorCode } from \"@/utils/validate\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      //颜色Code 验证\r\n      validateColorCode:validateColorCode,\r\n      colorSeriesForm:{\r\n        colorSeriesData: []\r\n      },\r\n\r\n      colorIsShow:false,\r\n      colorForm:{\r\n        colorData:[],\r\n      },\r\n      colorSeriesLoading:false,\r\n      colorLoading:false,\r\n      colorSeriesId:'',\r\n      colorSeriesValidate:true,\r\n    };\r\n  },\r\n  created() {\r\n    //获取色系\r\n    this.getColorSeriesData('init');\r\n  },\r\n  methods: {\r\n    //获取色系列表\r\n    getColorSeriesData(type) {\r\n      this.colorSeriesLoading=true;\r\n      this.request(this.api.product.colorSeries_list, {},true).then(res => {\r\n        let _data = res.data;\r\n        for (let i = 0; i < _data.length; i++) {\r\n          _data[i]._edit = false;\r\n        }\r\n        if(_data.length > 0 && type == 'init'){\r\n          this.colorIsShow=true;\r\n          this.colorSeriesId=_data[0].id;\r\n          this.getColorData();\r\n        }\r\n        mirrorColorSeriesData=this.$common.deepCopy(_data);\r\n        this.colorSeriesForm.colorSeriesData = _data;\r\n        this.colorSeriesLoading=false;\r\n        this.$refs['colorSeriesFormRef'].clearValidate();\r\n      });\r\n    },\r\n    //获取颜色\r\n    getColorData(){\r\n        this.colorLoading=true;\r\n       this.request(this.api.product.color_list, {seriesId:this.colorSeriesId},true)\r\n       .then(res => {\r\n        let _data = res.data;\r\n        for (let i = 0; i < _data.length; i++) {\r\n          _data[i]._edit = false;\r\n        }\r\n        this.colorForm.colorData=_data;\r\n        this.colorLoading=false;\r\n       })\r\n    },\r\n    //色系被点击\r\n    colorSeriesRowClick(row,column, event){\r\n      if(!this.colorSeriesValidate){\r\n        return\r\n      }\r\n      let attrType=event.target.getAttribute('data-type');\r\n      if(attrType != 'noTrigger'){\r\n        if(!!row.id){\r\n          this.colorSeriesId=row.id;\r\n          this.getColorData();\r\n        }\r\n      }\r\n    },\r\n    //色系修改\r\n    editColorSeries(row) {\r\n      row._edit = true;\r\n    },\r\n    //色系删除\r\n    deleteColorSeries(scope) {\r\n      if(!!scope.row.id){\r\n        this.request(this.api.product.colorSeries_delete, { id: scope.row.id }).then(\r\n          res => {\r\n            this.$message.success(\"删除成功！\");\r\n            this.removeObj(this.colorSeriesForm.colorSeriesData,scope.row.id);\r\n          }\r\n        );\r\n      }else{\r\n         this.colorSeriesForm.colorSeriesData.splice(scope.$index, 1);\r\n      }\r\n    },\r\n    //色系失去焦点\r\n    colorSeriesBlur(row) {\r\n      let colorSeriesData = this.colorSeriesForm.colorSeriesData;\r\n      let flag = true;\r\n      if(!row.name.replace(/\\s*/g, \"\")){\r\n        this.$message.error(\"请输入色系！\");\r\n        return\r\n      }\r\n      //检查重复\r\n      for (let i = 0; i < colorSeriesData.length; i++) {\r\n        if (colorSeriesData[i].id != row.id && colorSeriesData[i].name.replace(/\\s*/g, \"\") == row.name.replace(/\\s*/g, \"\")){\r\n          flag = false;\r\n          break;\r\n        }\r\n      }\r\n      if (!flag) {\r\n        this.$message.error(\"已有相同色系！\");\r\n        return\r\n      }\r\n       //根据镜像判断是否修改了字段修改了才提交\r\n      for (let i = 0; i < mirrorColorSeriesData.length; i++) {\r\n        if(mirrorColorSeriesData[i].name.replace(/\\s*/g, \"\") == row.name.replace(/\\s*/g, \"\") && row.id != null){\r\n          row._edit=false;\r\n          this.handleColorSeriesValidateError();\r\n          return\r\n        }\r\n      }\r\n      if (flag) {\r\n        this.colorSeriesSubmit(row);\r\n      }\r\n    },\r\n    //色系保存\r\n    colorSeriesSubmit(params) {\r\n      this.$refs['colorSeriesFormRef'].validate(valid => {\r\n        if (valid) {\r\n          this.request(this.api.product.colorSeries_save, params).then(res => {\r\n            params._edit = false;\r\n            this.$message.success(\"保存成功\");\r\n            this.getColorSeriesData();\r\n            this.handleColorSeriesValidateError();\r\n          });\r\n        }else{\r\n          this.handleColorSeriesValidateError();\r\n          this.$message.error(\"规则验证不通过\");\r\n        }\r\n      });\r\n    },\r\n    //点击新增色系\r\n    addColorSeries() {\r\n      this.handleEmptyColor(this.colorSeriesForm.colorSeriesData,'colorSeries');\r\n      this.$nextTick(() => {\r\n         this.tableScrollTop('seriesTableRef',this.colorSeriesForm.colorSeriesData)\r\n      })\r\n     \r\n    },\r\n    //点击新增颜色\r\n    addColor(){\r\n      this.handleEmptyColor(this.colorForm.colorData,'color');\r\n      this.$nextTick(() => {\r\n         this.tableScrollTop('colorTableRef',this.colorForm.colorData)\r\n      })\r\n    },\r\n    //点击新增时跳到指定位置\r\n    tableScrollTop(_ref,_data){\r\n      let tableData=_data;\r\n      let _el=null;\r\n      if(_ref == 'seriesTableRef'){\r\n        _el=this.$refs.seriesTableRef;\r\n      }else{\r\n        _el=this.$refs.colorTableRef;\r\n      }\r\n       _el.setCurrentRow(tableData[tableData.length - 1])\r\n      const targetTop = _el.$el.querySelectorAll('.el-table__body tr')[tableData.length -1 ].getBoundingClientRect().top;\r\n      const containerTop = _el.$el.querySelector('.el-table__body').getBoundingClientRect().top;\r\n      const scrollParent = _el.$el.querySelector('.el-table__body-wrapper');\r\n      scrollParent.scrollTop = targetTop - containerTop;\r\n    },\r\n    //编辑或保存颜色\r\n    editOrSubmitColor(params){\r\n      //params._edit=!params._edit;\r\n      if(!!params._edit){\r\n        this.$refs['colorFormRef'].validate(valid => {\r\n         if (valid) {\r\n           params.seriesId=this.colorSeriesId;\r\n           this.request(this.api.product.color_save, params).then(res => {\r\n             params._edit = false;\r\n             this.$message.success(\"保存成功\");\r\n             this.getColorData();\r\n           });\r\n         }else{\r\n           this.$message.error(\"规则验证不通过\");\r\n         }\r\n       });\r\n      }else{\r\n        params._edit=true;\r\n      }\r\n    },\r\n    //删除颜色\r\n    deleteColor(scope){\r\n      if(!!scope.row.id){\r\n        this.request(this.api.product.color_delete, { id: scope.row.id }).then(\r\n          res => {\r\n            this.$message.success(\"删除成功！\");\r\n            this.removeObj(this.colorForm.colorData,scope.row.id);\r\n          }\r\n        );\r\n      }else{\r\n         this.colorForm.colorData.splice(scope.$index, 1);\r\n      }\r\n    },\r\n    /**\r\n     * @Date: 2019-11-07 17:02:03\r\n     * @description: 增加延时 处理色系失去焦点时\r\n     * 点击列表 触发右侧列表联动\r\n     * @author: element\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    handleColorSeriesValidateError(){\r\n      this.colorSeriesValidate=false;\r\n      setTimeout(() => {\r\n        this.colorSeriesValidate=true;\r\n      }, 2000);\r\n    },\r\n    /**\r\n     * @Date: 2019-11-07 15:36:02\r\n     * @description: 处理空颜色和色系  有就提示 无增加\r\n     * @author: elephant\r\n     * @param {_arr,type}  _arr 数据源 type 区分色系和颜色\r\n     * @return: \r\n     */   \r\n    handleEmptyColor(_arr,type){\r\n      let flag = true;\r\n      for (let i = 0; i < _arr.length; i++) {\r\n        if (_arr[i].id == null) {\r\n          flag = false;\r\n          break;\r\n        }\r\n      }\r\n      if (flag) {\r\n        let obj = {\r\n          name: \"\",\r\n          _edit: true\r\n        };\r\n        if(type == 'color'){\r\n          obj.code=\"\";\r\n        }\r\n        _arr.push(obj);\r\n      } else {\r\n         if(type == 'color'){\r\n           this.$message.error(\"当前颜色未保存！\");\r\n         }else{\r\n           this.$message.error(\"当前色系未保存！\");\r\n         }\r\n      }\r\n    },\r\n    /**\r\n     * @Date: 2019-11-07 11:48:28\r\n     * @description: 删除数组中的某一个对象\r\n     * @author: elephant\r\n     * @param {_arr,_obj} 数组 需删除的对象\r\n     * @return: //返回删除后剩余的数组\r\n     */\r\n    removeObj(_arr, _obj) {\r\n      var length = _arr.length;\r\n      for (var i = 0; i < length; i++) {\r\n        if (_arr[i].id == _obj) {\r\n          if (i == 0) {\r\n            _arr.shift(); //删除并返回数组的第一个元素\r\n            return _arr;\r\n          } else if (i == length - 1) {\r\n            _arr.pop(); //删除并返回数组的最后一个元素\r\n            return _arr;\r\n          } else {\r\n            _arr.splice(i, 1); //删除下标为i的元素\r\n            return _arr;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.color-box {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  .color-left {\r\n    min-width: 400px;\r\n    width: 400px;\r\n    margin-right: 10px;\r\n    background-color: #ffffff;\r\n    padding: 10px;\r\n  }\r\n  .color-right {\r\n    flex: 1;\r\n    background-color: #ffffff;\r\n    padding: 10px;\r\n  }\r\n}\r\n.color-top {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 40px;\r\n  border-bottom: 1px solid #eeeeee;\r\n}\r\n.color-box /deep/ .nav-i {\r\n  margin: 0 8px;\r\n  cursor: pointer;\r\n  display: none;\r\n}\r\n.color-series /deep/ .el-table__row:hover .nav-i {\r\n  display: inline-block;\r\n}\r\n.color-box /deep/ .el-form-item {\r\n  margin-bottom: 0;\r\n}\r\n</style>"],"sourceRoot":"src/views/product/basic_info"}]}