{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\inventory\\store_inventory_list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\views\\store\\inventory\\store_inventory_list.vue","mtime":1574160264533},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"C:\\\\Users\\\\EDZ\\\\Desktop\\\\\\u7814\\u53D1\\u9879\\u76EE\\\\vue-project\\\\trunk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { getToken } from '@/utils/auth';\nimport codeSet from '@/components/codeSet';\nimport treeDept from '@/components/treeDept';\nimport { filter } from 'minimatch';\nimport { get } from 'http';\nvar token = getToken();\nexport default {\n  name: 'store_inventory_list',\n  data: function data() {\n    return {\n      // 选中的表格数据\n      checkedTableData: [],\n      // data数据\n      getList_data: {},\n      // 去掉重复后的品牌收据\n      brandOptions: [],\n      // 获取门店信列表\n      getStoreList_data: [],\n      // 获取品牌列表\n      storeStock_listBrand_data: [],\n      priority: {\n        \"01\": \"高\",\n        \"02\": \"中\",\n        \"03\": \"低\"\n      },\n      formInline: {\n        user: '',\n        region: ''\n      },\n      // 选择商品品类相关参数\n      classData: [],\n      classList: [],\n      cateArr: [],\n      props: {\n        value: \"id\",\n        label: \"name\",\n        children: \"children\"\n      },\n      // 选择商品颜色相关参数\n      colorProps: {\n        value: \"code\",\n        label: \"name\",\n        children: \"children\",\n        checkStrictly: true\n      },\n      colorOptions: [],\n      colorList: [],\n      // 检索条件\n      filtersData: {\n        \"filter\": \"\",\n        \"storeId\": \"\",\n        \"relationDepId\": \"\",\n        \"brandName\": \"\",\n        \"startTime\": \"\",\n        \"endTime\": \"\",\n        \"pageIndex\": 1,\n        \"pageSize\": 10,\n        // 商品品类\n        productType: null,\n        // 商品颜色系列\n        colorSeries: null,\n        // 商品颜色\n        color: null\n      },\n      // 商品颜色系列（子类）\n      _colorSeries: null,\n      // 商品颜色（子类）\n      _color: null,\n      // 门店列表请求参数\n      filtersDataStore: {\n        pageIndex: '',\n        // 当前页码\n        pageSize: '',\n        // 每页数量\n        name: '',\n        // 门店名称\n        organizationId: '',\n        // 隶属机构\n        businessStatus: '',\n        // 营业状态\n        type: '',\n        // 门店类型\n        createBegin: '',\n        // 创建时间开始\n        createEnd: '' // 创建时间结束\n\n      },\n      value: '',\n      storageValArr: [],\n      // 指派单选框\n      radio: '1',\n      // 指派\n      gridData: [],\n      dialogTableVisible: false,\n      dialogFormVisible: false,\n      form: {\n        name: '',\n        region: '',\n        date1: '',\n        date2: '',\n        delivery: false,\n        type: [],\n        resource: '',\n        desc: ''\n      },\n      formLabelWidth: '120px'\n    };\n  },\n  created: function created() {\n    var that = this;\n    this.getList();\n    this.getStoreList();\n    this.getBrandOptions();\n    this.storeStock_listBrand();\n    this.getClassData();\n    this.getColorOptions();\n  },\n  activated: function activated() {\n    this.getList();\n  },\n  methods: {\n    /**\r\n     * 获取子级\r\n     */\n    childrenIsShow: function childrenIsShow(row, index) {\n      console.log(row);\n      var productId = row.productCode; //当前数据ID\n\n      var _type = row.isType; //状态 1 关闭 0 打开\n\n      if (_type == \"1\") {\n        //当前为关闭状态 需请求接口获取子元素\n        row.isType = 0;\n        this.getChildData(row, index);\n      } else {\n        //当前为打开状态 需删除子元素\n        row.isType = 1;\n        this.removeChildData(row);\n      }\n    },\n\n    /**\r\n     * 查询库存列表子类\r\n     */\n    getChildData: function getChildData(row, index) {\n      var _this = this;\n\n      var that = this;\n      var _index = index;\n\n      if (!row._chilren) {\n        this.request(that.api.store.storeProduct_listByDeptId, {\n          \"filter\": \"\",\n          \"storeId\": row.storeId,\n          productCode: row.productCode,\n          \"brandCode\": row.brandCode,\n          brandName: row.brandName,\n          // 商品品类\n          productType: row.productType,\n          // 商品颜色系列\n          colorSeries: this._colorSeries,\n          // 商品颜色\n          color: this._color,\n          orderBy: 'goodsCode'\n        }).then(function (res) {\n          var _this$getList_data$da;\n\n          var _data = res.data;\n          var _dataLen = _data.length;\n\n          for (var i = 0; i < _dataLen; i++) {\n            _data[i].subCode = _data[i].code;\n            _data[i].code = null;\n          }\n\n          row._chilren = _data; //根据下标插入进去 获取ID 在数组中的下标\n\n          (_this$getList_data$da = _this.getList_data.dataList.data).splice.apply(_this$getList_data$da, [_index + 1, 0].concat(_toConsumableArray(_data))); //获取子集id存入 元素属性\n\n\n          var arr = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var id = _step.value.id;\n              arr.push(id);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          row._cid = arr.join();\n        });\n      } else {\n        var _this$getList_data$da2;\n\n        (_this$getList_data$da2 = this.getList_data.dataList.data).splice.apply(_this$getList_data$da2, [_index + 1, 0].concat(_toConsumableArray(row._chilren)));\n      }\n    },\n    //删除子集\n    removeChildData: function removeChildData(row) {\n      var cid = row._cid;\n      var cidArr = cid.split(\",\");\n      var _table = this.getList_data.dataList.data,\n          tableLen = _table.length;\n\n      for (var i = 0; i < cidArr.length; i++) {\n        for (var j = 0; j < this.getList_data.dataList.data.length; j++) {\n          if (cidArr[i] == this.getList_data.dataList.data[j].id) {\n            this.getList_data.dataList.data.splice(j, 1);\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 查询库存列表\r\n     */\n    getList: function getList() {\n      var that = this;\n\n      if (this.filtersData.filter) {\n        this.filtersData.orderBy = 'quantity';\n      } else {\n        this.filtersData.orderBy = '';\n      }\n\n      ;\n      this.request(that.api.store.storeProduct_listProduct, this.filtersData).then(function (res) {\n        res.dataList.data.forEach(function (item, index) {\n          item.isShow = true;\n          item.isType = 1;\n          item._cid = \"\";\n        });\n        that.getList_data = res;\n      });\n    },\n\n    /**\r\n     * 选择品类\r\n     */\n    cascaderGet: function cascaderGet(e) {\n      var cateId = JSON.parse(JSON.stringify(e)).pop();\n      var obj = this.classList.find(function (item) {\n        return item.id == cateId;\n      });\n      this.filtersData.productType = obj.fullCateName;\n    },\n\n    /**\r\n     * 获取分类\r\n     */\n    getClassData: function getClassData() {\n      var _this2 = this;\n\n      //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\n      this.$common.getClassSelect(this, 1).then(function (res) {\n        _this2.classData = res.ztree;\n        _this2.classList = res.list;\n      });\n    },\n\n    /**\r\n     * 选择颜色\r\n     */\n    colorCodeGet: function colorCodeGet(e) {\n      var color = JSON.parse(JSON.stringify(e)).pop();\n      var obj = this.colorList.find(function (item) {\n        return item.code == color;\n      });\n\n      if (obj.parentCode === null) {\n        this.filtersData.colorSeries = obj.name;\n        this.filtersData.color = null;\n      } else {\n        this.filtersData.colorSeries = null;\n        this.filtersData.color = obj.name;\n      }\n    },\n\n    /**\r\n     * 获取颜色\r\n     */\n    getColorOptions: function getColorOptions() {\n      // console.log(\"从computed中获取颜色\");\n      var codeSet = this.$store.getters.codeData;\n      var treeList = [];\n      var codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\n\n      function toTree(data, parentCode) {\n        var tree = [];\n        var temp;\n\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].parentCode == parentCode) {\n            var obj = data[i];\n            temp = toTree(data, data[i].code);\n\n            if (temp.length > 0) {\n              obj.children = temp;\n            }\n\n            tree.push(obj);\n          }\n        }\n\n        return tree;\n      }\n\n      treeList = toTree(codeList, null);\n      this.colorList = codeList;\n      this.colorOptions = treeList;\n    },\n\n    /**\r\n     * 获取品牌\r\n     */\n    getBrandOptions: function getBrandOptions() {\n      var that = this;\n      this.request(this.api.product.productBrand_list, {}, true).then(function (res) {\n        that.brandOptions = res.data;\n      });\n    },\n    //导出\n    exportExcel: function exportExcel() {\n      var _this3 = this;\n\n      require.ensure([], function () {\n        var _require = require(\"@/vendor/Export2Excel\"),\n            export_json_to_excel = _require.export_json_to_excel,\n            export_table_to_excel = _require.export_table_to_excel;\n\n        var tHeader = [\"所属门店\", \"隶属机构\", \"商品款号\", \"商品货号\", \"库存数量\", \"商品图片\", \"品牌\", \"吊牌价\", \"颜色\", \"尺码\"]; // 上面设置Excel的表格第一行的标题\n\n        var filterVal = [\"storeName\", \"relationDepNmae\", \"productCode\", \"goodsCode\", \"quantity\", \"image\", \"brandName\", \"price\", \"color\", \"size\"]; // 上面的index、nickName、name是tableData里对象的属性\n\n        var list = _this3.getList_data.dataList.data; //把data里的tableData存到list\n\n        var data = _this3.formatJson(filterVal, list);\n\n        export_json_to_excel(tHeader, data, \"商品库存汇总列表\");\n      });\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          return v[j];\n        });\n      });\n    },\n    tableCheckChange: function tableCheckChange(val) {\n      this.checkedTableData = val;\n    },\n\n    /**\r\n     *\r\n     */\n    fnDialogTableVisible: function fnDialogTableVisible() {\n      console.log(this.ls);\n      this.workOrderPoolAssign();\n      this.dialogTableVisible = false;\n    },\n\n    /**\r\n     * 查看\r\n     */\n    timeRedact: function timeRedact(id) {\n      this.href('store/inventory/sendBck_order_detail', {\n        id: id\n      });\n    },\n    // 点击页数\n    handleCurrentChange: function handleCurrentChange(pageIndex) {\n      this.filtersData.pageIndex = pageIndex;\n      this.getList();\n    },\n    // 点击每页多少条数\n    handleSizeChange: function handleSizeChange(pageSize) {\n      this.filtersData.pageSize = pageSize;\n      this.getList();\n    },\n\n    /**\r\n     * 查询门店列表\r\n     */\n    getStoreList: function getStoreList() {\n      var that = this;\n      this.request(that.api.store.storeBasic_list, this.filtersDataStore).then(function (res) {\n        that.getStoreList_data = res;\n      });\n    },\n\n    /**\r\n     * 获取品牌列表\r\n     */\n    storeStock_listBrand: function storeStock_listBrand() {\n      var that = this;\n      this.request(that.api.store.storeStock_listBrand).then(function (res) {\n        that.storeStock_listBrand_data = res;\n      });\n    },\n\n    /**\r\n     * 跳转工单详情\r\n     */\n    href: function href(routeName, param) {\n      this.$router.push({\n        path: '/' + routeName,\n        query: param\n      });\n    },\n\n    /**\r\n     * 模糊搜索\r\n     */\n    handleSearch: function handleSearch() {\n      this.filtersData.pageIndex = 1;\n      this._colorSeries = this.filtersData.colorSeries;\n      this._color = this.filtersData.color;\n      this.getList();\n    },\n\n    /**\r\n     * 搜索重置\r\n     */\n    handleResetFilters: function handleResetFilters() {\n      Object.assign(this.filtersData, {\n        \"filter\": \"\",\n        \"storeId\": \"\",\n        \"relationDepId\": \"\",\n        \"brandName\": \"\",\n        \"startTime\": \"\",\n        \"endTime\": \"\",\n        \"pageIndex\": 1,\n        \"pageSize\": 10,\n        // 商品品类\n        productType: null,\n        // 商品颜色系列\n        colorSeries: null,\n        // 商品颜色\n        color: null\n      });\n      this.cateArr = []; // 将商品颜色重置为空\n\n      this.$refs.goodsColor.$el.children[0].children[0].value = null;\n      this.$refs.goodsColor.checkedValue = [];\n    }\n  },\n  components: {\n    codeSet: codeSet,\n    treeDept: treeDept\n  }\n};",{"version":3,"sources":["store_inventory_list.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n   <div>\r\n      <!-- 模糊搜索 -->\r\n      <div class=\"item-margin\">\r\n         <el-form\r\n            class=\"item-form\"\r\n            size=\"small\"\r\n            :inline=\"true\"\r\n            :model=\"filtersData\">\r\n            <el-form-item label=\"商品编码：\">\r\n               <el-input v-model=\"filtersData.filter\"  @keyup.enter.native=\"handleSearch\" clearable placeholder=\"请输入商品款号/货号\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品品牌：\">\r\n              <el-select v-model=\"filtersData.brandName\" clearable filterable>\r\n               <el-option\r\n                  v-for=\"item in brandOptions\"\r\n                  :key=\"item.id\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.name\"\r\n               ></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"门店名称：\">\r\n              <el-select v-model=\"filtersData.storeId\" clearable filterable>\r\n                 <el-option v-for=\"(item, index) in getStoreList_data.data\" :label=\"item.name\" :key=\"index\" :value=\"item.id\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"隶属机构：\">\r\n               <tree-dept\r\n                  type=\"0\"\r\n                  v-model=\"filtersData.relationDepId\"\r\n                  val-type=\"id\"\r\n                  :default-expand-all=\"true\"\r\n                  ref=\"organizationName\"\r\n                ></tree-dept>\r\n            </el-form-item>\r\n            <br/>\r\n            <!-- 商品品类 -->\r\n            <el-form-item prop=\"cateIdentifier\" clearable label=\"商品品类：\">\r\n               <el-cascader\r\n                  class=\"input-w\"\r\n                  :options=\"classData\"\r\n                  v-model=\"cateArr\"\r\n                  :value=\"cateArr\"\r\n                  @change=\"cascaderGet\"\r\n                  :show-all-levels=\"false\"\r\n                  :props=\"props\"\r\n                  change-on-select\r\n               ></el-cascader>\r\n            </el-form-item>\r\n            <!-- 商品颜色 -->\r\n            <el-form-item prop=\"colorCode\" label=\"商品颜色：\">\r\n               <el-cascader\r\n                  class=\"input-w\"\r\n                  :options=\"colorOptions\"\r\n                  @change=\"colorCodeGet\"\r\n                  :show-all-levels=\"false\"\r\n                  :props=\"colorProps\"\r\n                  change-on-select\r\n                  ref=\"goodsColor\"\r\n               ></el-cascader>\r\n            </el-form-item>\r\n            <!-- 搜索，重置 -->\r\n            <el-form-item>\r\n               <el-button @click=\"handleSearch\" type=\"primary\" plain size=\"small\">搜索</el-button>\r\n               <el-button @click=\"handleResetFilters\" size=\"small\">重置</el-button>\r\n            </el-form-item>\r\n         </el-form>\r\n      </div>\r\n      <!-- 模糊搜索 -->\r\n      <!-- 列表 -->\r\n      <div class=\"box\">\r\n         <el-button size=\"small\" type=\"primary\" @click=\"exportExcel\">导出</el-button>\r\n         <el-table\r\n            :data=\"getList_data.dataList.data\"\r\n            stripe\r\n            empty-text=\"暂无数据\"\r\n            header-align=\"center\"\r\n            header-row-class-name=\"item-table-header\"\r\n            :highlight-current-row=\"true\">\r\n            <el-table-column width=\"45\">\r\n               <template slot-scope=\"scope\">\r\n                  <i\r\n                     @click=\"childrenIsShow(scope.row, scope.$index )\"\r\n                     v-if=\"scope.row.isShow\"\r\n                     :class=\"scope.row.isType == 1 ?'el-icon-circle-plus-outline i-cursor' : 'el-icon-remove-outline i-cursor'\"\r\n                  ></i>\r\n               </template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品款号\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.productCode || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品货号\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.goodsCode || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"库存数量\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.quantity }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"商品图片\" min-width=\"70\">\r\n               <template  slot-scope=\"scope\"><img :src=\"scope.row.image\" class=\"imageSize\" alt=\"\"></template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"品牌\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.brandName || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"品类\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.productType || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"颜色\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.color || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"尺码\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.size }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"吊牌价\" min-width=\"50\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.price || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"所属门店\" min-width=\"100\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.storeName || '--' }}</template>\r\n            </el-table-column>\r\n            <el-table-column align=\"left\" :show-overflow-tooltip=\"true\" label=\"隶属机构\" min-width=\"60\">\r\n               <template  slot-scope=\"scope\">{{ scope.row.relationDepNmae || '--' }}</template>\r\n            </el-table-column>\r\n         </el-table>\r\n         <div class=\"disFlex\">\r\n            <div class=\"info\">{{ getList_data.info }}</div>\r\n            <div class=\"pagination mt-10 mb-20\">\r\n               <!-- 分页 -->\r\n               <el-pagination\r\n                  class=\"mr-20\"\r\n                  @size-change=\"handleSizeChange\"\r\n                  @current-change=\"handleCurrentChange\"\r\n                  :current-page=\"filtersData.pageIndex\"\r\n                  :page-sizes=\"[10,20,30,40,50]\"\r\n                  :page-size=\"filtersData.pageSize\"\r\n                  layout=\"total, sizes, prev, pager, next, jumper\"\r\n                  :total=\"getList_data.dataList.totalCount\"\r\n               ></el-pagination>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <!-- 列表 -->\r\n   </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport {getToken} from '@/utils/auth'\r\nimport codeSet from '@/components/codeSet'\r\nimport treeDept from '@/components/treeDept'\r\nimport { filter } from 'minimatch';\r\nimport { get } from 'http';\r\n\r\nlet token=getToken()\r\n\r\nexport default {\r\n   name:'store_inventory_list',\r\n   data() {\r\n      return{\r\n         // 选中的表格数据\r\n         checkedTableData: [],\r\n         // data数据\r\n         getList_data:{},\r\n         // 去掉重复后的品牌收据\r\n         brandOptions:[],\r\n         // 获取门店信列表\r\n         getStoreList_data:[],\r\n         // 获取品牌列表\r\n         storeStock_listBrand_data:[],\r\n         priority:{\r\n            \"01\":\"高\",\r\n            \"02\":\"中\",\r\n            \"03\":\"低\",\r\n         },\r\n         formInline:{\r\n            user: '',\r\n            region: ''\r\n         },\r\n         // 选择商品品类相关参数\r\n         classData: [],\r\n         classList: [],\r\n         cateArr: [],\r\n         props: {\r\n            value: \"id\",\r\n            label: \"name\",\r\n            children: \"children\"\r\n         },\r\n         // 选择商品颜色相关参数\r\n         colorProps: {\r\n            value: \"code\",\r\n            label: \"name\",\r\n            children: \"children\",\r\n            checkStrictly: true\r\n         },\r\n         colorOptions: [],\r\n         colorList:[],\r\n         // 检索条件\r\n         filtersData: {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         },\r\n         // 商品颜色系列（子类）\r\n         _colorSeries:null,\r\n         // 商品颜色（子类）\r\n         _color:null,\r\n         // 门店列表请求参数\r\n         filtersDataStore:{\r\n            pageIndex: '',// 当前页码\r\n            pageSize: '',// 每页数量\r\n            name:'',// 门店名称\r\n            organizationId:'',// 隶属机构\r\n            businessStatus:'',// 营业状态\r\n            type:'',// 门店类型\r\n            createBegin:'',// 创建时间开始\r\n            createEnd:''// 创建时间结束\r\n         },\r\n         value: '',\r\n         storageValArr:[],\r\n         // 指派单选框\r\n         radio: '1',\r\n         // 指派\r\n         gridData: [],\r\n        dialogTableVisible: false,\r\n        dialogFormVisible: false,\r\n        form: {\r\n          name: '',\r\n          region: '',\r\n          date1: '',\r\n          date2: '',\r\n          delivery: false,\r\n          type: [],\r\n          resource: '',\r\n          desc: ''\r\n        },\r\n        formLabelWidth: '120px'\r\n      }\r\n   },\r\n   created() {\r\n      const that = this;\r\n\r\n      this.getList();\r\n      this.getStoreList();\r\n      this.getBrandOptions();\r\n      this.storeStock_listBrand();\r\n      this.getClassData();\r\n      this.getColorOptions();\r\n   },\r\n   activated() {\r\n      this.getList();\r\n   },\r\n   methods: {\r\n      /**\r\n       * 获取子级\r\n       */\r\n      childrenIsShow(row, index) {\r\n         console.log(row)\r\n         var productId = row.productCode; //当前数据ID\r\n         let _type = row.isType; //状态 1 关闭 0 打开\r\n         if (_type == \"1\") {\r\n         //当前为关闭状态 需请求接口获取子元素\r\n         row.isType = 0;\r\n         this.getChildData(row, index);\r\n         } else {\r\n         //当前为打开状态 需删除子元素\r\n         row.isType = 1;\r\n         this.removeChildData(row);\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表子类\r\n       */\r\n      getChildData(row, index) {\r\n         let that = this;\r\n         let _index = index;\r\n         if (!row._chilren) {\r\n            this.request(\r\n               that.api.store.storeProduct_listByDeptId,\r\n               {\r\n               \"filter\": \"\",\r\n               \"storeId\": row.storeId,\r\n               productCode:row.productCode,\r\n               \"brandCode\":row.brandCode,\r\n               brandName:row.brandName,\r\n               // 商品品类\r\n               productType:row.productType, \r\n               // 商品颜色系列\r\n               colorSeries:this._colorSeries,\r\n               // 商品颜色\r\n               color:this._color,\r\n               orderBy:'goodsCode'\r\n               }\r\n            ).then(res => {\r\n               let _data = res.data;\r\n               let _dataLen = _data.length;\r\n               for (let i = 0; i < _dataLen; i++) {\r\n                  _data[i].subCode = _data[i].code;\r\n                  _data[i].code = null;\r\n               }\r\n               row._chilren = _data;\r\n               //根据下标插入进去 获取ID 在数组中的下标\r\n               this.getList_data.dataList.data.splice(_index + 1, 0, ..._data);\r\n               //获取子集id存入 元素属性\r\n               let arr = [];\r\n               for (let { id } of _data) {\r\n                  arr.push(id);\r\n               }\r\n               row._cid = arr.join();\r\n            });\r\n         } else {\r\n         this.getList_data.dataList.data.splice(_index + 1, 0, ...row._chilren);\r\n         }\r\n      },\r\n      //删除子集\r\n      removeChildData(row) {\r\n         let cid = row._cid;\r\n         let cidArr = cid.split(\",\");\r\n         let _table = this.getList_data.dataList.data,\r\n         tableLen = _table.length;\r\n         for (let i = 0; i < cidArr.length; i++) {\r\n         for (let j = 0; j < this.getList_data.dataList.data.length; j++) {\r\n            if (cidArr[i] == this.getList_data.dataList.data[j].id) {\r\n               this.getList_data.dataList.data.splice(j, 1);\r\n            }\r\n         }\r\n         }\r\n      },\r\n      /**\r\n       * 查询库存列表\r\n       */\r\n      getList() {\r\n         const that = this;\r\n\r\n         if(this.filtersData.filter) {\r\n            this.filtersData.orderBy = 'quantity';\r\n         }else{\r\n            this.filtersData.orderBy = '';\r\n         };\r\n         this.request(\r\n         that.api.store.storeProduct_listProduct,\r\n         this.filtersData\r\n         ).then(res => {\r\n            res.dataList.data.forEach((item, index) => {\r\n               item.isShow = true;\r\n               item.isType = 1;\r\n               item._cid = \"\";\r\n            })\r\n            that.getList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 选择品类\r\n       */\r\n      cascaderGet(e) {\r\n         let cateId = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.classList.find(item => item.id == cateId);\r\n         this.filtersData.productType = obj.fullCateName;\r\n      },\r\n      /**\r\n       * 获取分类\r\n       */\r\n      getClassData() {\r\n         //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\r\n         this.$common.getClassSelect(this, 1).then(res => {\r\n            this.classData = res.ztree;\r\n            this.classList = res.list;\r\n         });\r\n      },\r\n      /**\r\n       * 选择颜色\r\n       */\r\n      colorCodeGet(e) {\r\n         let color  = JSON.parse(JSON.stringify(e)).pop();\r\n         let obj = this.colorList.find((item)=>(item.code == color));\r\n         if(obj.parentCode ===null){\r\n            this.filtersData.colorSeries = obj.name;\r\n            this.filtersData.color = null;\r\n         }else{\r\n            this.filtersData.colorSeries = null;\r\n            this.filtersData.color =obj.name;\r\n         }\r\n      },\r\n      /**\r\n       * 获取颜色\r\n       */\r\n      getColorOptions() {\r\n      // console.log(\"从computed中获取颜色\");\r\n      let codeSet = this.$store.getters.codeData;\r\n      let treeList = [];\r\n      let codeList = JSON.parse(JSON.stringify(codeSet.PRO004.codeItemList));\r\n      function toTree(data, parentCode) {\r\n         var tree = [];\r\n         var temp;\r\n         for (var i = 0; i < data.length; i++) {\r\n            if (data[i].parentCode == parentCode) {\r\n            var obj = data[i];\r\n            temp = toTree(data, data[i].code);\r\n            if (temp.length > 0) {\r\n               obj.children = temp;\r\n            }\r\n            tree.push(obj);\r\n            }\r\n         }\r\n         return tree;\r\n      }\r\n      treeList = toTree(codeList, null);\r\n      this.colorList = codeList;\r\n      this.colorOptions = treeList;\r\n      },\r\n      /**\r\n       * 获取品牌\r\n       */\r\n      getBrandOptions() {\r\n         let that = this;\r\n         this.request(\r\n         this.api.product.productBrand_list,\r\n         {},\r\n         true\r\n         ).then(res => {\r\n            that.brandOptions = res.data;\r\n         });\r\n      },\r\n      //导出\r\n      exportExcel() {\r\n     \r\n        require.ensure([], () => {\r\n          let { export_json_to_excel, export_table_to_excel } = require(\"@/vendor/Export2Excel\");\r\n          let tHeader = [\r\n            \"所属门店\",\r\n            \"隶属机构\",\r\n            \"商品款号\",\r\n            \"商品货号\",\r\n            \"库存数量\",\r\n            \"商品图片\",\r\n            \"品牌\",\r\n            \"吊牌价\",\r\n            \"颜色\",\r\n            \"尺码\",\r\n          ];\r\n          // 上面设置Excel的表格第一行的标题\r\n          let filterVal = [\r\n            \"storeName\",\r\n            \"relationDepNmae\",\r\n            \"productCode\",\r\n            \"goodsCode\",\r\n            \"quantity\",\r\n            \"image\",\r\n            \"brandName\",\r\n            \"price\",\r\n            \"color\",\r\n            \"size\"\r\n          ];\r\n          // 上面的index、nickName、name是tableData里对象的属性\r\n          let list = this.getList_data.dataList.data; //把data里的tableData存到list\r\n          let data = this.formatJson(filterVal, list);\r\n          export_json_to_excel(tHeader, data, \"商品库存汇总列表\");\r\n        });\r\n      },\r\n      formatJson(filterVal, jsonData) {\r\n        return jsonData.map(v => filterVal.map(j => v[j]));\r\n      },\r\n      tableCheckChange(val){\r\n        this.checkedTableData = val;\r\n      },\r\n      /**\r\n       *\r\n       */\r\n      fnDialogTableVisible() {\r\n         console.log(this.ls)\r\n         this.workOrderPoolAssign();\r\n         this.dialogTableVisible = false;\r\n      },\r\n      /**\r\n       * 查看\r\n       */\r\n      timeRedact(id) {\r\n         this.href('store/inventory/sendBck_order_detail',{\r\n            id\r\n         })\r\n      },\r\n      // 点击页数\r\n      handleCurrentChange(pageIndex){\r\n         this.filtersData.pageIndex = pageIndex;\r\n         this.getList();\r\n      },\r\n      // 点击每页多少条数\r\n      handleSizeChange(pageSize){\r\n         this.filtersData.pageSize = pageSize;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 查询门店列表\r\n       */\r\n      getStoreList() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeBasic_list,\r\n         this.filtersDataStore\r\n         ).then(res => {\r\n            that.getStoreList_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 获取品牌列表\r\n       */\r\n      storeStock_listBrand() {\r\n         const that = this;\r\n\r\n         this.request(\r\n         that.api.store.storeStock_listBrand\r\n         ).then(res => {\r\n            that.storeStock_listBrand_data = res;\r\n         });\r\n      },\r\n      /**\r\n       * 跳转工单详情\r\n       */\r\n      href(routeName, param) {\r\n         this.$router.push({\r\n            path: '/' + routeName,\r\n            query: param\r\n         })\r\n      },\r\n      /**\r\n       * 模糊搜索\r\n       */\r\n      handleSearch() {\r\n         this.filtersData.pageIndex = 1;\r\n         this._colorSeries = this.filtersData.colorSeries;\r\n         this._color = this.filtersData.color;\r\n         this.getList();\r\n      },\r\n      /**\r\n       * 搜索重置\r\n       */\r\n      handleResetFilters() {\r\n         \r\n         Object.assign(this.filtersData, {\r\n            \"filter\": \"\",\r\n            \"storeId\": \"\",\r\n            \"relationDepId\":\"\",\r\n            \"brandName\":\"\",\r\n            \"startTime\":\"\",\r\n            \"endTime\":\"\",\r\n            \"pageIndex\": 1,\r\n            \"pageSize\": 10,\r\n            // 商品品类\r\n            productType:null, \r\n            // 商品颜色系列\r\n            colorSeries:null,\r\n            // 商品颜色\r\n            color:null\r\n         });\r\n         this.cateArr = [];\r\n         // 将商品颜色重置为空\r\n         this.$refs.goodsColor.$el.children[0].children[0].value = null;\r\n         this.$refs.goodsColor.checkedValue = [];\r\n      },\r\n   },\r\n   components:{\r\n      codeSet,\r\n      treeDept\r\n   }\r\n}\r\n</script>\r\n<style  lang=\"less\" scoped>\r\n   .box{\r\n      margin: 8px;\r\n      padding: 20px;\r\n      background: #fff;\r\n   }\r\n  .imageSize{\r\n      width: 50px;\r\n      height: 50px;\r\n   }\r\n   .blueness{\r\n      color: #1E90FF;\r\n   }\r\n  .disFlex{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      .info{\r\n         margin-top: 15px;\r\n      }\r\n   }\r\n   .warningType{\r\n    width: 20px;\r\n    height: 20px;\r\n    line-height: 20px;\r\n    display: inline-block;\r\n    background: red;\r\n    color: #fff;\r\n    font-size: 12px;\r\n    border-radius: 4px;\r\n    margin-left: 10px;\r\n    text-align: center;\r\n   }\r\n   .color{\r\n      background: #FF6347;\r\n   }\r\n   h5 {\r\n     color: #222;\r\n     margin-left: -15px;\r\n   }\r\n   .test {\r\n     color: #9d9d9d;\r\n   }\r\n</style>\r\n"],"sourceRoot":"src/views/store/inventory"}]}