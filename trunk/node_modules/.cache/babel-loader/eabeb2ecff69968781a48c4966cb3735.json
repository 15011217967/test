{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\customAttribute\\material_dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\customAttribute\\material_dialog.vue","mtime":1574160264356},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:\\\\Users\\\\EDZ\\\\Desktop\\\\\\u7814\\u53D1\\u9879\\u76EE\\\\vue-project\\\\trunk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * middleware\r\n * 注意 禁止传入父组件向子组件传入全部数据\r\n * 只可以子组件向父组件传入全部数据\r\n *\r\n * 此页面多处公用 （供应商支持管理详情、定制单品管理详情）\r\n * 原料详情数据\r\n *\r\n * 因需求变动 注意已下几项\r\n * 1、因牵扯新增 回显等复杂逻辑，要禁止数据双向驱动，做数据深复制；\r\n * 2、要保持在确定的时候给父页面传递数据，改变父级数据；\r\n * 3、当页面弹出时 点击取消不进行数据还原；\r\n * 4、当父页面数据删除时 改变子数据勾选状态；\r\n * 5、最好做数据拆分 父传子数据 只穿IDs 数组 ；\r\n * 6、子传父 根据是新增还是修改 传入不同的数据\r\n * 7、子向父传递数据时 父数据做循环判别\r\n * 8、父组件回显时  子组件只拿一次付后台返回传入的数据\r\n * 其他数据操作 通过抽象函数 处理\r\n *\r\n */\n\n/**\r\n * 父组件list 触发删除操作  父组件传入删除的ID\r\n * 根据ID 改变状态\r\n */\n\n/**\r\n * 父组件回显会发生数据联动\r\n * 父组件传入 IDs\r\n * 需有个存父组件ID的数组\r\n * 跟本地数组合并\r\n *\r\n */\n\n/**\r\n * 原料子组件已选列表并向前端返回\r\n */\nvar selectedMaterialList = [];\nvar firstStatus = true;\nexport default {\n  name: \"tp-material-dialog\",\n  data: function data() {\n    return {\n      filtersData: {\n        type: 2,\n        //原料类型（1：工艺，2：原料）\n        pageIndex: 1,\n        pageSize: 10,\n        searchWords: \"\",\n        cateIdentifier: \"\",\n        valid: true\n      },\n      materialDialogVisible: false,\n      tableListData: [],\n      total: 0,\n      classData: [],\n      classList: [],\n      cateArr: [],\n      props: {\n        value: \"id\",\n        label: \"name\",\n        children: \"children\"\n      },\n      logType: \"\"\n    };\n  },\n  created: function created() {\n    firstStatus = true;\n    this.init();\n  },\n  mounted: function mounted() {\n    this.getClassData();\n  },\n  methods: {\n    init: function init() {\n      this.filtersData = {\n        type: 2,\n        //原料类型（1：工艺，2：原料）\n        pageIndex: 1,\n        pageSize: 10,\n        searchWords: \"\",\n        cateIdentifier: \"\",\n        valid: true\n      };\n      this.tableListData = [];\n      this.logType = \"\";\n      this.cateArr = [];\n      selectedMaterialList = [];\n    },\n    getClassData: function getClassData() {\n      var _this = this;\n\n      //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\n      this.$common.getClassSelect(this, 3).then(function (res) {\n        _this.classData = res.ztree;\n        _this.classList = res.list;\n      });\n    },\n    cascaderGet: function cascaderGet(e) {\n      var cateId = JSON.parse(JSON.stringify(e)).pop();\n      var obj = this.classList.find(function (item) {\n        return item.id == cateId;\n      });\n      this.filtersData.materialCateIdentifier = obj.identifier;\n    },\n    popupInit: function popupInit(identifier, dialogType, parentList) {\n      this.logType = dialogType;\n      selectedMaterialList = parentList;\n      this.selectedArr();\n\n      if (firstStatus) {\n        firstStatus = false;\n        this.filtersData.cateIdentifier = identifier;\n        this.getTableList();\n      }\n\n      this.materialDialogVisible = true;\n    },\n    //获取列表\n    getTableList: function getTableList() {\n      var _this2 = this;\n\n      this.request(this.api.product.productionMaterial_list, this.filtersData).then(function (data) {\n        var _data = data.data,\n            _dataLen = _data.length; //全部勾选false 把ID值为空\n\n        for (var i = 0; i < _dataLen; i++) {\n          _data[i]._checkbox = false;\n          _data[i].materialId = _data[i].id;\n          _data[i].sourceCode = \"\";\n          _data[i].id = null;\n        } //获取数据后 从已有列表中找出已勾选分类\n        //循环 改变勾选状态\n\n\n        var listData = selectedMaterialList; //找到已有的 改成true\n\n        if (listData.length >= 0) {\n          for (var k = 0; k < listData.length; k++) {\n            for (var j = 0; j < _dataLen; j++) {\n              if (listData[k].materialId == _data[j].materialId) {\n                _data[j]._checkbox = true;\n              }\n            }\n          }\n        } //列表数据\n\n\n        _this2.tableListData = _data;\n        _this2.total = data.totalCount;\n      });\n    },\n    //改变状态  先弃用 父组件传入数据触发\n    selectedArr: function selectedArr() {\n      if (this.tableListData.length <= 0) {\n        return;\n      }\n\n      for (var i = 0; i < this.tableListData.length; i++) {\n        this.tableListData[i]._checkbox = false;\n      }\n\n      var listData = selectedMaterialList;\n\n      for (var k = 0; k < listData.length; k++) {\n        for (var j = 0; j < this.tableListData.length; j++) {\n          if (listData[k].materialId == this.tableListData[j].materialId) {\n            this.tableListData[j]._checkbox = true;\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 单选发生改变\r\n     * 当单选发生改变时 把新增的勾选 放入数组中\r\n     *\r\n     */\n    tableChangeCheckbox: function tableChangeCheckbox(elem, row) {\n      var index = selectedMaterialList.findIndex(function (item) {\n        return item.materialId == row.materialId;\n      });\n\n      if (elem) {\n        //新增\n        if (index == -1) {\n          selectedMaterialList.push(row);\n        }\n      } else {\n        //删除\n        if (index != -1) {\n          selectedMaterialList.splice(index, 1);\n        }\n      } //console.log(materialList);\n\n    },\n    //搜索\n    handleSearch: function handleSearch() {\n      this.filtersData.pageIndex = 1;\n      this.getTableList();\n    },\n    //清空重置\n    handleResetFilters: function handleResetFilters(formName) {\n      this.$refs[formName].resetFields();\n      this.cateArr = [];\n    },\n    //当前页数修改时发生改变\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.filtersData.pageIndex = val;\n      this.getTableList();\n    },\n    // 每页显示多少条时发生改变\n    handleSizeChange: function handleSizeChange(val) {\n      this.filtersData.pageSize = val;\n      this.getTableList();\n    },\n\n    /**\r\n     * 修改保存\r\n     * 数据新增 或者删除\r\n     * 向父组件传入数据\r\n     */\n    submitForm: function submitForm() {\n      this.$emit(\"setParentMaterialData\", _toConsumableArray(selectedMaterialList));\n      this.closeDialog();\n    },\n    //关闭\n    closeDialog: function closeDialog() {\n      this.materialDialogVisible = false;\n    }\n  }\n};",{"version":3,"sources":["material_dialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-dialog\r\n  v-if=\"materialDialogVisible\"\r\n    title=\"选择原料\"\r\n    :visible.sync=\"materialDialogVisible\"\r\n    class=\"alarmPopup\"\r\n    width=\"1000px\"\r\n    append-to-body\r\n  >\r\n    <div class=\"dialog-search\">\r\n      <el-form\r\n        class=\"item-form\"\r\n        :model=\"filtersData\"\r\n        label-width=\"90px\"\r\n        size=\"small\"\r\n        ref=\"filtersForm\"\r\n        inline\r\n      >\r\n        <el-form-item prop=\"materialCateIdentifier\" label=\"分类：\">\r\n          <el-cascader\r\n            class=\"input-w\"\r\n            :options=\"classData\"\r\n            v-model=\"cateArr\"\r\n            :value=\"cateArr\"\r\n            @change=\"cascaderGet\"\r\n            :show-all-levels=\"false\"\r\n            :props=\"props\"\r\n            change-on-select\r\n          ></el-cascader>\r\n        </el-form-item>\r\n        <el-form-item prop=\"searchWords\" label=\"综合搜索：\">\r\n          <el-input class=\"input-w\" placeholder=\"请输入内容\" v-model=\"filtersData.searchWords\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button @click=\"handleSearch\" type=\"primary\" plain size=\"small\">搜索</el-button>\r\n          <el-button @click=\"handleResetFilters('filtersForm')\" size=\"small\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n    <div>\r\n      <el-table\r\n        :data=\"tableListData\"\r\n        stripe\r\n        empty-text=\"暂无数据\"\r\n        header-align=\"center\"\r\n        header-row-class-name=\"item-table-header\"\r\n        :highlight-current-row=\"true\"\r\n        height=\"400\"\r\n      >\r\n        <el-table-column prop=\"code\" align=\"center\" label=\"标准编码\" min-width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"materialFullCateName\" align=\"center\" label=\"分类\" min-width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"name\" align=\"center\" label=\"原料名称\" min-width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"image\" align=\"center\" label=\"图片\" min-width=\"120\">\r\n          <template slot-scope=\"scope\">\r\n            <img class=\"table-img-wh\" :src=\"scope.row.image\" alt>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"unitPrice\" align=\"center\" label=\"销售价格\" min-width=\"100\"></el-table-column>\r\n        <el-table-column\r\n          fixed=\"right\"\r\n          label-class-name=\"text-center\"\r\n          class-name=\"text-center\"\r\n          align=\"center\"\r\n          label=\"操作\"\r\n          width=\"100\"\r\n        >\r\n          <template slot-scope=\"scope\">\r\n            <el-checkbox\r\n              @change=\"tableChangeCheckbox($event,scope.row)\"\r\n              v-model=\"scope.row._checkbox\"\r\n            ></el-checkbox>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <div class=\"pagination mt-10 mb-20\">\r\n        <el-pagination\r\n          class=\"mr-20\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n          :current-page=\"filtersData.pageIndex\"\r\n          :page-sizes=\"[10,20,30,40,50]\"\r\n          :page-size=\"filtersData.pageSize\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n        ></el-pagination>\r\n      </div>\r\n    </div>\r\n    <div class=\"item-right\">\r\n      <el-button size=\"small\" @click=\"closeDialog\">取消</el-button>\r\n      <el-button size=\"small\" @click=\"submitForm()\" type=\"primary\">确定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\n/**\r\n * middleware\r\n * 注意 禁止传入父组件向子组件传入全部数据\r\n * 只可以子组件向父组件传入全部数据\r\n *\r\n * 此页面多处公用 （供应商支持管理详情、定制单品管理详情）\r\n * 原料详情数据\r\n *\r\n * 因需求变动 注意已下几项\r\n * 1、因牵扯新增 回显等复杂逻辑，要禁止数据双向驱动，做数据深复制；\r\n * 2、要保持在确定的时候给父页面传递数据，改变父级数据；\r\n * 3、当页面弹出时 点击取消不进行数据还原；\r\n * 4、当父页面数据删除时 改变子数据勾选状态；\r\n * 5、最好做数据拆分 父传子数据 只穿IDs 数组 ；\r\n * 6、子传父 根据是新增还是修改 传入不同的数据\r\n * 7、子向父传递数据时 父数据做循环判别\r\n * 8、父组件回显时  子组件只拿一次付后台返回传入的数据\r\n * 其他数据操作 通过抽象函数 处理\r\n *\r\n */\r\n/**\r\n * 父组件list 触发删除操作  父组件传入删除的ID\r\n * 根据ID 改变状态\r\n */\r\n/**\r\n * 父组件回显会发生数据联动\r\n * 父组件传入 IDs\r\n * 需有个存父组件ID的数组\r\n * 跟本地数组合并\r\n *\r\n */\r\n/**\r\n * 原料子组件已选列表并向前端返回\r\n */\r\nlet selectedMaterialList = [];\r\nlet firstStatus = true;\r\nexport default {\r\n  name: \"tp-material-dialog\",\r\n  data() {\r\n    return {\r\n      filtersData: {\r\n        type: 2, //原料类型（1：工艺，2：原料）\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        searchWords: \"\",\r\n        cateIdentifier: \"\",\r\n        valid: true\r\n      },\r\n      materialDialogVisible: false,\r\n      tableListData: [],\r\n      total: 0,\r\n      classData: [],\r\n      classList: [],\r\n      cateArr: [],\r\n      props: {\r\n        value: \"id\",\r\n        label: \"name\",\r\n        children: \"children\"\r\n      },\r\n      logType: \"\"\r\n    };\r\n  },\r\n  created() {\r\n    firstStatus = true;\r\n    this.init();\r\n  },\r\n  mounted() {\r\n    this.getClassData();\r\n  },\r\n  methods: {\r\n    init(){\r\n      this.filtersData = {\r\n         type: 2, //原料类型（1：工艺，2：原料）\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        searchWords: \"\",\r\n        cateIdentifier: \"\",\r\n        valid: true\r\n      };\r\n      this.tableListData = [];\r\n      this.logType = \"\";\r\n      this.cateArr = [];\r\n      selectedMaterialList = [];\r\n    },\r\n    getClassData() {\r\n      //分类类型（1：标准分类，2：定制分类，3：原料分类或者称为属性分类）\r\n      this.$common.getClassSelect(this, 3).then(res => {\r\n        this.classData = res.ztree;\r\n        this.classList = res.list;\r\n      });\r\n    },\r\n    cascaderGet(e) {\r\n      let cateId = JSON.parse(JSON.stringify(e)).pop();\r\n      let obj = this.classList.find(item => item.id == cateId);\r\n      this.filtersData.materialCateIdentifier = obj.identifier;\r\n    },\r\n    popupInit(identifier, dialogType, parentList) {\r\n        this.logType = dialogType;\r\n        selectedMaterialList = parentList;\r\n        this.selectedArr();\r\n      if (firstStatus) {\r\n        firstStatus = false;\r\n        this.filtersData.cateIdentifier = identifier;\r\n        this.getTableList();\r\n      }\r\n      this.materialDialogVisible = true;\r\n    },\r\n    //获取列表\r\n    getTableList() {\r\n      this.request(\r\n        this.api.product.productionMaterial_list,\r\n        this.filtersData\r\n      ).then(data => {\r\n        let _data = data.data,\r\n          _dataLen = _data.length;\r\n        //全部勾选false 把ID值为空\r\n        for (let i = 0; i < _dataLen; i++) {\r\n          _data[i]._checkbox = false;\r\n          _data[i].materialId = _data[i].id;\r\n          _data[i].sourceCode = \"\";\r\n          _data[i].id = null;\r\n        }\r\n        //获取数据后 从已有列表中找出已勾选分类\r\n        //循环 改变勾选状态\r\n        let listData = selectedMaterialList;\r\n        //找到已有的 改成true\r\n        if (listData.length >= 0) {\r\n          for (let k = 0; k < listData.length; k++) {\r\n            for (let j = 0; j < _dataLen; j++) {\r\n              if (listData[k].materialId == _data[j].materialId) {\r\n                _data[j]._checkbox = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        //列表数据\r\n        this.tableListData = _data;\r\n        this.total = data.totalCount;\r\n      });\r\n    },\r\n    //改变状态  先弃用 父组件传入数据触发\r\n    selectedArr() {\r\n      if (this.tableListData.length <= 0) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < this.tableListData.length; i++) {\r\n        this.tableListData[i]._checkbox = false;\r\n      }\r\n      let listData = selectedMaterialList;\r\n      for (let k = 0; k < listData.length; k++) {\r\n        for (let j = 0; j < this.tableListData.length; j++) {\r\n          if (listData[k].materialId == this.tableListData[j].materialId) {\r\n            this.tableListData[j]._checkbox = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 单选发生改变\r\n     * 当单选发生改变时 把新增的勾选 放入数组中\r\n     *\r\n     */\r\n    tableChangeCheckbox(elem, row) {\r\n      let index = selectedMaterialList.findIndex(\r\n        item => item.materialId == row.materialId\r\n      );\r\n      if (elem) {\r\n        //新增\r\n        if (index == -1) {\r\n          selectedMaterialList.push(row);\r\n        }\r\n      } else {\r\n        //删除\r\n        if (index != -1) {\r\n          selectedMaterialList.splice(index, 1);\r\n        }\r\n      }\r\n      //console.log(materialList);\r\n    },\r\n    //搜索\r\n    handleSearch() {\r\n      this.filtersData.pageIndex = 1;\r\n      this.getTableList();\r\n    },\r\n    //清空重置\r\n    handleResetFilters(formName) {\r\n      this.$refs[formName].resetFields();\r\n      this.cateArr = [];\r\n    },\r\n    //当前页数修改时发生改变\r\n    handleCurrentChange(val) {\r\n      this.filtersData.pageIndex = val;\r\n      this.getTableList();\r\n    },\r\n    // 每页显示多少条时发生改变\r\n    handleSizeChange(val) {\r\n      this.filtersData.pageSize = val;\r\n      this.getTableList();\r\n    },\r\n    /**\r\n     * 修改保存\r\n     * 数据新增 或者删除\r\n     * 向父组件传入数据\r\n     */\r\n    submitForm() {\r\n      this.$emit(\"setParentMaterialData\", [...selectedMaterialList]);\r\n      this.closeDialog();\r\n    },\r\n    //关闭\r\n    closeDialog() {\r\n      this.materialDialogVisible = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.dialog-search {\r\n  border-bottom: 1px solid #eeeeee;\r\n  .item-form {\r\n    padding: 0;\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/customAttribute"}]}