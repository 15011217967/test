{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\el-cascader-multi\\multi-cascader\\multi-cascader.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\src\\components\\el-cascader-multi\\multi-cascader\\multi-cascader.vue","mtime":1572415127847},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":1558492720858},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558492728398},{"path":"C:\\Users\\EDZ\\Desktop\\研发项目\\vue-project\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":1558492728890}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport _defineProperty from \"C:\\\\Users\\\\EDZ\\\\Desktop\\\\\\u7814\\u53D1\\u9879\\u76EE\\\\vue-project\\\\trunk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"C:\\\\Users\\\\EDZ\\\\Desktop\\\\\\u7814\\u53D1\\u9879\\u76EE\\\\vue-project\\\\trunk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TreeStore from \"./lib/Tree.js\";\nimport renderList from \"./render-list.vue\";\nimport { _findByObj } from \"./tool/unit\";\nexport default {\n  name: 'el-cascader-multi',\n  components: {\n    renderList: renderList\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      },\n      required: true\n    },\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      },\n      required: true\n    },\n    separator: {\n      type: String,\n      default: '-'\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    filterMethod: {\n      type: Function\n    },\n    popperClass: {\n      type: String,\n      default: ''\n    },\n    reserveKeyword: {\n      type: Boolean,\n      default: true\n    },\n    valueKey: {\n      type: String,\n      default: 'value'\n    },\n    labelKey: {\n      type: String,\n      default: 'label'\n    },\n    childrenKey: {\n      type: String,\n      default: 'children'\n    },\n    expandTrigger: {\n      type: String,\n      default: 'click'\n    },\n    onlyLast: {\n      type: Boolean,\n      default: false\n    },\n    isTwoDimensionValue: {\n      type: Boolean,\n      default: true\n    },\n    showLeafLabel: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      selectedLabels: [],\n      selectedIds: [],\n      selectedNodes: [],\n      activeClass: 'floor-width-1',\n      store: {},\n      root: [],\n      maxLevellist: [],\n      showData: {},\n      activeList: [],\n      searchText: '',\n      searchResult: []\n    };\n  },\n  computed: {\n    isSearching: function isSearching() {\n      return !(this.searchText.trim() === '');\n    },\n    innerPopperClass: function innerPopperClass() {\n      return \"\".concat(this.popperClass, \" multi-cascader \").concat(this.isSearching ? '' : 'multi-cascader-style', \" \").concat(this.activeClass);\n    }\n  },\n  watch: {\n    data: {\n      deep: true,\n      handler: function handler() {\n        this.init();\n      }\n    },\n    value: {\n      deep: true,\n      handler: function handler() {\n        // this.init()\n        this.updateSelect(this.value, true, true);\n      }\n    },\n    selectedNodes: function selectedNodes() {\n      var _this = this;\n\n      this.$emit('change', this.selectedNodes.map(function (o) {\n        return o[_this.isTwoDimensionValue ? '_idArr' : _this.valueKey];\n      }));\n    }\n  },\n  methods: {\n    visibleChange: function visibleChange(v) {\n      this.activeList = [];\n      this.activeClass = 'floor-width-1';\n\n      if (!v) {\n        this.searchText = '';\n      }\n\n      this.$emit('visible-change', v);\n    },\n    handleBlur: function handleBlur(e) {\n      this.searchText = '';\n      this.$emit('blur', e);\n    },\n    handleFocus: function handleFocus(e) {\n      this.$emit('focus', e);\n    },\n    handleClear: function handleClear() {\n      this.selectedNodes.forEach(function (node) {\n        node.check(false);\n      });\n      this.$emit('input', []);\n      this.$emit('clear');\n    },\n    selectOne: function selectOne(item) {\n      item.checked = !item.checked;\n      this.handleCheck(item);\n    },\n    changeLabel: function changeLabel(v) {\n      this.store.nodeList.forEach(function (node) {\n        node.check(v.includes(node.showLabel));\n      });\n    },\n    innerFilterMethod: function innerFilterMethod(v) {\n      this.searchText = v;\n      var tempResult = this.store.nodeList;\n\n      if (v.trim() !== '') {\n        this.activeClass = '';\n\n        if (typeof this.filterMethod === 'function') {\n          this.searchResult = this.filterMethod(tempResult, v);\n        } else {\n          tempResult = tempResult.filter(function (o) {\n            return o.isLeaf;\n          });\n          tempResult = tempResult.filter(function (o) {\n            return o.showLabel.includes(v);\n          });\n          this.searchResult = tempResult;\n        }\n      } else {\n        this.activeClass = 'floor-width-1';\n      }\n    },\n    getKey: function getKey() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0;\n        var v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    },\n    handleClick: function handleClick(node, levelIndex, level) {\n      if (this.maxLevellist[level - 1]) {\n        this.maxLevellist[level - 1].rendered = true;\n      }\n\n      this.activeClass = \"floor-width-\".concat(node.isLeaf ? level : level + 1);\n\n      var tempList = _toConsumableArray(this.activeList);\n\n      if (level < tempList.length) {\n        tempList.splice(level);\n      }\n\n      tempList[level - 1] = node.id;\n      this.showData[level] = node.childNodes;\n      this.activeList = tempList;\n    },\n    handleCheck: function handleCheck(node) {\n      var _this2 = this;\n\n      node.check(node.checked);\n      this.selectedIds = this.store.selectedIds;\n      this.updateSelect(this.store.selectedIds);\n      this.$emit('input', this.selectedNodes.map(function (o) {\n        return o[_this2.isTwoDimensionValue ? '_idArr' : _this2.valueKey];\n      }));\n    },\n    removeOne: function removeOne(v) {\n      var targetNode = this.selectedNodes.find(function (o) {\n        return o.showLabel === v;\n      }) || {};\n      targetNode.checked = false;\n      this.handleCheck(targetNode);\n      this.$emit('remove-tag', v);\n    },\n    updateSelect: function updateSelect() {\n      var _this3 = this;\n\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var needCheckNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var setValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var tempSelectedNodes = [];\n      var tempSelectedLabels = [];\n      var tempSelectedIds = [];\n      this.store.nodeList.forEach(function (node) {\n        node.checked && node.check(false);\n      });\n      data.forEach(function (o) {\n        var targetNode;\n\n        if (setValue) {\n          targetNode = _findByObj(_this3.store.nodeList, _defineProperty({}, _this3.isTwoDimensionValue ? '_idArr' : _this3.valueKey, o)) || {}; // targetNode = _.find(this.store.nodeList, { [this.isTwoDimensionValue ? '_idArr' : this.valueKey]: o }) || {}\n\n          tempSelectedIds.push(targetNode.id);\n        } else {\n          targetNode = _this3.store.nodesMap[o];\n          tempSelectedIds.push(o);\n        }\n\n        if (targetNode) {\n          needCheckNode && targetNode.check(true);\n          tempSelectedNodes.push(targetNode);\n          tempSelectedLabels.push(targetNode.showLabel);\n        }\n      });\n      this.selectedNodes = tempSelectedNodes;\n      this.selectedLabels = tempSelectedLabels;\n      this.selectedIds = tempSelectedIds;\n    },\n    init: function init() {\n      var _this4 = this;\n\n      this.store = new TreeStore({\n        data: this.data,\n        separator: this.separator,\n        valueKey: this.valueKey,\n        labelKey: this.labelKey,\n        childrenKey: this.childrenKey,\n        showLeafLabel: this.showLeafLabel\n      });\n      this.root = this.store.root;\n      this.maxLevellist = Array.from({\n        length: this.store.maxLevel - 1\n      }, function (v, i) {\n        _this4.showData[i + 1] = [];\n        return {\n          id: i + 1,\n          rendered: false\n        };\n      });\n      this.updateSelect(this.value, true, true);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};",{"version":3,"sources":["multi-cascader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div style=\"width:100%;height:100%;\">\r\n    <el-select\r\n      style=\"width:100%;height:100%;\"\r\n      v-model=\"selectedLabels\"\r\n      multiple\r\n      :popper-class=\"innerPopperClass\"\r\n      @remove-tag=\"removeOne\"\r\n      :filterable=\"filterable\"\r\n      :filter-method=\"innerFilterMethod\"\r\n      :reserve-keyword=\"reserveKeyword\"\r\n      @change=\"changeLabel\"\r\n      v-bind=\"$attrs\"\r\n      @blur=\"handleBlur\"\r\n      @visible-change=\"visibleChange\"\r\n      @focus=\"handleFocus\"\r\n      @clear=\"handleClear\"\r\n      :allow-create=\"false\"\r\n    >\r\n      <span slot=\"prefix\" v-if=\"$slots.prefix\">\r\n        <slot name=\"prefix\"></slot>\r\n      </span>\r\n      <template v-if=\"!isSearching\">\r\n        <el-option value=\"__root\">\r\n          <div class=\"ground\" @click.stop>\r\n            <render-list\r\n              :only-last=\"onlyLast\"\r\n              :list=\"root.childNodes\"\r\n              :level=\"1\"\r\n              :active-list=\"activeList\"\r\n              @handle-click=\"handleClick\"\r\n              @handle-check=\"handleCheck\"\r\n              :label-key=\"labelKey\"\r\n              :expand-trigger=\"expandTrigger\"\r\n            ></render-list>\r\n            <template v-for=\"item in maxLevellist\">\r\n              <div\r\n                :class=\"`floor-item floor-position-left-${item.id + 1}`\"\r\n                :key=\"item.id\"\r\n                v-if=\"item.rendered\"\r\n                v-show=\"activeList.length >= item.id\"\r\n              >\r\n                <render-list\r\n                  :only-last=\"onlyLast\"\r\n                  :list=\"showData[item.id]\"\r\n                  :level=\"item.id + 1\"\r\n                  :active-list=\"activeList\"\r\n                  @handle-click=\"handleClick\"\r\n                  @handle-check=\"handleCheck\"\r\n                  :label-key=\"labelKey\"\r\n                  :expand-trigger=\"expandTrigger\"\r\n                ></render-list>\r\n              </div>\r\n            </template>\r\n          </div>\r\n        </el-option>\r\n      </template>\r\n      <template v-if=\"isSearching\">\r\n        <el-option\r\n          v-for=\"item in searchResult\"\r\n          :value=\"item.showLabel\"\r\n          :key=\"getKey(item)\"\r\n        >\r\n          <div style=\"width:100%;height:100%\" @click.stop=\"selectOne(item)\">\r\n            {{item.totalLabel}}\r\n          </div>\r\n        </el-option>\r\n      </template>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TreeStore from './lib/Tree.js'\r\nimport renderList from './render-list.vue'\r\nimport { _findByObj } from './tool/unit'\r\nexport default {\r\n  name: 'el-cascader-multi',\r\n  components: {\r\n    renderList\r\n  },\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default: () => [],\r\n      required: true\r\n    },\r\n    value: {\r\n      type: Array,\r\n      default: () => [],\r\n      required: true\r\n    },\r\n    separator: {\r\n      type: String,\r\n      default: '-'\r\n    },\r\n    filterable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    filterMethod: {\r\n      type: Function\r\n    },\r\n    popperClass: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    reserveKeyword: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    valueKey: {\r\n      type: String,\r\n      default: 'value'\r\n    },\r\n    labelKey: {\r\n      type: String,\r\n      default: 'label'\r\n    },\r\n    childrenKey: {\r\n      type: String,\r\n      default: 'children'\r\n    },\r\n    expandTrigger: {\r\n      type: String,\r\n      default: 'click'\r\n    },\r\n    onlyLast: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isTwoDimensionValue: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    showLeafLabel: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      selectedLabels: [],\r\n      selectedIds: [],\r\n      selectedNodes: [],\r\n      activeClass: 'floor-width-1',\r\n      store: {},\r\n      root: [],\r\n      maxLevellist: [],\r\n      showData: {},\r\n      activeList: [],\r\n      searchText: '',\r\n      searchResult: []\r\n    }\r\n  },\r\n  computed: {\r\n    isSearching () {\r\n      return !(this.searchText.trim() === '')\r\n    },\r\n    innerPopperClass () {\r\n      return `${this.popperClass} multi-cascader ${this.isSearching ? '' : 'multi-cascader-style'} ${this.activeClass}`\r\n    }\r\n  },\r\n  watch: {\r\n    data: {\r\n      deep: true,\r\n      handler () {\r\n        this.init()\r\n      }\r\n    },\r\n    value: {\r\n      deep: true,\r\n      handler () {\r\n        // this.init()\r\n        this.updateSelect(this.value, true, true)\r\n      }\r\n    },\r\n    selectedNodes () {\r\n      this.$emit('change', this.selectedNodes.map(o => o[this.isTwoDimensionValue ? '_idArr' : this.valueKey]))\r\n    }\r\n  },\r\n  methods: {\r\n    visibleChange (v) {\r\n      this.activeList = []\r\n      this.activeClass = 'floor-width-1'\r\n      if (!v) {\r\n        this.searchText = ''\r\n      }\r\n      this.$emit('visible-change', v)\r\n    },\r\n    handleBlur (e) {\r\n      this.searchText = ''\r\n      this.$emit('blur', e)\r\n    },\r\n    handleFocus (e) {\r\n      this.$emit('focus', e)\r\n    },\r\n    handleClear () {\r\n      this.selectedNodes.forEach(node => {\r\n        node.check(false)\r\n      })\r\n      this.$emit('input', [])\r\n      this.$emit('clear')\r\n    },\r\n    selectOne (item) {\r\n      item.checked = !item.checked\r\n      this.handleCheck(item)\r\n    },\r\n    changeLabel (v) {\r\n      this.store.nodeList.forEach(node => {\r\n        node.check(v.includes(node.showLabel))\r\n      })\r\n    },\r\n    innerFilterMethod (v) {\r\n      this.searchText = v\r\n      let tempResult = this.store.nodeList\r\n      if (v.trim() !== '') {\r\n        this.activeClass = ''\r\n        if (typeof this.filterMethod === 'function') {\r\n          this.searchResult = this.filterMethod(tempResult, v)\r\n        } else {\r\n          tempResult = tempResult.filter(o => o.isLeaf)\r\n          tempResult = tempResult.filter(o => o.showLabel.includes(v))\r\n          this.searchResult = tempResult\r\n        }\r\n      } else {\r\n        this.activeClass = 'floor-width-1'\r\n      }\r\n    },\r\n    getKey () {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        let r = Math.random() * 16 | 0\r\n        let v = c === 'x' ? r : (r & 0x3 | 0x8)\r\n        return v.toString(16)\r\n      })\r\n    },\r\n    handleClick (node, levelIndex, level) {\r\n      if (this.maxLevellist[level - 1]) {\r\n        this.maxLevellist[level - 1].rendered = true\r\n      }\r\n      this.activeClass = `floor-width-${node.isLeaf ? level : level + 1}`\r\n      let tempList = [...this.activeList]\r\n      if (level < tempList.length) {\r\n        tempList.splice(level)\r\n      }\r\n      tempList[level - 1] = node.id\r\n      this.showData[level] = node.childNodes\r\n      this.activeList = tempList\r\n    },\r\n    handleCheck (node) {\r\n      node.check(node.checked)\r\n      this.selectedIds = this.store.selectedIds\r\n      this.updateSelect(this.store.selectedIds)\r\n      this.$emit('input', this.selectedNodes.map(o => o[this.isTwoDimensionValue ? '_idArr' : this.valueKey]))\r\n    },\r\n    removeOne (v) {\r\n      let targetNode = this.selectedNodes.find(o => o.showLabel === v) || {}\r\n      targetNode.checked = false\r\n      this.handleCheck(targetNode)\r\n      this.$emit('remove-tag', v)\r\n    },\r\n    updateSelect (data = [], needCheckNode = false, setValue = false) {\r\n      let tempSelectedNodes = []\r\n      let tempSelectedLabels = []\r\n      let tempSelectedIds = []\r\n      this.store.nodeList.forEach(node => {\r\n        node.checked && node.check(false)\r\n      })\r\n      data.forEach(o => {\r\n        let targetNode\r\n        if (setValue) {\r\n          targetNode = _findByObj(this.store.nodeList, { [this.isTwoDimensionValue ? '_idArr' : this.valueKey]: o }) || {}\r\n          // targetNode = _.find(this.store.nodeList, { [this.isTwoDimensionValue ? '_idArr' : this.valueKey]: o }) || {}\r\n          tempSelectedIds.push(targetNode.id)\r\n        } else {\r\n          targetNode = this.store.nodesMap[o]\r\n          tempSelectedIds.push(o)\r\n        }\r\n        if (targetNode) {\r\n          needCheckNode && targetNode.check(true)\r\n          tempSelectedNodes.push(targetNode)\r\n          tempSelectedLabels.push(targetNode.showLabel)\r\n        }\r\n      })\r\n      this.selectedNodes = tempSelectedNodes\r\n      this.selectedLabels = tempSelectedLabels\r\n      this.selectedIds = tempSelectedIds\r\n    },\r\n    init () {\r\n      this.store = new TreeStore({\r\n        data: this.data,\r\n        separator: this.separator,\r\n        valueKey: this.valueKey,\r\n        labelKey: this.labelKey,\r\n        childrenKey: this.childrenKey,\r\n        showLeafLabel: this.showLeafLabel\r\n      })\r\n      this.root = this.store.root\r\n      this.maxLevellist = Array.from({ length: this.store.maxLevel - 1 }, (v, i) => {\r\n        this.showData[i + 1] = []\r\n        return {\r\n          id: i + 1,\r\n          rendered: false\r\n        }\r\n      })\r\n      this.updateSelect(this.value, true, true)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.el-select-dropdown.el-popper.is-multiple.multi-cascader {\r\n  .el-select-dropdown__item.selected::after {\r\n    top: 0;\r\n  }\r\n}\r\n.el-select-dropdown.el-popper.is-multiple.multi-cascader-style{\r\n  min-width: 160px!important;\r\n  .el-select-dropdown__list {\r\n    padding: 0;\r\n    position: relative;\r\n  }\r\n  .el-select-dropdown__item {\r\n    padding: 0;\r\n    height: 216px;\r\n    &.hover {\r\n      background-color: #fff;\r\n    }\r\n  }\r\n  .li-style {\r\n    height: 34px;\r\n    padding: 0px 20px;\r\n    box-sizing: border-box;\r\n    list-style: none;\r\n    width: 160px;\r\n    cursor: pointer;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    line-height: 34px;\r\n    &:hover{\r\n      background-color: rgba(69,200,220,.1);\r\n    }\r\n    &.selected {\r\n      color: #45c8dc;\r\n    }\r\n    &.active-li {\r\n      background-color: rgba(69,200,220,.1);\r\n      color: #45c8dc;\r\n    }\r\n    .li-label-style{\r\n      text-align: left;\r\n      width: 100%;\r\n      box-sizing: border-box;\r\n      padding-right: 15px;\r\n      position: relative;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      .li-label-icon {\r\n        position: absolute;\r\n        right: 0px;\r\n        top: 50%;\r\n        transform: translate(0, -50%);\r\n      }\r\n      .el-checkbox {\r\n        margin-right: 10px;\r\n      }\r\n    }\r\n  }\r\n  .ground {\r\n    width: 100%;\r\n    height: 204px;\r\n    padding: 6px 0;\r\n  }\r\n  .floor-item {\r\n    width: 160px;\r\n    padding: 6px 0;\r\n    border-left: 1px solid #eee;\r\n    position: absolute;\r\n    top: 0;\r\n    height: 204px;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n}\r\n.multi-cascader-style {\r\n  p {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  ol, ul {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n/*$width: 160px;\r\n@each $i in [1,2,3,4,5,6,7,8,9,10] {\r\n  .multi-cascader-style.floor-width-#{$i} {\r\n    width: $i * $width;\r\n  }\r\n  .multi-cascader-style .floor-position-left-#{$i} {\r\n    left: ($i - 1) * $width;\r\n  }\r\n}*/\r\n@width: 160px;\r\n@idList: 1,2,3,4,5,6,7,8,9,10;\r\n\r\neach(@idList, {\r\n  .multi-cascader-style.floor-width-@{value} {\r\n    width: @value * @width;\r\n  }\r\n  .multi-cascader-style .floor-position-left-@{value} {\r\n    left: (@value - 1) * @width;\r\n  }\r\n});\r\n</style>\r\n"],"sourceRoot":"src/components/el-cascader-multi/multi-cascader"}]}